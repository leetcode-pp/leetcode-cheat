!function(n){function e(e){for(var i,r,s=e[0],a=e[1],u=e[2],m=0,c=[];m<s.length;m++)r=s[m],Object.prototype.hasOwnProperty.call(l,r)&&l[r]&&c.push(l[r][0]),l[r]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(n[i]=a[i]);for(d&&d(e);c.length;)c.shift()();return o.push.apply(o,u||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],i=!0,r=1;r<t.length;r++){var a=t[r];0!==l[a]&&(i=!1)}i&&(o.splice(e--,1),n=s(s.s=t[0]))}return n}var i={},r={2:0},l={2:0},o=[];function s(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(n){var e=[];r[n]?e.push(r[n]):0!==r[n]&&{5:1}[n]&&e.push(r[n]=new Promise((function(e,t){for(var i="static/css/"+({}[n]||n)+"-52cec385565b762f1081.chunk.css",l=s.p+i,o=document.getElementsByTagName("link"),a=0;a<o.length;a++){var u=(d=o[a]).getAttribute("data-href")||d.getAttribute("href");if("stylesheet"===d.rel&&(u===i||u===l))return e()}var m=document.getElementsByTagName("style");for(a=0;a<m.length;a++){var d;if((u=(d=m[a]).getAttribute("data-href"))===i||u===l)return e()}var c=document.createElement("link");c.rel="stylesheet",c.type="text/css",c.onload=e,c.onerror=function(e){var i=e&&e.target&&e.target.src||l,o=new Error("Loading CSS chunk "+n+" failed.\n("+i+")");o.code="CSS_CHUNK_LOAD_FAILED",o.request=i,delete r[n],c.parentNode.removeChild(c),t(o)},c.href=l,document.getElementsByTagName("head")[0].appendChild(c)})).then((function(){r[n]=0})));var t=l[n];if(0!==t)if(t)e.push(t[2]);else{var i=new Promise((function(e,i){t=l[n]=[e,i]}));e.push(t[2]=i);var o,a=document.createElement("script");a.charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.src=function(n){return s.p+"static/js/"+({}[n]||n)+"-52cec385565b762f1081.chunk.js"}(n);var u=new Error;o=function(e){a.onerror=a.onload=null,clearTimeout(m);var t=l[n];if(0!==t){if(t){var i=e&&("load"===e.type?"missing":e.type),r=e&&e.target&&e.target.src;u.message="Loading chunk "+n+" failed.\n("+i+": "+r+")",u.name="ChunkLoadError",u.type=i,u.request=r,t[1](u)}l[n]=void 0}};var m=setTimeout((function(){o({type:"timeout",target:a})}),12e4);a.onerror=a.onload=o,document.head.appendChild(a)}return Promise.all(e)},s.m=n,s.c=i,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"===typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)s.d(t,i,function(e){return n[e]}.bind(null,i));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/leetcode-cheat/",s.oe=function(n){throw console.error(n),n};var a=this["webpackJsonpleetcode-cheat"]=this["webpackJsonpleetcode-cheat"]||[],u=a.push.bind(a);a.push=e,a=a.slice();for(var m=0;m<a.length;m++)e(a[m]);var d=u;o.push([630,3]),t()}({194:function(n,e,t){n.exports=t.p+"static/media/collection.309574ec.svg"},195:function(n,e,t){n.exports=t.p+"static/media/view.d44e31d9.svg"},202:function(n,e,t){n.exports=t.p+"static/media/half.8a1d5a9c.svg"},203:function(n,e,t){n.exports={logo:t(455),title:"\u56de\u6eaf",list:[{text:"\u6807\u51c6\u56de\u6eaf\uff08\u4f2a\u4ee3\u7801\uff09",problems:[{id:"combination-sum",title:"39. \u7ec4\u5408\u603b\u548c"},{title:"40. \u7ec4\u5408\u603b\u548c II",id:"combination-sum-ii"},{title:"46. \u5168\u6392\u5217",id:"permutations"},{title:"47. \u5168\u6392\u5217 II",id:"permutations-ii"},{id:"N-Queens-II",title:"52. N \u7687\u540e II"},{id:"subsets",title:"78. \u5b50\u96c6"},{id:"subsets-ii",title:"90. \u5b50\u96c6 II"},{id:"path-sum-ii",title:"113. \u8def\u5f84\u603b\u548c II"},{id:"palindrome-partitioning",title:"131. \u5206\u5272\u56de\u6587\u4e32"},{id:"maximum-score-words-formed-by-letters",title:"1255. \u5f97\u5206\u6700\u9ad8\u7684\u5355\u8bcd\u96c6\u5408"}],codes:[{language:"js",text:"\n          const visited = {}\n          function backtrack(i) {\n              if (\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\uff09{\n                  // \u8fd4\u56de\u7ed3\u679c or \u9000\u51fa\u641c\u7d22\u7a7a\u95f4\n              }\n          \n              visited[i] = true // \u5c06\u5f53\u524d\u72b6\u6001\u6807\u4e3a\u5df2\u641c\u7d22\n              dosomething(i) // \u5bf9i\u505a\u4e00\u4e9b\u64cd\u4f5c\n              for (\u6839\u636ei\u80fd\u5230\u8fbe\u7684\u4e0b\u4e2a\u72b6\u6001j) {\n                  if (!visited[j]) { // \u5982\u679c\u72b6\u6001j\u6ca1\u6709\u88ab\u641c\u7d22\u8fc7\n                      dfs(j)\n                  }\n              }\n              undo(i) // \u6062\u590di\n          }\n          backtrack(0)\n          "}]},{text:"\u7b1b\u5361\u5c14\u79ef\u4f18\u5316",problems:[{id:"word-break-ii",title:"140. \u5355\u8bcd\u62c6\u5206 II"},{id:"ambiguous-coordinates",title:"816. \u6a21\u7cca\u5750\u6807"}],codes:[{language:"py",text:"\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        n = len(s)\n        @lru_cache(None)\n        def backtrack(start):\n            ans = []\n            if start == n:\n                ans.append('')\n            for i in range(start, n):\n                if s[start:i + 1] in wordDict:\n                    if start == 0: temp = s[start:i + 1]\n                    else: temp = \" \" + s[start:i + 1]\n                    ps = backtrack(i + 1)\n                    for p in ps:\n                        ans.append(temp + p)\n            return ans\n        return backtrack(0)"}]}],link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md"}},204:function(n,e,t){n.exports=t.p+"static/media/uf.b7241116.svg"},205:function(n,e,t){n.exports=t.p+"static/media/bfs.afdef661.svg"},206:function(n,e,t){n.exports=t.p+"static/media/tree.1b289fc6.svg"},207:function(n,e,t){n.exports=t.p+"static/media/window.849c4a15.svg"},208:function(n,e,t){n.exports=t.p+"static/media/segment.898267a9.svg"},209:function(n,e,t){n.exports={logo:t(456),title:"\u5806",list:[{text:"\u5c0f\u9876\u5806",problems:[{title:"1046. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf(\u8fd9\u9053\u9898\u9700\u8981\u7528\u5927\u9876\u5806\uff0c\u4e0d\u8fc7\u90fd\u5dee\u4e0d\u591a)",id:"last-stone-weight"}],codes:[{language:"js",text:"\nclass MinHeap {\n\n    constructor () {\n        /* Initialing the array heap and adding a dummy element at index 0 */\n        this.heap = [null]\n    }\n\n    peek() {\n        /* Accessing the min element at index 1 in the heap array */\n        return this.heap[1]\n    }\n    \n    push (node) {\n\n        /* Inserting the new node at the end of the heap array */\n        this.heap.push(node)\n\n        /* Finding the correct position for the new node */\n\n        if (this.heap.length > 1) {\n            let current = this.heap.length - 1\n\n            /* Traversing up the parent node until the current node (current) is greater than the parent (current/2)*/\n            while (current > 1 && this.heap[Math.floor(current/2)] > this.heap[current]) {\n\n                /* Swapping the two nodes by using the ES6 destructuring syntax*/\n                [this.heap[Math.floor(current/2)], this.heap[current]] = [this.heap[current], this.heap[Math.floor(current/2)]]\n                current = Math.floor(current/2)\n            }\n        }\n    }\n    \n    pop() {\n        /* Smallest element is at the index 1 in the heap array */\n        let smallest = this.heap[1]\n\n        /* When there are more than two elements in the array, we put the right most element at the first position\n            and start comparing nodes with the child nodes\n        */\n        if (this.heap.length > 2) {\n            this.heap[1] = this.heap[this.heap.length-1]\n            this.heap.splice(this.heap.length - 1)\n\n            if (this.heap.length === 3) {\n                if (this.heap[1] > this.heap[2]) {\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\n                }\n                return smallest\n            }\n\n            let current = 1\n            let leftChildIndex = current * 2\n            let rightChildIndex = current * 2 + 1\n\n            while (this.heap[leftChildIndex] &&\n                    this.heap[rightChildIndex] &&\n                    (this.heap[current] > this.heap[leftChildIndex] ||\n                        this.heap[current] > this.heap[rightChildIndex])) {\n                if (this.heap[leftChildIndex] < this.heap[rightChildIndex]) {\n                    [this.heap[current], this.heap[leftChildIndex]] = [this.heap[leftChildIndex], this.heap[current]]\n                    current = leftChildIndex\n                } else {\n                    [this.heap[current], this.heap[rightChildIndex]] = [this.heap[rightChildIndex], this.heap[current]]\n                    current = rightChildIndex\n                }\n\n                leftChildIndex = current * 2\n                rightChildIndex = current * 2 + 1\n            }\n        }\n\n        /* If there are only two elements in the array, we directly splice out the first element */\n\n        else if (this.heap.length === 2) {\n            this.heap.splice(1, 1)\n        } else {\n            return null\n        }\n\n        return smallest\n    }\n    /**\n     * Your MinHeap object will be instantiated and called as such:\n     * var obj = new MinHeap()\n     * obj.push(1)\n     * obj.push(2)\n     * obj.peek() // will return 1\n     * obj.pop() // remove 1\n     * obj.peek() // will return 2\n     */ \n}\n"},{language:"py",text:"\nclass min_heap:\n    def __init__(self):\n        self.h = [0]\n\n    def shift_up(self, i):\n        while i // 2 > 0:\n            if self.h[i] < self.h[i // 2]:\n                self.h[i], self.h[i//2] = self.h[i//2], self.h[i]\n            i = i // 2\n\n    def shift_down(self, i):\n        while (i * 2) <= len(self.h)-1:\n            mc = self.minChild(i)\n            if self.h[i] > self.h[mc]:\n                self.h[i], self.h[mc] = self.h[mc], self.h[i]\n            i = mc\n\n    def minChild(self, i):\n        if i * 2 + 1 > len(self.h)-1:\n            return i * 2\n        if self.h[i*2] < self.h[i*2+1]:\n            return i * 2\n        else:\n            return i * 2 + 1\n\n    def heappop(self):\n        if len(self.h) == 1:\n            return None\n        ans = self.h[1]\n        self.h[1] = self.h[len(self.h)-1]\n        self.h.pop()\n        self.shift_down(1)\n        return ans\n\n    def heappush(self, a):\n        self.h.append(a)\n        self.shift_up(len(self.h)-1)\n\n    def build_heap(self, A):\n        self.h = [0] + A\n        i = 1\n        while (i < len(self.h)):\n            self.shift_down(i)\n            i = i + 1\n\n# \u4f7f\u7528\uff1a\n\nh = min_heap()\nh.build_heap([5, 6, 2, 3])\n\nh.heappush(1)\nh.heappop() # 1\nh.heappop() # 2\nh.heappush(1)\nh.heappop() # 1\nh.heappop() # 3\n"},{language:"java",text:'\n// by @CaptainZ\nimport java.util.Arrays;\nimport java.util.Comparator;\n\n/**\n * \u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u6784\u5efa \u5806\n * \u524d\u7f6e\u6761\u4ef6 \u8d77\u70b9\u4e3a 1\n * \u90a3\u4e48 \u5b50\u8282\u70b9\u4e3a  i <<1 \u548c i<<1 + 1\n * \u6838\u5fc3\u65b9\u6cd5\u4e3a\n * shiftdown \u4ea4\u6362\u4e0b\u6c89\n * shiftup \u4ea4\u6362\u4e0a\u6d6e\n * <p>\n * build \u6784\u5efa\u5806\n */\n\npublic class MinHeap {\n\n    int size = 0;\n    int queue[];\n\n    public Heap(int initialCapacity) {\n        if (initialCapacity < 1)\n            throw new IllegalArgumentException();\n        this.queue = new int[initialCapacity];\n    }\n\n    public Heap(int[] arr) {\n        size = arr.length;\n        queue = new int[arr.length + 1];\n        int i = 1;\n        for (int val : arr) {\n            queue[i++] = val;\n        }\n    }\n\n    public void shiftDown(int i) {\n\n        int temp = queue[i];\n\n        while ((i << 1) <= size) {\n            int child = i << 1;\n            // child!=size \u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5305\u542b\u53f3\u8282\u70b9\n            if (child != size && queue[child + 1] < queue[child]) {\n                child++;\n            }\n            if (temp > queue[child]) {\n                queue[i] = queue[child];\n                i = child;\n            } else {\n                break;\n            }\n        }\n        queue[i] = temp;\n    }\n\n\n    public void shiftUp(int i) {\n        int temp = queue[i];\n        while ((i >> 1) > 0) {\n            if (temp < queue[i >> 1]) {\n                queue[i] = queue[i >> 1];\n                i >>= 1;\n            } else {\n                break;\n            }\n        }\n        queue[i] = temp;\n    }\n\n    public int peek() {\n\n        int res = queue[1];\n        return res;\n    }\n\n    public int pop() {\n\n        int res = queue[1];\n\n        queue[1] = queue[size--];\n        shiftDown(1);\n        return res;\n    }\n\n    public void push(int val) {\n        if (size == queue.length - 1) {\n            queue = Arrays.copyOf(queue, size << 1+1);\n        }\n        queue[++size] = val;\n        shiftUp(size);\n    }\n\n    public void buildHeap() {\n        for (int i = size >> 1; i >= 0; i--) {\n            shiftDown(i);\n        }\n    }\n\n    public static void main(String[] args) {\n        int arr[] = new int[]{2,7,4,1,8,1};\n        Heap heap = new Heap(arr);\n        heap.buildHeap();\n        System.out.println(heap.peek());\n        heap.push(5);\n        while (heap.size > 0) {\n            int num = heap.pop();\n            System.out.printf(num + "");\n        }\n    }\n}\n\n\n'}]}],link:""}},21:function(n,e,t){"use strict";t.d(e,"c",(function(){return o})),t.d(e,"h",(function(){return s})),t.d(e,"a",(function(){return a})),t.d(e,"g",(function(){return u})),t.d(e,"k",(function(){return m})),t.d(e,"b",(function(){return d})),t.d(e,"f",(function(){return c})),t.d(e,"j",(function(){return p})),t.d(e,"i",(function(){return f})),t.d(e,"e",(function(){return g})),t.d(e,"d",(function(){return h}));t(42);var i=t(23),r=t(36);var l=function(n){var e=n.content;window.alert(e)};function o(n){try{var e=document.createElement("textarea");return e.value=n,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e),!0}catch(t){return!1}}function s(){return"extension"===Object({NODE_ENV:"production",PUBLIC_URL:"/leetcode-cheat",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0}).REACT_APP_BUILD_TARGET}function a(){return l({content:"\n        \u529b\u6263\u4e0d\u8bb2\u6b66\u5fb7\uff0c\u4e0d\u6309\u5957\u8def\u51fa\u724c\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\u554a\uff0c\u4f60\u53cd\u9988\u7ed9\u6211\uff0c\u4e0b\u6b21\u4e00\u5b9a\u5168\u90e8\u9632\u51fa\u53bb\uff01\u53cd\u9988\u5230\u8fd9\u91cc\uff1a".concat(r.c,"\n      ")})}function u(n){return new URLSearchParams(window.location.search).get(n)}function m(){return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(n){var e=16*Math.random()|0;return("x"===n?e:3&e|8).toString(16)}))}function d(n,e){var t=document.createElement("textarea");t.textContent=n,document.body.appendChild(t),t.select(),document.execCommand("copy"),t.blur(),document.body.removeChild(t),e instanceof Function&&e()}function c(n){return new Promise((function(e,t){try{chrome.storage?chrome.storage.get([n],e):localStorage?e({result:{value:JSON.parse(localStorage.getItem(n))}}):t("\u672a\u77e5\u9519\u8bef")}catch(i){t(i)}}))}function p(n,e){return new Promise((function(t,r){try{chrome.storage?chrome.storage.sync.set(Object(i.a)({},n,e),t):localStorage?(localStorage.setItem(n,JSON.stringify(e)),t()):r("\u60a8\u53ef\u80fd\u7981\u7528\u4e86\u5b58\u50a8\u529f\u80fd~")}catch(l){console.log(l,n,e),r("\u5f53\u524d\u6ca1\u6709\u5b58\u50a8\u6743\u9650\uff0c\u6216\u8005\u5b58\u50a8\u5df2\u8fbe\u5230\u4e0a\u9650~")}}))}function f(n,e){e.token;return fetch("https://my-store2.p.rapidapi.com/order/new",{method:"POST",headers:{"content-type":"application/json","x-rapidapi-key":"8be902d767mshf5d232d6b781084p166217jsn382abe83434f","x-rapidapi-host":"my-store2.p.rapidapi.com"},body:JSON.stringify({customer:JSON.stringify({body:n}),address:""})}).then((function(n){return n.json()}))}function g(n,e){e.token;return fetch("https://my-store2.p.rapidapi.com/order/".concat(n),{method:"GET",headers:{"x-rapidapi-key":"8be902d767mshf5d232d6b781084p166217jsn382abe83434f","x-rapidapi-host":"my-store2.p.rapidapi.com"}}).then((function(n){return n.json()})).then((function(n){return JSON.parse(n.order.customer).body}))}function h(n,e){var t=n,i=null;return function(){var n=this,r=arguments;clearTimeout(i),i=setTimeout((function(){t.apply(n,r)}),e)}}},210:function(n,e,t){n.exports={title:"\u524d\u7f00\u548c",logo:t(457),list:[{text:"\u4e00\u7ef4\u524d\u7f00\u548c",problems:[{title:"1480. \u4e00\u7ef4\u6570\u7ec4\u7684\u52a8\u6001\u548c",id:"running-sum-of-1d-array"}],codes:[{language:"js",text:"\n  // \u5efa\u7acb\n  const pre = [0]\n  for(const num of nums) {\n      pre.push(pre[pre.length-1] + num)\n  }\n  // \u4f7f\u7528\uff0c\u7b49\u4ef7\u4e8e nums[i] + nums[i + 1] + ... + nums[j]\n  pre[j+1] - pre[i]\n"},{language:"py",text:"\n  # \u5efa\u7acb\n  pre = []\n  for num in nums:\n      pre.append(pre[-1] + num)\n  #  \u4f7f\u7528\uff0c\u7b49\u4ef7\u4e8e nums[i] + nums[i + 1] + ... + nums[j]\n  pre[j+1] - pre[i] \n"}]},{text:"\u4e8c\u7ef4\u524d\u7f00\u548c",problems:[{title:"1314. \u77e9\u9635\u533a\u57df\u548c",id:"matrix-block-sum"}],codes:[{language:"py",text:"\n  m,n = len(matrix), len(matrix[0])\n  # \u5efa\u7acb\n  pre = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n  for i in range(1, m+1):\n      for j in range(1, n +1):\n          pre[i][j] = pre[i-1][j]+ pre[i][j-1] - pre[i-1][j-1] + matrix[i-1][j-1]\n\n  # \u4f7f\u7528\uff0c\u7b49\u4ef7\u4e8e\u4ee5(x1,y1)\u4e3a\u77e9\u9635\u5de6\u4e0a\u89d2\u4ee5(x2,y2)\u4e3a\u77e9\u9635\u53f3\u4e0b\u89d2\u7684\u6240\u6709\u683c\u5b50\u7684\u548c\n  pre[x2+1][y2+1] + pre[x1][y1] - pre[x1][y2+1] - pre[x2+1][y1]\n"}]}],link:""}},211:function(n,e,t){n.exports={logo:t(458),title:"\u624b\u6495\u7b97\u6cd5",list:[{text:"\u6570\u7ec4\u6392\u5e8f",problems:[{id:"sort-an-array",title:"912. \u6392\u5e8f\u6570\u7ec4"}],codes:[{language:"py",text:"\n# 1. \u5f52\u5e76\u6392\u5e8f\uff08\u63a8\u8350\uff01\u5176\u4ed6\u6392\u5e8f\u65b9\u6cd5\u90fd\u4e0d\u63a8\u8350\u5728\u7ade\u8d5b\u4e2d\u4f7f\u7528\uff09\n# \u5f52\u5e76\u6392\u5e8f\u4e5e\u4e10\u7248\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def mergeSort(l, r):\n            if l >= r:\n                return\n            mid = (l + r) // 2\n            mergeSort(l, mid)\n            mergeSort(mid + 1, r)\n            temp = []\n            i, j = l, mid + 1\n            while i <= mid and j <= r:\n                if nums[i] < nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= r:\n                temp.append(nums[j])\n                j += 1\n            nums[l : r + 1] = temp\n\n        mergeSort(0, len(nums) - 1)\n        return nums\n# \u5f52\u5e76\u6392\u5e8f\u4f18\u5316\u7248\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        temp = [0] * len(nums)\n\n        def mergeSort(l, r):\n            if l >= r:\n                return\n            mid = (l + r) // 2\n            mergeSort(l, mid)\n            mergeSort(mid + 1, r)\n            i, j = l, mid + 1\n            k = 0\n            while i <= mid and j <= r:\n                if nums[i] < nums[j]:\n                    temp[k] = nums[i]\n                    i += 1\n                else:\n                    temp[k] = nums[j]\n                    j += 1\n                k += 1\n            while i <= mid:\n                temp[k] = nums[i]\n                i += 1\n                k += 1\n            while j <= r:\n                temp[k] = nums[j]\n                j += 1\n                k += 1\n            nums[l : r + 1] = temp[: r - l + 1]\n\n        mergeSort(0, len(nums) - 1)\n        return nums\n\n# 2. \u5feb\u901f\u6392\u5e8f\n# \u5feb\u901f\u6392\u5e8f\u4e5e\u4e10\u7248\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        temp = [0] * len(nums)\n\n        def quickSort(nums):\n            if not nums: return []\n            pivot = nums[0]\n            nums = nums[1:]\n            l = quickSort([num for num in nums if num <= pivot])\n            r = quickSort([num for num in nums if num > pivot])\n            return l + [pivot] + r\n\n        return quickSort(nums)\n# \u5feb\u901f\u6392\u5e8f\u4f18\u5316\u7248\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        temp = [0] * len(nums)\n\n        def partition(l, r):\n            pivot = nums[l]\n\n            while l < r:\n                while l < r and nums[r] >= pivot:\n                    r -= 1\n                nums[l] = nums[r]\n                while l < r and nums[l] <= pivot:\n                    l += 1\n                nums[r] = nums[l]\n            nums[l] = pivot\n            return l\n\n        def quickSort(l, r):\n            if l >= r:\n                return\n            pivot = partition(l, r)\n            quickSort(l, pivot - 1)\n            quickSort(pivot + 1, r)\n\n        quickSort(0, len(nums) - 1)\n        return nums\n\n# 3. \u63d2\u5165\u6392\u5e8f\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for i in range(1, n):\n            t = nums[i]\n            j = i - 1\n            while j > -1 and nums[j] > t:\n                nums[j + 1] = nums[j]\n                j -= 1\n            nums[j + 1] = t\n        return nums\n\n# 4. \u9009\u62e9\u6392\u5e8f\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for i in range(n - 1):\n            k = i\n            for j in range(i + 1, n):\n                if nums[j] < nums[k]:\n                    k = j\n            nums[i], nums[k] = nums[k], nums[i]\n        return nums\n\n# 5. \u5192\u6ce1\u6392\u5e8f\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[j] < nums[i]:\n                    nums[i], nums[j] = nums[j], nums[i]\n        return nums\n\n            "}]},{text:"\u94fe\u8868\u6392\u5e8f",problems:[{id:"sort-list",title:"148. \u6392\u5e8f\u94fe\u8868"}],codes:[{language:"py",text:"\n# 1. \u5f52\u5e76\u6392\u5e8f\uff08\u63a8\u8350\uff01\u5176\u4ed6\u6392\u5e8f\u65b9\u6cd5\u90fd\u4e0d\u63a8\u8350\u5728\u7ade\u8d5b\u4e2d\u4f7f\u7528\uff09\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        def mergeSort(head: ListNode) -> ListNode:\n            if not head or not head.next:\n                return head\n            dummyHead = ListNode(-1)\n            dummyHead.next = head\n            slow, fast = dummyHead, head\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            nxt = slow.next\n            slow.next = None\n            return merge(mergeSort(head), mergeSort(nxt))\n\n        def merge(head1: ListNode, head2: ListNode) -> ListNode:\n            dummyHead = ListNode(-1)\n            temp, l1, l2 = dummyHead, head1, head2\n            while l1 and l2:\n                if l1.val <= l2.val:\n                    temp.next = l1\n                    l1 = l1.next\n                else:\n                    temp.next = l2\n                    l2 = l2.next\n                temp = temp.next\n            if l1:\n                temp.next = l1\n            elif l2:\n                temp.next = l2\n            return dummyHead.next\n\n        return mergeSort(head)\n# 2. \u5feb\u901f\u6392\u5e8f\nclass Solution:\n    def sortList(self, head):\n        # \u6700\u574f\u60c5\u51b5\u4e5f\u662f n ^ 2 \uff0c\u56e0\u6b64\u9762\u8bd5\u6216\u8005\u7ade\u8d5b\u4e0d\u5efa\u8bae\u4f7f\u7528\n        def quickSort(head, end):\n     \n        if head != end:\n                pivot = partition(head, end)\n                quickSort(head, pivot)\n                quickSort(pivot.next, end)\n\n        def partition(head, end):\n            # p1\u662f\u5199\u6307\u9488\uff0cp2\u662f\u8bfb\u6307\u9488\n            # \u6700\u7ec8 p1 \u662f\u5927\u7684\u94fe\u8868\u7684\u5934\uff0c head \u662f\u5c0f\u7684\u94fe\u8868\u7684\u5934\n            pivot_val = head.val\n            p1, p2 = head, head.next\n\n            while p2 != end:\n                if p2.val < pivot_val:\n                    # \u76f8\u5f53\u4e8e\u6570\u7ec4\u7684 append \u65b9\u6cd5\n                    p1 = p1.next\n                    p1.val, p2.val = p2.val, p1.val\n                p2 = p2.next\n            head.val, p1.val = p1.val, pivot_val\n            return p1\n\n        quickSort(head, None)\n        return head\n# 3. \u63d2\u5165\u6392\u5e8f\nclass Solution:\n    def sortList(self, head):\n        if head == None or head.next == None:\n            return head\n\n        dummy = ListNode(-1)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            # \u51c6\u5907\u5c06 last \u63d2\u5165\u5230\u5408\u9002\u4f4d\u7f6e\n            last = cur.next\n            if last and last.val < cur.val:\n                # \u4ece dummy \u5230 cur \u7ebf\u6027\u904d\u5386\u627e\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4f4d\u7f6e\u5e76\u63d2\u5165\n                while pre.next and pre.next.val < last.val:\n                    pre = pre.next\n                tmp = pre.next\n                pre.next = last\n                cur.next = last.next  # \u522b\u5fd8\u4e86\u8fd9\u4e2a\uff0c\u5426\u5219\u6210\u73af\n                last.next = tmp\n                pre = dummy\n            else:\n                cur = last\n\n        return dummy.next\n# 4. \u9009\u62e9\u6392\u5e8f\nclass Solution:\n    def sortList(self, head):\n        temp = head\n\n        while temp:\n            min_node = temp\n            r = temp.next\n            while r:\n                if min_node.val > r.val:\n                    min_node = r\n                r = r.next\n            temp.val, min_node.val = min_node.val, temp.val\n            temp = temp.next\n        return head\n# 5. \u5192\u6ce1\u6392\u5e8f\nclass Solution:\n    def sortList(self, head):\n        if not head:\n            return None\n        swaped = True\n        while swaped:\n            swaped = False\n            temp = head\n            while temp.next:\n                if temp.val > temp.next.val:\n                    swaped = True\n                    temp.val, temp.next.val = temp.next.val, temp.val\n                temp = temp.next\n        return head\n\n  "}]}]}},240:function(n,e,t){},36:function(n,e,t){"use strict";t.d(e,"d",(function(){return i})),t.d(e,"c",(function(){return r})),t.d(e,"a",(function(){return l})),t.d(e,"b",(function(){return o}));var i="https://leetcode-cn.com",r="https://github.com/azl397985856/leetcode-cheat/issues",l="https://github.com/azl397985856/leetcode-cheat/issues/1",o="https://github.com/azl397985856/leetcode-cheat/issues/4"},455:function(n,e,t){n.exports=t.p+"static/media/backtrack.cf55209a.svg"},456:function(n,e,t){n.exports=t.p+"static/media/heap.096d4381.svg"},457:function(n,e,t){n.exports=t.p+"static/media/preSum.c46f4bab.svg"},458:function(n,e,t){n.exports=t.p+"static/media/hand-writing.aed5b561.svg"},460:function(n,e,t){},461:function(n,e,t){n.exports=t.p+"static/media/index.4ba161fc.less"},462:function(n,e,t){n.exports=t.p+"static/media/sqrt.3f15bd86.svg"},622:function(n,e,t){n.exports=t.p+"static/media/sum.7d280127.svg"},623:function(n,e,t){n.exports=t.p+"static/media/times.fe1a8c5f.svg"},624:function(n,e,t){n.exports=t.p+"static/media/div.0b1cd4f2.svg"},625:function(n,e,t){n.exports=t.p+"static/media/frac.8d2b75af.svg"},626:function(n,e,t){n.exports=t.p+"static/media/approx.3bdc78a0.svg"},627:function(n,e,t){n.exports=t.p+"static/media/sqrt.dee505bc.svg"},628:function(n,e,t){n.exports=t.p+"static/media/choice.864f23d2.svg"},630:function(n,e,t){"use strict";t.r(e);var i,r=t(0),l=t.n(r),o=t(29),s=t.n(o),a=(t(240),t(64)),u=t(641),m=t(51),d=t(55),c=t(640),p=t(642),f=(t(157),t(23)),g=(i={"two-sum":{id:"1",name:"two-sum",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u6c42\u548c\u8f6c\u6362\u4e3a\u6c42\u5dee",link:null,color:"blue"},{text:"\u501f\u52a9Map\u7ed3\u6784\u5c06\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ca\u5176\u7d22\u5f15\u76f8\u4e92\u5bf9\u5e94",link:null,color:"blue"},{text:"\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5c06\u67e5\u627e\u65f6\u95f4\u4eceO(N)\u964d\u4f4e\u5230O(1)",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"adobe"},{name:"airbnb"},{name:"amazon"},{name:"apple"},{name:"bloomberg"},{name:"dropbox"},{name:"facebook"},{name:"linkedin"},{name:"microsoft"},{name:"uber"},{name:"yahoo"},{name:"yelp"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1.two-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1.two-sum.md",code:[{language:"java",text:"\nfor(int i = 0; i < n; i++) {\n  for(int j = 0; j < i;j ++){\n    if (nums[i] + nums[j] == target) return [j, i]\n  }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function (nums, target) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const diff = target - nums[i];\n    if (map.has(diff)) {\n      return [map.get(diff), i];\n    }\n    map.set(nums[i], i);\n  }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& A, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < A.size(); ++i) {\n            int t = target - A[i];\n            if (m.count(t)) return { m[t], i };\n            m[A[i]] = i;\n        }\n        return {};\n    }\n};\n"}]},"add-two-numbers":{id:"2",name:"add-two-numbers",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.\u7528\u4e00\u4e2acarried\u53d8\u91cf\u6765\u5b9e\u73b0\u8fdb\u4f4d\u7684\u529f\u80fd\uff0c\u6bcf\u6b21\u76f8\u52a0\u4e4b\u540e\u8ba1\u7b97carried\uff0c\u5e76\u7528\u4e8e\u4e0b\u4e00\u4f4d\u7684\u8ba1\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/2.add-two-numbers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/2.add-two-numbers.md",code:[{language:"java",text:"\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode cur = dummyHead;\n        int carry = 0;\n\n        while(l1 != null || l2 != null)\n        {\n            int sum = carry;\n            if(l1 != null)\n            {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if(l2 != null)\n            {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            // \u521b\u5efa\u65b0\u8282\u70b9\n            carry = sum / 10;\n            cur.next = new ListNode(sum % 10);\n            cur = cur.next;\n\n        }\n        if (carry > 0) {\n            cur.next = new ListNode(carry);\n        }\n        return dummyHead.next;\n    }\n}\n\n"},{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  if (l1 === null || l2 === null) return null;\n\n  // \u4f7f\u7528dummyHead\u53ef\u4ee5\u7b80\u5316\u5bf9\u94fe\u8868\u7684\u5904\u7406\uff0cdummyHead.next\u6307\u5411\u65b0\u94fe\u8868\n  let dummyHead = new ListNode(0);\n  let cur1 = l1;\n  let cur2 = l2;\n  let cur = dummyHead; // cur\u7528\u4e8e\u8ba1\u7b97\u65b0\u94fe\u8868\n  let carry = 0; // \u8fdb\u4f4d\u6807\u5fd7\n\n  while (cur1 !== null || cur2 !== null) {\n    let val1 = cur1 !== null ? cur1.val : 0;\n    let val2 = cur2 !== null ? cur2.val : 0;\n    let sum = val1 + val2 + carry;\n    let newNode = new ListNode(sum % 10); // sum%10\u53d6\u6a21\u7ed3\u679c\u8303\u56f4\u4e3a0~9\uff0c\u5373\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u503c\n    carry = sum >= 10 ? 1 : 0; // sum>=10\uff0ccarry=1\uff0c\u8868\u793a\u6709\u8fdb\u4f4d\n    cur.next = newNode;\n    cur = cur.next;\n\n    if (cur1 !== null) {\n      cur1 = cur1.next;\n    }\n\n    if (cur2 !== null) {\n      cur2 = cur2.next;\n    }\n  }\n\n  if (carry > 0) {\n    // \u5982\u679c\u6700\u540e\u8fd8\u6709\u8fdb\u4f4d\uff0c\u65b0\u52a0\u4e00\u4e2a\u8282\u70b9\n    cur.next = new ListNode(carry);\n  }\n\n  return dummyHead.next;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* ret = nullptr;\n        ListNode* cur = nullptr;\n        int carry = 0;\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\n            carry += (l1 == nullptr ? 0 : l1->val) + (l2 == nullptr ? 0 : l2->val);\n            auto temp = new ListNode(carry % 10);\n            carry /= 10;\n            if (ret == nullptr) {\n                ret = temp;\n                cur = ret;\n            }\n            else {\n                cur->next = temp;\n                cur = cur->next;\n            }\n            l1 = l1 == nullptr ? nullptr : l1->next;\n            l2 = l2 == nullptr ? nullptr : l2->next;\n        }\n        return ret;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        """\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        """\n        res=ListNode(0)\n        head=res\n        carry=0\n        while l1 or l2 or carry!=0:\n            sum=carry\n            if l1:\n                sum+=l1.val\n                l1=l1.next\n            if l2:\n                sum+=l2.val\n                l2=l2.next\n            # set value\n            if sum<=9:\n                res.val=sum\n                carry=0\n            else:\n                res.val=sum%10\n                carry=sum//10\n            # creat new node\n            if l1 or l2 or carry!=0:\n                res.next=ListNode(0)\n                res=res.next\n        return head\n\n'}]},"longest-substring-without-repeating-characters":{id:"3",name:"longest-substring-without-repeating-characters",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"}],keyPoints:[{text:"mapper\u8bb0\u5f55\u51fa\u73b0\u8fc7\u5e76\u4e14\u6ca1\u6709\u88ab\u5220\u9664\u7684\u5b57\u7b26",link:null,color:"blue"},{text:"\u6ed1\u52a8\u7a97\u53e3\u8bb0\u5f55\u5f53\u524dindex\u5f00\u59cb\u7684\u6700\u5927\u7684\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\u5e8f\u5217",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md",code:[{language:"java",text:"\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int ans = 0, start = 0;\n        int n = s.length();\n        //\n        Map<Character, Integer> map = new HashMap<>();\n\n        for(int i=0;i<n;i++)\n        {\n            char alpha = s.charAt(i);\n            if(map.containsKey(alpha))\n            {\n                start = Math.max(start, map.get(alpha)+1);\n            }\n            ans = Math.max(ans, i-start+1);\n            // \u5b57\u7b26\u4f4d\u7f6e\n            map.put(alpha, i);\n        }\n\n        return ans;\n    }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int ans = 0, start = 0;\n        int n = s.length();\n        //\n        map<char, int> mp;\n\n        for(int i=0;i<n;i++)\n        {\n            char alpha = s[i];\n            if(mp.count(alpha))\n            {\n                start = max(start, mp[alpha]+1);\n            }\n            ans = max(ans, i-start+1);\n            // \u5b57\u7b26\u4f4d\u7f6e\n            mp[alpha] = i;\n        }\n\n        return ans;\n    }\n};\n"},{language:"py",text:"\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        l = 0\n        ans = 0\n        counter = defaultdict(lambda: 0)\n\n        for r in range(len(s)):\n            while counter.get(s[r], 0) != 0:\n                counter[s[l]] = counter.get(s[l], 0) - 1\n                l += 1\n            counter[s[r]] += 1\n            ans = max(ans, r - l + 1)\n\n        return ans\n"}]},"median-of-two-sorted-arrays":{id:"4",name:"median-of-two-sorted-arrays",pre:[{text:"\u4e2d\u4f4d\u6570",link:null,color:"cyan"},{text:"\u5206\u6cbb\u6cd5",link:null,color:"volcano"},{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u6709\u5e8f\u6570\u7ec4\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u67e5\u627e",link:null,color:"blue"},{text:"\u5bf9\u5c0f\u7684\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206\u53ef\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u6839\u636eleftp1,rightp2,leftp2\u548crightp1\u7684\u5927\u5c0f\u5173\u7cfb\u786e\u5b9a\u7ed3\u675f\u70b9\u548c\u6536\u7f29\u65b9\u5411",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/4.median-of-two-sorted-arrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/4.median-of-two-sorted-arrays.md",code:[{language:"java",text:"\nclass MedianTwoSortedArrayBruteForce {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n      int[] newArr = mergeTwoSortedArray(nums1, nums2);\n      int n = newArr.length;\n      if (n % 2 == 0) {\n        // even\n        return (double) (newArr[n / 2] + newArr[n / 2 - 1]) / 2;\n      } else {\n        // odd\n        return (double) newArr[n / 2];\n      }\n    }\n    private int[] mergeTwoSortedArray(int[] nums1, int[] nums2) {\n      int m = nums1.length;\n      int n = nums2.length;\n      int[] res = new int[m + n];\n      int i = 0;\n      int j = 0;\n      int idx = 0;\n      while (i < m && j < n) {\n        if (nums1[i] <= nums2[j]) {\n          res[idx++] = nums1[i++];\n        } else {\n          res[idx++] = nums2[j++];\n        }\n      }\n      while (i < m) {\n        res[idx++] = nums1[i++];\n      }\n      while (j < n) {\n        res[idx++] = nums2[j++];\n      }\n      return res;\n    }\n}\n"},{language:"java",text:"\nclass MedianSortedTwoArrayBinarySearch {\n  public static double findMedianSortedArraysBinarySearch(int[] nums1, int[] nums2) {\n     // do binary search for shorter length array, make sure time complexity log(min(m,n)).\n     if (nums1.length > nums2.length) {\n        return findMedianSortedArraysBinarySearch(nums2, nums1);\n      }\n      int m = nums1.length;\n      int n = nums2.length;\n      int lo = 0;\n      int hi = m;\n      while (lo <= hi) {\n        // partition A position i\n        int i = lo + (hi - lo) / 2;\n        // partition B position j\n        int j = (m + n + 1) / 2 - i;\n\n        int maxLeftA = i == 0 ? Integer.MIN_VALUE : nums1[i - 1];\n        int minRightA = i == m ? Integer.MAX_VALUE : nums1[i];\n\n        int maxLeftB = j == 0 ? Integer.MIN_VALUE : nums2[j - 1];\n        int minRightB = j == n ? Integer.MAX_VALUE : nums2[j];\n\n        if (maxLeftA <= minRightB && maxLeftB <= minRightA) {\n          // total length is even\n          if ((m + n) % 2 == 0) {\n            return (double) (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2;\n          } else {\n            // total length is odd\n            return (double) Math.max(maxLeftA, maxLeftB);\n          }\n        } else if (maxLeftA > minRightB) {\n          // binary search left half\n          hi = i - 1;\n        } else {\n          // binary search right half\n          lo = i + 1;\n        }\n      }\n      return 0.0;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n  // \u5f52\u5e76\u6392\u5e8f\n  const merged = [];\n  let i = 0;\n  let j = 0;\n  while (i < nums1.length && j < nums2.length) {\n    if (nums1[i] < nums2[j]) {\n      merged.push(nums1[i++]);\n    } else {\n      merged.push(nums2[j++]);\n    }\n  }\n  while (i < nums1.length) {\n    merged.push(nums1[i++]);\n  }\n  while (j < nums2.length) {\n    merged.push(nums2[j++]);\n  }\n\n  const { length } = merged;\n  return length % 2 === 1\n    ? merged[Math.floor(length / 2)]\n    : (merged[length / 2] + merged[length / 2 - 1]) / 2;\n};\n"},{language:"js",text:"\n/**\n * \u4e8c\u5206\u89e3\u6cd5\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n  // make sure to do binary search for shorten array\n  if (nums1.length > nums2.length) {\n    [nums1, nums2] = [nums2, nums1];\n  }\n  const m = nums1.length;\n  const n = nums2.length;\n  let low = 0;\n  let high = m;\n  while (low <= high) {\n    const i = low + Math.floor((high - low) / 2);\n    const j = Math.floor((m + n + 1) / 2) - i;\n\n    const maxLeftA = i === 0 ? -Infinity : nums1[i - 1];\n    const minRightA = i === m ? Infinity : nums1[i];\n    const maxLeftB = j === 0 ? -Infinity : nums2[j - 1];\n    const minRightB = j === n ? Infinity : nums2[j];\n\n    if (maxLeftA <= minRightB && minRightA >= maxLeftB) {\n      return (m + n) % 2 === 1\n        ? Math.max(maxLeftA, maxLeftB)\n        : (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2;\n    } else if (maxLeftA > minRightB) {\n      high = i - 1;\n    } else {\n      low = low + 1;\n    }\n  }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        if (nums1.size() > nums2.size()) swap(nums1, nums2);\n        int M = nums1.size(), N = nums2.size(), L = 0, R = M, K = (M + N + 1) / 2;\n        while (true) {\n            int i = (L + R) / 2, j = K - i;\n            if (i < M && nums2[j - 1] > nums1[i]) L = i + 1;\n            else if (i > L && nums1[i - 1] > nums2[j]) R = i - 1;\n            else {\n                int maxLeft = max(i ? nums1[i - 1] : INT_MIN, j ? nums2[j - 1] : INT_MIN);\n                if ((M + N) % 2) return maxLeft;\n                int minRight = min(i == M ? INT_MAX : nums1[i], j == N ? INT_MAX : nums2[j]);\n                return (maxLeft + minRight) / 2.0;\n            }\n        }\n    }\n};\n\n"},{language:"py",text:"\nif leftp1 > rightp2:\n    hi = mid1 - 1\nelse:\n    lo = mid1 + 1\n"},{language:"py",text:"\nif leftp2 > rightp1:\n    hi = mid2 - 1\nelse:\n    lo = mid2 + 1\n"},{language:"py",text:'\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        N = len(nums1)\n        M = len(nums2)\n        if N > M:\n            return self.findMedianSortedArrays(nums2, nums1)\n\n        lo = 0\n        hi = N\n        combined = N + M\n\n        while lo <= hi:\n            mid1 = lo + hi >> 1\n            mid2 = ((combined + 1) >> 1) - mid1\n\n            leftp1 = -float("inf") if mid1 == 0 else nums1[mid1 - 1]\n            rightp1 = float("inf") if mid1 == N else nums1[mid1]\n\n            leftp2 = -float("inf") if mid2 == 0 else nums2[mid2 - 1]\n            rightp2 = float("inf") if mid2 == M else nums2[mid2]\n\n            # Check if the partition is valid for the case of\n            if leftp1 <= rightp2 and leftp2 <= rightp1:\n                if combined % 2 == 0:\n                    return (max(leftp1, leftp2)+min(rightp1, rightp2)) / 2.0\n\n                return max(leftp1, leftp2)\n            else:\n                if leftp1 > rightp2:\n                    hi = mid1 - 1\n                else:\n                    lo = mid1 + 1\n        return -1\n'}]},"longest-palindromic-substring":{id:"5",name:"longest-palindromic-substring",pre:[{text:"\u56de\u6587",link:null,color:"lime"}],keyPoints:[{text:"\u201d\u5ef6\u4f38\u201c\uff08extend\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/5.longest-palindromic-substring.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/5.longest-palindromic-substring.md",code:[{language:"js",text:"\nif (s[i] === s[j] && dp[i + 1][j - 1]) {\n  dp[i][j] = true;\n}\n"},{language:"js",text:'\n/*\n * @lc app=leetcode id=5 lang=javascript\n *\n * [5] Longest Palindromic Substring\n */\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  // babad\n  // tag : dp\n  if (!s || s.length === 0) return "";\n  let res = s[0];\n\n  const dp = [];\n\n  // \u5012\u7740\u904d\u5386\u7b80\u5316\u64cd\u4f5c\uff0c \u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662fdp[i][..]\u4f9d\u8d56\u4e8edp[i + 1][..]\n  for (let i = s.length - 1; i >= 0; i--) {\n    dp[i] = [];\n    for (let j = i; j < s.length; j++) {\n      if (j - i === 0) dp[i][j] = true;\n      // specail case 1\n      else if (j - i === 1 && s[i] === s[j]) dp[i][j] = true;\n      // specail case 2\n      else if (s[i] === s[j] && dp[i + 1][j - 1]) {\n        // state transition\n        dp[i][j] = true;\n      }\n\n      if (dp[i][j] && j - i + 1 > res.length) {\n        // update res\n        res = s.slice(i, j + 1);\n      }\n    }\n  }\n\n  return res;\n};\n'},{language:"cpp",text:"\nclass Solution {\nprivate:\n    int expand(string &s, int L, int R) {\n        while (L >= 0 && R < s.size() && s[L] == s[R]) {\n            --L;\n            ++R;\n        }\n        return R - L - 1;\n    }\npublic:\n    string longestPalindrome(string s) {\n        if (s.empty()) return s;\n        int start = 0, maxLen = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            int len1 = expand(s, i, i);\n            int len2 = expand(s, i, i + 1);\n            int len = max(len1, len2);\n            if (len > maxLen) {\n                start = i - (len - 1) / 2;\n                maxLen = len;\n            }\n        }\n        return s.substr(start, maxLen);\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n = len(s)\n        if n == 0:\n            return ""\n        res = s[0]\n        def extend(i, j, s):\n            while(i >= 0 and j < len(s) and s[i] == s[j]):\n                i -= 1\n                j += 1\n            return s[i + 1:j]\n\n        for i in range(n - 1):\n            e1 = extend(i, i, s)\n            e2 = extend(i, i + 1, s)\n            if max(len(e1), len(e2)) > len(res):\n                res = e1 if len(e1) > len(e2) else e2\n        return res\n'}]},"container-with-most-water":{id:"11",name:"container-with-most-water",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u963f\u91cc\u5df4\u5df4"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/11.container-with-most-water.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/11.container-with-most-water.md",code:[{language:"js",text:"\nlet max = 0;\nfor (let i = 0; i < height.length; i++) {\n  for (let j = i + 1; j < height.length; j++) {\n    const currentArea = Math.abs(i - j) * Math.min(height[i], height[j]);\n    if (currentArea > max) {\n      max = currentArea;\n    }\n  }\n}\nreturn max;\n"},{language:"js",text:"\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  if (!height || height.length <= 1) return 0;\n\n  let leftPos = 0;\n  let rightPos = height.length - 1;\n  let max = 0;\n  while (leftPos < rightPos) {\n    const currentArea =\n      Math.abs(leftPos - rightPos) *\n      Math.min(height[leftPos], height[rightPos]);\n    if (currentArea > max) {\n      max = currentArea;\n    }\n    // \u66f4\u65b0\u5c0f\u7684\n    if (height[leftPos] < height[rightPos]) {\n      leftPos++;\n    } else {\n      // \u5982\u679c\u76f8\u7b49\u5c31\u968f\u4fbf\u4e86\n      rightPos--;\n    }\n  }\n\n  return max;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxArea(self, heights):\n        l, r =  0, len(heights) - 1\n        ans = 0\n        while l < r:\n            ans = max(ans, (r - l) * min(heights[l], heights[r]))\n            if heights[r] > heights[l]:\n                l += 1\n            else:\n                r -= 1\n        return ans\n"}]},"3sum":{id:"15",name:"3sum",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u6392\u5e8f\u4e4b\u540e\uff0c\u7528\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5206\u6cbb",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/15.3sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/15.3sum.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n  if (nums.length < 3) return [];\n  const list = [];\n  nums.sort((a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    //nums is sorted,so it's impossible to have a sum = 0\n    if (nums[i] > 0) break;\n    // skip duplicated result without set\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\n    let left = i + 1;\n    let right = nums.length - 1;\n\n    // for each index i\n    // we want to find the triplet [i, left, right] which sum to 0\n    while (left < right) {\n      // since left < right, and left > i, no need to compare i === left and i === right.\n      if (nums[left] + nums[right] + nums[i] === 0) {\n        list.push([nums[left], nums[right], nums[i]]);\n        // skip duplicated result without set\n        while (nums[left] === nums[left + 1]) {\n          left++;\n        }\n        left++;\n        // skip duplicated result without set\n        while (nums[right] === nums[right - 1]) {\n          right--;\n        }\n        right--;\n        continue;\n      } else if (nums[left] + nums[right] + nums[i] > 0) {\n        right--;\n      } else {\n        left++;\n      }\n    }\n  }\n  return list;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& A) {\n        sort(begin(A), end(A));\n        vector<vector<int>> ans;\n        int N = A.size();\n        for (int i = 0; i < N - 2; ++i) {\n            if (i && A[i] == A[i - 1]) continue;\n            int L = i + 1, R = N - 1;\n            while (L < R) {\n                int sum = A[i] + A[L] + A[R];\n                if (sum == 0) ans.push_back({ A[i], A[L], A[R] });\n                if (sum >= 0) {\n                    --R;\n                    while (L < R && A[R] == A[R + 1]) --R;\n                }\n                if (sum <= 0) {\n                    ++L;\n                    while (L < R && A[L] == A[L - 1]) ++L;\n                }\n            }\n        }\n        return ans;\n    }\n}\n"}]},"Letter-Combinations-of-a-Phone-Number":{id:"17",name:"Letter-Combinations-of-a-Phone-Number",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"red"}],keyPoints:[{text:"\u56de\u6eaf",link:null,color:"blue"},{text:"\u56de\u6eaf\u6a21\u677f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md",code:[{language:"java",text:'\nclass Solution {\n\n    private String letterMap[] = {\n            " ",    //0\n            "",     //1\n            "abc",  //2\n            "def",  //3\n            "ghi",  //4\n            "jkl",  //5\n            "mno",  //6\n            "pqrs", //7\n            "tuv",  //8\n            "wxyz"  //9\n    };\n    private ArrayList<String> res;\n    public List<String> letterCombinations(String digits) {\n        res = new ArrayList<String>();\n        if(digits.equals(""))\n        {\n            return res;\n        }\n        dfs(digits, 0, "");\n        return res;\n    }\n\n    public void dfs(String digits, int index, String s)\n    {\n        if(index == digits.length())\n        {\n            res.add(s);\n            return;\n        }\n        // \u83b7\u53d6\u5f53\u524d\u6570\u5b57\n        Character c = digits.charAt(index);\n        // \u83b7\u53d6\u6570\u5b57\u5bf9\u5e94\u5b57\u6bcd\n        String letters = letterMap[c-\'0\'];\n        for(int i = 0 ; i < letters.length() ; i ++)\n        {\n            dfs(digits, index+1, s+letters.charAt(i));\n        }\n    }\n}\n'},{language:"js",text:'\n/**\n * @param {string} digits\n * @return {string[]}\n */\nconst letterCombinations = function (digits) {\n  if (!digits) {\n    return [];\n  }\n  const len = digits.length;\n  const map = new Map();\n  map.set("2", "abc");\n  map.set("3", "def");\n  map.set("4", "ghi");\n  map.set("5", "jkl");\n  map.set("6", "mno");\n  map.set("7", "pqrs");\n  map.set("8", "tuv");\n  map.set("9", "wxyz");\n  const result = [];\n\n  function generate(i, str) {\n    if (i == len) {\n      result.push(str);\n      return;\n    }\n    const tmp = map.get(digits[i]);\n    for (let r = 0; r < tmp.length; r++) {\n      generate(i + 1, str + tmp[r]);\n    }\n  }\n  generate(0, "");\n  return result;\n};\n'},{language:"cpp",text:'\nclass Solution {\npublic:\n    string letterMap[10] = {" "," ","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};\n    vector<string> res;\n    vector<string> letterCombinations(string digits) {\n        if(digits == "")\n        {\n            return res;\n        }\n        dfs(digits, 0, "");\n        return res;\n    }\n\n    void dfs(string digits, int index, string s)\n    {\n        if(index == digits.length())\n        {\n            res.push_back(s);\n            return;\n        }\n        // \u83b7\u53d6\u5f53\u524d\u6570\u5b57\n        char c = digits[index];\n        // \u83b7\u53d6\u6570\u5b57\u5bf9\u5e94\u5b57\u6bcd\n        string letters = letterMap[c-\'0\'];\n        for(int i = 0 ; i < letters.length() ; i ++)\n        {\n            dfs(digits, index+1, s+letters[i]);\n        }\n    }\n}\n'},{language:"py",text:'\nclass Solution(object):\n    def letterCombinations(self, digits):\n        """\n        :type digits: str\n        :rtype: List[str]\n        """\n        if not digits:\n            return []\n        # 0-9\n        self.d = [" "," ","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"]\n        self.res = []\n        self.dfs(digits, 0, "")\n        return self.res\n\n    def dfs(self, digits, index, s):\n        # \u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6,\u7528index\u8bb0\u5f55\u6bcf\u6b21\u904d\u5386\u5230\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n        if index == len(digits):\n            self.res.append(s)\n            return\n        # \u83b7\u53d6\u5f53\u524d\u6570\u5b57\n        c = digits[index]\n        # print(c, int(c))\n        # \u83b7\u53d6\u6570\u5b57\u5bf9\u5e94\u5b57\u6bcd\n        letters = self.d[int(c)]\n        # \u904d\u5386\u5b57\u7b26\u4e32\n        for l in letters:\n            # \u8c03\u7528\u4e0b\u4e00\u5c42\n            self.dfs(digits, index+1, s+l)\n'},{language:"py",text:'\n\n# \u8f93\u5165\uff1a"23"\n# \u8f93\u51fa\uff1a["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        mapper = [" ", " ", "abc", "def", "ghi",\n                  "jkl", "mno", "pqrs", "tuv", "wxyz"]\n        @lru_cache(None)\n        def backtrack(digits, start):\n            if start >= len(digits):\n                return [\'\']\n            ans = []\n            for i in range(start, len(digits)):\n                for c in mapper[int(digits[i])]:\n                    # \u7b1b\u5361\u5c14\u79ef\n                    for p in backtrack(digits, i + 1):\n                        # \u9700\u8981\u8fc7\u6ee4\u8bf8\u5982  "d", "e", "f" \u7b49\u957f\u5ea6\u4e0d\u7b26\u5408\u7684\u6570\u636e\n                        if start == 0:\n                            if len(c + p) == len(digits):\n                                ans.append(c + p)\n                        else:\n                            ans.append(c + p)\n            return ans\n        if not digits:\n            return []\n        return backtrack(digits, 0)\n\n'}]},removeNthNodeFromEndofList:{id:"19",name:"removeNthNodeFromEndofList",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.\u4f7f\u7528\u53cc\u6307\u94883.\u4f7f\u7528\u4e00\u4e2adummyHead\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md",code:[{language:"java",text:"\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        TreeNode dummy = new TreeNode(0);\n        dummy.next = head;\n        TreeNode first = dummy;\n        TreeNode second = dummy;\n\n        if (int i=0; i<=n; i++) {\n            first = first.next;\n        }\n\n        while (first != null) {\n            first = first.next;\n            second = second.next;\n        }\n\n        second.next = second.next.next;\n\n        return dummy.next;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  let i = -1;\n  const noop = {\n    next: null,\n  };\n\n  const dummyHead = new ListNode(); // \u589e\u52a0\u4e00\u4e2adummyHead \u7b80\u5316\u64cd\u4f5c\n  dummyHead.next = head;\n\n  let currentP1 = dummyHead;\n  let currentP2 = dummyHead;\n\n  while (currentP1) {\n    if (i === n) {\n      currentP2 = currentP2.next;\n    }\n\n    if (i !== n) {\n      i++;\n    }\n\n    currentP1 = currentP1.next;\n  }\n\n  currentP2.next = ((currentP2 || noop).next || noop).next;\n\n  return dummyHead.next;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode *p = head, *q = head;\n        while (n--) q = q->next;\n        if (!q) {\n            head = head->next;\n            delete p;\n            return head;\n        }\n        while (q->next) p = p->next, q = q->next;\n        q = p->next;\n        p->next = q->next;\n        delete q;\n        return head;\n    }\n};\n"}]},"valid-parentheses":{id:"20",name:"valid-parentheses",pre:[{text:"\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"red"}],keyPoints:[{text:"\u89e3\u67901.\u6808\u7684\u57fa\u672c\u7279\u70b9\u548c\u64cd\u4f5c2.\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u6a21\u62df\u6808\u6bd4\u5982\u5165\uff1apush\u51fa\uff1apop\u5c31\u662f\u6808\u3002\u5165\uff1apush\u51fashift\u5c31\u662f\u961f\u5217\u3002\u4f46\u662f\u8fd9\u79cd\u7b97\u6cd5\u5b9e\u73b0\u7684\u961f\u5217\u5728\u5934\u90e8\u5220\u9664\u5143\u7d20\u7684\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u5177\u4f53\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b[\u53cc\u7aef\u961f\u5217deque](https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97)\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"},{name:"amazon"},{name:"bloomberg"},{name:"facebook"},{name:"google"},{name:"microsoft"},{name:"twitter"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/20.valid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/20.valid-parentheses.md",code:[{language:"js",text:'\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function (s) {\n  let valid = true;\n  const stack = [];\n  const mapper = {\n    "{": "}",\n    "[": "]",\n    "(": ")",\n  };\n\n  for (let i in s) {\n    const v = s[i];\n    if (["(", "[", "{"].indexOf(v) > -1) {\n      stack.push(v);\n    } else {\n      const peak = stack.pop();\n      if (v !== mapper[peak]) {\n        return false;\n      }\n    }\n  }\n\n  if (stack.length > 0) return false;\n\n  return valid;\n};\n'},{language:"js",text:'\nvar isValid = function (s) {\n  while (s.includes("[]") || s.includes("()") || s.includes("{}")) {\n    s = s.replace("[]", "").replace("()", "").replace("{}", "");\n  }\n  s = s.replace("[]", "").replace("()", "").replace("{}", "");\n  return s.length === 0;\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool isValid(string s) {\n        int top = -1;\n        for(int i =0;i<s.length();++i){\n            if(top<0 || !isMatch(s[top], s[i])){\n                ++top;\n                s[top] = s[i];\n            }else{\n                --top;\n            }\n        }\n        return top == -1;\n    }\n    bool isMatch(char c1, char c2){\n        if(c1 == '(' && c2 == ')') return true;\n        if(c1 == '[' && c2 == ']') return true;\n        if(c1 == '{' && c2 == '}') return true;\n        return false;\n    }\n};\n"},{language:"py",text:'\n    class Solution:\n        def isValid(self,s):\n          stack = []\n          map = {\n            "{":"}",\n            "[":"]",\n            "(":")"\n          }\n          for x in s:\n            if x in map:\n              stack.append(map[x])\n            else:\n              if len(stack)!=0:\n                top_element = stack.pop()\n                if x != top_element:\n                  return False\n                else:\n                  continue\n              else:\n                return False\n          return len(stack) == 0\n'},{language:"py",text:"\nclass Solution:\n     def isValid(self, s):\n\n        while '[]' in s or '()' in s or '{}' in s:\n            s = s.replace('[]','').replace('()','').replace('{}','')\n        return not len(s)\n"}]},"merge-two-sorted-lists":{id:"21",name:"merge-two-sorted-lists",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"},{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u638c\u63e1\u94fe\u8868\u6570\u636e\u7ed3\u6784",link:null,color:"blue"},{text:"\u8003\u8651\u8fb9\u754c\u60c5\u51b5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"amazon"},{name:"apple"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/21.merge-two-sorted-lists.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/21.merge-two-sorted-lists.md",code:[{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nconst mergeTwoLists = function (l1, l2) {\n  if (l1 === null) {\n    return l2;\n  }\n  if (l2 === null) {\n    return l1;\n  }\n  if (l1.val < l2.val) {\n    l1.next = mergeTwoLists(l1.next, l2);\n    return l1;\n  } else {\n    l2.next = mergeTwoLists(l1, l2.next);\n    return l2;\n  }\n};\n"},{language:"js",text:"\nvar mergeTwoLists = function (l1, l2) {\n  const prehead = new ListNode(-1);\n\n  let prev = prehead;\n  while (l1 != null && l2 != null) {\n    if (l1.val <= l2.val) {\n      prev.next = l1;\n      l1 = l1.next;\n    } else {\n      prev.next = l2;\n      l2 = l2.next;\n    }\n    prev = prev.next;\n  }\n  prev.next = l1 === null ? l2 : l1;\n\n  return prehead.next;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr) {\n            return l2;\n        } else if (l2 == nullptr) {\n            return l1;\n        } else if (l1->val < l2->val) {\n            l1->next = mergeTwoLists(l1->next, l2);\n            return l1;\n        } else {\n            l2->next = mergeTwoLists(l1, l2->next);\n            return l2;\n        }\n    }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\n        ListNode head, *tail = &head;\n        while (a && b) {\n            if (a->val <= b->val) {\n                tail->next = a;\n                a = a->next;\n            } else {\n                tail->next = b;\n                b = b->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = a ? a : b;\n        return head.next;\n    }\n};\n"}]},"generate-parentheses":{id:"22",name:"generate-parentheses",pre:[{text:"DFS",link:null,color:"red"},{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u5f53l<r\u65f6\u8bb0\u5f97\u526a\u679d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/22.generate-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/22.generate-parentheses.md",code:[{language:"js",text:'\n/**\n * @param {number} n\n * @return {string[]}\n * @param l \u5de6\u62ec\u53f7\u5df2\u7ecf\u7528\u4e86\u51e0\u4e2a\n * @param r \u53f3\u62ec\u53f7\u5df2\u7ecf\u7528\u4e86\u51e0\u4e2a\n * @param str \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u62fc\u63a5\u5b57\u7b26\u4e32\u7ed3\u679c\n * @param res \u7ed3\u679c\u96c6\n */\nconst generateParenthesis = function (n) {\n  const res = [];\n\n  function dfs(l, r, str) {\n    if (l == n && r == n) {\n      return res.push(str);\n    }\n    // l \u5c0f\u4e8e r \u65f6\u4e0d\u6ee1\u8db3\u6761\u4ef6 \u526a\u679d\n    if (l < r) {\n      return;\n    }\n    // l \u5c0f\u4e8e n \u65f6\u53ef\u4ee5\u63d2\u5165\u5de6\u62ec\u53f7\uff0c\u6700\u591a\u53ef\u4ee5\u63d2\u5165 n \u4e2a\n    if (l < n) {\n      dfs(l + 1, r, str + "(");\n    }\n    // r < l \u65f6 \u53ef\u4ee5\u63d2\u5165\u53f3\u62ec\u53f7\n    if (r < l) {\n      dfs(l, r + 1, str + ")");\n    }\n  }\n  dfs(0, 0, "");\n  return res;\n};\n'},{language:"cpp",text:"\ns.push_back(')');\ndfs(l, r + 1, s);\ns.pop_back();\n"},{language:"cpp",text:"\nclass Solution {\nprivate:\n    vector<string> ans;\n    void generate(int leftCnt, int rightCnt, string &s) {\n        if (!leftCnt && !rightCnt) {\n            ans.push_back(s);\n            return;\n        }\n        if (leftCnt) {\n            s.push_back('(');\n            generate(leftCnt - 1, rightCnt, s);\n            s.pop_back();\n        }\n        if (rightCnt > leftCnt) {\n            s.push_back(')');\n            generate(leftCnt, rightCnt - 1, s);\n            s.pop_back();\n        }\n    }\npublic:\n    vector<string> generateParenthesis(int n) {\n        string s;\n        generate(n, n, s);\n        return ans;\n    }\n};\n"},{language:"py",text:"\nres = []\ndef dfs(l, r, s):\n   if l > n or r > n: return\n   if (l == r == n): res.append(s)\n   # \u526a\u679d\uff0c\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\n   if l < r: return\n   # \u52a0\u4e00\u4e2a\u5de6\u62ec\u53f7\n   dfs(l + 1, r, s + '(')\n   # \u52a0\u4e00\u4e2a\u53f3\u62ec\u53f7\n   dfs(l, r + 1, s + ')')\ndfs(0, 0, '')\nreturn res\n"},{language:"py",text:"\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        res = []\n        def dfs(l, r, s):\n            if l > n or r > n: return\n            if (l == r == n): res.append(s)\n            if l < r: return\n            # \u52a0\u4e00\u4e2a\u5de6\u62ec\u53f7\n            dfs(l + 1, r, s + '(')\n            # \u52a0\u4e00\u4e2a\u53f3\u62ec\u53f7\n            dfs(l, r + 1, s + ')')\n        dfs(0, 0, '')\n        return res\n"}]},"merge-k-sorted-lists":{id:"23",name:"merge-k-sorted-lists",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"}],keyPoints:[{text:"\u5206\u6cbb",link:null,color:"blue"},{text:"\u5f52\u5e76\u6392\u5e8f(mergesort)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/23.merge-k-sorted-lists.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/23.merge-k-sorted-lists.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=23 lang=javascript\n *\n * [23] Merge k Sorted Lists\n *\n * https://leetcode.com/problems/merge-k-sorted-lists/description/\n *\n */\nfunction mergeTwoLists(l1, l2) {\n  const dummyHead = {};\n  let current = dummyHead;\n  // l1: 1 -> 3 -> 5\n  // l2: 2 -> 4 -> 6\n  while (l1 !== null && l2 !== null) {\n    if (l1.val < l2.val) {\n      current.next = l1; // \u628a\u5c0f\u7684\u6dfb\u52a0\u5230\u7ed3\u679c\u94fe\u8868\n      current = current.next; // \u79fb\u52a8\u7ed3\u679c\u94fe\u8868\u7684\u6307\u9488\n      l1 = l1.next; // \u79fb\u52a8\u5c0f\u7684\u90a3\u4e2a\u94fe\u8868\u7684\u6307\u9488\n    } else {\n      current.next = l2;\n      current = current.next;\n      l2 = l2.next;\n    }\n  }\n\n  if (l1 === null) {\n    current.next = l2;\n  } else {\n    current.next = l1;\n  }\n  return dummyHead.next;\n}\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (lists) {\n  // \u56fe\u53c2\u8003\uff1a https://zhuanlan.zhihu.com/p/61796021\n  if (lists.length === 0) return null;\n  if (lists.length === 1) return lists[0];\n  if (lists.length === 2) {\n    return mergeTwoLists(lists[0], lists[1]);\n  }\n\n  const mid = lists.length >> 1;\n  const l1 = [];\n  for (let i = 0; i < mid; i++) {\n    l1[i] = lists[i];\n  }\n\n  const l2 = [];\n  for (let i = mid, j = 0; i < lists.length; i++, j++) {\n    l2[j] = lists[i];\n  }\n\n  return mergeTwoLists(mergeKLists(l1), mergeKLists(l2));\n};\n"},{language:"cpp",text:"\nclass Solution {\nprivate:\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\n        ListNode head(0), *tail = &head;\n        while (a && b) {\n            if (a->val < b->val) { tail->next = a; a = a->next; }\n            else { tail->next = b; b = b->next; }\n            tail = tail->next;\n        }\n        tail->next = a ? a : b;\n        return head.next;\n    }\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if (lists.empty()) return NULL;\n        for (int N = lists.size(); N > 1; N = (N + 1) / 2) {\n            for (int i = 0; i < N / 2; ++i) {\n                lists[i] = mergeTwoLists(lists[i], lists[N - 1 - i]);\n            }\n        }\n        return lists[0];\n    }\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        n = len(lists)\n\n        # basic cases\n        if n == 0: return None\n        if n == 1: return lists[0]\n        if n == 2: return self.mergeTwoLists(lists[0], lists[1])\n\n        # divide and conqure if not basic cases\n        mid = n // 2\n        return self.mergeTwoLists(self.mergeKLists(lists[:mid]), self.mergeKLists(lists[mid:n]))\n\n\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        res = ListNode(0)\n        c1, c2, c3 = l1, l2, res\n        while c1 or c2:\n            if c1 and c2:\n                if c1.val < c2.val:\n                    c3.next = ListNode(c1.val)\n                    c1 = c1.next\n                else:\n                    c3.next = ListNode(c2.val)\n                    c2 = c2.next\n                c3 = c3.next\n            elif c1:\n                c3.next = c1\n                break\n            else:\n                c3.next = c2\n                break\n\n        return res.next\n"}]},swapNodesInPairs:{id:"24",name:"swapNodesInPairs",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.dummyHead\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/24.swapNodesInPairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/24.swapNodesInPairs.md",code:[{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function (head) {\n  const dummy = new ListNode(0);\n  dummy.next = head;\n  let current = dummy;\n  while (current.next != null && current.next.next != null) {\n    // \u521d\u59cb\u5316\u53cc\u6307\u9488\n    const first = current.next;\n    const second = current.next.next;\n\n    // \u66f4\u65b0\u53cc\u6307\u9488\u548c current \u6307\u9488\n    first.next = second.next;\n    second.next = first;\n    current.next = second;\n\n    // \u66f4\u65b0\u6307\u9488\n    current = current.next.next;\n  }\n  return dummy.next;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode h, *tail = &h;\n        while (head && head->next) {\n            auto p = head, q = head->next;\n            head = q->next;\n            q->next = p;\n            tail->next = q;\n            tail = p;\n        }\n        tail->next = head;\n        return h.next;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        """\n        \u7528\u9012\u5f52\u5b9e\u73b0\u94fe\u8868\u76f8\u90bb\u4e92\u6362\uff1a\n        \u7b2c\u4e00\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e09\u3001\u7b2c\u56db\u4e2a\u8282\u70b9\u4ea4\u6362\u7684\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff1b\n        \u7b2c\u4e09\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e94\u3001\u7b2c\u516d\u4e2a\u8282\u70b9\u4ea4\u6362\u7684\u7ed3\u679c\uff0c\u7b2c\u56db\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e09\u4e2a\u8282\u70b9\uff1b\n        \u4ee5\u6b64\u7c7b\u63a8\n        :param ListNode head\n        :return ListNode\n        """\n        # \u5982\u679c\u4e3a None \u6216 next \u4e3a None\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if not head or not head.next:\n            return head\n\n        _next = head.next\n        head.next = self.swapPairs(_next.next)\n        _next.next = head\n        return _next\n'}]},"reverse-nodes-in-k-groups-cn":{id:"25",name:"reverse-nodes-in-k-groups-cn",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u5206\u67901.\u521b\u5efa\u4e00\u4e2adummynode2.\u5bf9\u94fe\u8868\u4ee5k\u4e3a\u5355\u4f4d\u8fdb\u884c\u5206\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e00\u7ec4\u7684\u8d77\u59cb\u548c\u6700\u540e\u8282\u70b9\u4f4d\u7f6e3.\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u66f4\u6362\u8d77\u59cb\u548c\u6700\u540e\u7684\u4f4d\u7f6e4.\u8fd4\u56de`dummy.next`.",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups-cn.md",code:[{language:"java",text:"\nclass ReverseKGroupsLinkedList {\n  public ListNode reverseKGroup(ListNode head, int k) {\n      if (head == null || k == 1) {\n        return head;\n      }\n      ListNode dummy = new ListNode(0);\n      dummy.next = head;\n\n      ListNode start = dummy;\n      ListNode end = head;\n      int count = 0;\n      while (end != null) {\n        count++;\n        // group\n        if (count % k == 0) {\n          // reverse linked list (start, end]\n          start = reverse(start, end.next);\n          end = start.next;\n        } else {\n          end = end.next;\n        }\n      }\n      return dummy.next;\n    }\n\n    /**\n     * reverse linked list from range (start, end), return last node.\n     * for example:\n     * 0->1->2->3->4->5->6->7->8\n     * |           |\n     * start       end\n     *\n     * After call start = reverse(start, end)\n     *\n     * 0->3->2->1->4->5->6->7->8\n     *          |  |\n     *       start end\n     *       first\n     *\n     */\n    private ListNode reverse(ListNode start, ListNode end) {\n      ListNode curr = start.next;\n      ListNode prev = start;\n      ListNode first = curr;\n      while (curr != end){\n        ListNode temp = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = temp;\n      }\n      start.next = prev;\n      first.next = curr;\n      return first;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function (head, k) {\n  // \u6807\u5175\n  let dummy = new ListNode();\n  dummy.next = head;\n  let [start, end] = [dummy, dummy.next];\n  let count = 0;\n  while (end) {\n    count++;\n    if (count % k === 0) {\n      start = reverseList(start, end.next);\n      end = start.next;\n    } else {\n      end = end.next;\n    }\n  }\n  return dummy.next;\n\n  // \u7ffb\u8f6cstat -> end\u7684\u94fe\u8868\n  function reverseList(start, end) {\n    let [pre, cur] = [start, start.next];\n    const first = cur;\n    while (cur !== end) {\n      let next = cur.next;\n      cur.next = pre;\n      pre = cur;\n      cur = next;\n    }\n    start.next = pre;\n    first.next = cur;\n    return first;\n  }\n};\n"},{language:"py",text:"\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        if head is None or k < 2:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        start = dummy\n        end = head\n        count = 0\n        while end:\n            count += 1\n            if count % k == 0:\n                start = self.reverse(start, end.next)\n                # end \u8c03\u5230\u4e0b\u4e00\u4e2a\n                end = start.next\n            else:\n                end = end.next\n        return dummy.next\n    # (start, end\uff09 \u5de6\u53f3\u90fd\u5f00\u653e\n\n    def reverse(self, start, end):\n        prev, curr = start, start.next\n        first = curr\n        # \u53cd\u8f6c\n        while curr != end:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        # \u5c06\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u6dfb\u52a0\u5230\u539f\u94fe\u8868\u4e2d\n        start.next = prev\n        first.next = end\n        # \u8fd4\u56de\u53cd\u8f6c\u524d\u7684\u5934\uff0c \u4e5f\u5c31\u662f\u53cd\u8f6c\u540e\u7684\u5c3e\u90e8\n        return first\n\n"},{language:"py",text:"\n\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        if head is None or k < 2:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        count = 0\n        while cur:\n            count += 1\n            if count % k == 0:\n                pre = self.reverse(pre, cur.next)\n                # end \u8c03\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n                cur = pre.next\n            else:\n                cur = cur.next\n        return dummy.next\n    # (p1, p4\uff09 \u5de6\u53f3\u90fd\u5f00\u653e\n\n    def reverse(self, p1, p4):\n        prev, curr = p1, p1.next\n        p2 = curr\n        # \u53cd\u8f6c\n        while curr != p4:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        # \u5c06\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u6dfb\u52a0\u5230\u539f\u94fe\u8868\u4e2d\n        # prev \u76f8\u5f53\u4e8e p3\n        p1.next = prev\n        p2.next = p4\n        # \u8fd4\u56de\u53cd\u8f6c\u524d\u7684\u5934\uff0c \u4e5f\u5c31\u662f\u53cd\u8f6c\u540e\u7684\u5c3e\u90e8\n        return p2\n\n# @lc code=end\n\n"}]},"reverse-nodes-in-k-groups":{id:"25",name:"reverse-nodes-in-k-groups",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u5206\u67901.\u521b\u5efa\u4e00\u4e2adummynode2.\u5bf9\u94fe\u8868\u4ee5k\u4e3a\u5355\u4f4d\u8fdb\u884c\u5206\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e00\u7ec4\u7684\u8d77\u59cb\u548c\u6700\u540e\u8282\u70b9\u4f4d\u7f6e3.\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u66f4\u6362\u8d77\u59cb\u548c\u6700\u540e\u7684\u4f4d\u7f6e4.\u8fd4\u56de`dummy.next`.",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups.md",code:[{language:"java",text:"\nclass ReverseKGroupsLinkedList {\n  public ListNode reverseKGroup(ListNode head, int k) {\n      if (head == null || k == 1) {\n        return head;\n      }\n      ListNode dummy = new ListNode(0);\n      dummy.next = head;\n\n      ListNode start = dummy;\n      ListNode end = head;\n      int count = 0;\n      while (end != null) {\n        count++;\n        // group\n        if (count % k == 0) {\n          // reverse linked list (start, end]\n          start = reverse(start, end.next);\n          end = start.next;\n        } else {\n          end = end.next;\n        }\n      }\n      return dummy.next;\n    }\n\n    /**\n     * reverse linked list from range (start, end), return last node.\n     * for example:\n     * 0->1->2->3->4->5->6->7->8\n     * |           |\n     * start       end\n     *\n     * After call start = reverse(start, end)\n     *\n     * 0->3->2->1->4->5->6->7->8\n     *          |  |\n     *       start end\n     *       first\n     *\n     */\n    private ListNode reverse(ListNode start, ListNode end) {\n      ListNode curr = start.next;\n      ListNode prev = start;\n      ListNode first = curr;\n      while (curr != end){\n        ListNode temp = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = temp;\n      }\n      start.next = prev;\n      first.next = curr;\n      return first;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function (head, k) {\n  // \u6807\u5175\n  let dummy = new ListNode();\n  dummy.next = head;\n  let [start, end] = [dummy, dummy.next];\n  let count = 0;\n  while (end) {\n    count++;\n    if (count % k === 0) {\n      start = reverseList(start, end.next);\n      end = start.next;\n    } else {\n      end = end.next;\n    }\n  }\n  return dummy.next;\n\n  // \u7ffb\u8f6cstat -> end\u7684\u94fe\u8868\n  function reverseList(start, end) {\n    let [pre, cur] = [start, start.next];\n    const first = cur;\n    while (cur !== end) {\n      let next = cur.next;\n      cur.next = pre;\n      pre = cur;\n      cur = next;\n    }\n    start.next = pre;\n    first.next = cur;\n    return first;\n  }\n};\n"},{language:"py",text:"\nclass Solution:\n    # \u7ffb\u8f6c\u4e00\u4e2a\u5b50\u94fe\u8868\uff0c\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5934\u4e0e\u5c3e\n    def reverse(self, head: ListNode, tail: ListNode, terminal):\n        cur = head\n        pre = None\n        while cur != terminal:\n            next = cur.next\n            cur.next = pre\n\n            pre = cur\n            cur = next\n        return tail, head\n\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        ans = ListNode()\n        ans.next = head\n        pre = ans\n\n        while head:\n            tail = pre\n            # \u67e5\u770b\u5269\u4f59\u90e8\u5206\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e k\n            for i in range(k):\n                tail = tail.next\n                if not tail:\n                    return ans.next\n            next = tail.next\n            head, tail = self.reverse(head, tail, tail.next)\n            # \u628a\u5b50\u94fe\u8868\u91cd\u65b0\u63a5\u56de\u539f\u94fe\u8868\n            pre.next = head\n            tail.next = next\n            pre = tail\n            head = next\n\n        return ans.next\n\n"},{language:"py",text:"\n\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        if head is None or k < 2:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        count = 0\n        while cur:\n            count += 1\n            if count % k == 0:\n                pre = self.reverse(pre, cur.next)\n                # end \u8c03\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n                cur = pre.next\n            else:\n                cur = cur.next\n        return dummy.next\n    # (p1, p4\uff09 \u5de6\u53f3\u90fd\u5f00\u653e\n\n    def reverse(self, p1, p4):\n        prev, curr = p1, p1.next\n        p2 = curr\n        # \u53cd\u8f6c\n        while curr != p4:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        # \u5c06\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u6dfb\u52a0\u5230\u539f\u94fe\u8868\u4e2d\n        # prev \u76f8\u5f53\u4e8e p3\n        p1.next = prev\n        p2.next = p4\n        # \u8fd4\u56de\u53cd\u8f6c\u524d\u7684\u5934\uff0c \u4e5f\u5c31\u662f\u53cd\u8f6c\u540e\u7684\u5c3e\u90e8\n        return p2\n\n# @lc code=end\n\n"}]},"remove-duplicates-from-sorted-array":{id:"26",name:"remove-duplicates-from-sorted-array",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488\u8fd9\u9053\u9898\u5982\u679c\u4e0d\u8981\u6c42\uff0cO(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0cO(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u4f1a\u5f88\u7b80\u5355\u3002\u4f46\u662f\u8fd9\u9053\u9898\u662f\u8981\u6c42\u7684\uff0c\u8fd9\u79cd\u9898\u7684\u601d\u8def\u4e00\u822c\u90fd\u662f\u91c7\u7528\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5982\u679c\u662f\u6570\u636e\u662f\u65e0\u5e8f\u7684\uff0c\u5c31\u4e0d\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u4e86\uff0c\u4ece\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u770b\u51fa\u6392\u5e8f\u5728\u7b97\u6cd5\u4e2d\u7684\u57fa\u7840\u6027\u548c\u91cd\u8981\u6027\u3002",link:null,color:"blue"},{text:"\u6ce8\u610fnums\u4e3a\u7a7a\u65f6\u7684\u8fb9\u754c\u6761\u4ef6\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function (nums) {\n  const size = nums.length;\n  if (size == 0) return 0;\n  let slowP = 0;\n  for (let fastP = 0; fastP < size; fastP++) {\n    if (nums[fastP] !== nums[slowP]) {\n      slowP++;\n      nums[slowP] = nums[fastP];\n    }\n  }\n  return slowP + 1;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.empty()) return 0;\n        int fast,slow;\n        fast=slow=0;\n        while(fast!=nums.size()){\n            if(nums[fast]==nums[slow]) fast++;\n            else {\n                slow++;\n                nums[slow]=nums[fast];\n                fast++;\n            }\n        }\n        return slow+1;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        if nums:\n            slow = 0\n            for fast in range(1, len(nums)):\n                if nums[fast] != nums[slow]:\n                    slow += 1\n                    nums[slow] = nums[fast]\n            return slow + 1\n        else:\n            return 0\n"}]},"divide-two-integers":{id:"29",name:"divide-two-integers",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"[\u4e8c\u5206\u67e5\u627e](../91/binary",link:null,color:"blue"},{text:"search.md)",link:null,color:"blue"},{text:"\u6b63\u8d1f\u6570\u7684\u5224\u65ad\u4e2d\uff0c\u8fd9\u6837\u5224\u65ad\u66f4\u7b80\u5355\u3002```jsconstisNegative=dividend>0!==divisor>0;```\u6216\u8005\u5229\u7528\u5f02\u6216\uff1a```jsconstisNegative=dividend^(divisor<0);```",link:null,color:"blue"}],companies:[{name:"Facebook"},{name:"Microsoft"},{name:"Oracle"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/29.divide-two-integers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/29.divide-two-integers.md",code:[{language:"js",text:"\nlet acc = divisor;\nlet count = 0;\n\nwhile (dividend - acc >= 0) {\n  acc += divisor;\n  count++;\n}\n\nreturn count;\n"},{language:"js",text:"\nconst isNegative = dividend > 0 !== divisor > 0;\n"},{language:"js",text:"\nconst isNegative = dividend ^ (divisor < 0);\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=29 lang=javascript\n *\n * [29] Divide Two Integers\n */\n/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function (dividend, divisor) {\n  if (divisor === 1) return dividend;\n\n  // \u8fd9\u79cd\u65b9\u6cd5\u5f88\u5de7\u5999\uff0c\u5373\u7b26\u53f7\u76f8\u540c\u5219\u4e3a\u6b63\uff0c\u4e0d\u540c\u5219\u4e3a\u8d1f\n  const isNegative = dividend > 0 !== divisor > 0;\n\n  const MAX_INTERGER = Math.pow(2, 31);\n\n  const res = helper(Math.abs(dividend), Math.abs(divisor));\n\n  // overflow\n  if (res > MAX_INTERGER - 1 || res < -1 * MAX_INTERGER) {\n    return MAX_INTERGER - 1;\n  }\n\n  return isNegative ? -1 * res : res;\n};\n\nfunction helper(dividend, divisor) {\n  // \u4e8c\u5206\u6cd5\n  if (dividend <= 0) return 0;\n  if (dividend < divisor) return 0;\n  if (divisor === 1) return dividend;\n\n  let acc = 2 * divisor;\n  let count = 1;\n\n  while (dividend - acc > 0) {\n    acc += acc;\n    count += count;\n  }\n  // \u76f4\u63a5\u4f7f\u7528\u4f4d\u79fb\u8fd0\u7b97\uff0c\u6bd4\u5982acc >> 1\u4f1a\u6709\u95ee\u9898\n  const last = dividend - Math.floor(acc / 2);\n\n  return count + helper(last, divisor);\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        if (!divisor) return 0;  // divide-by-zero error\n        bool pos1 = dividend > 0, pos2 = divisor > 0, pos = !(pos1^pos2);\n        if (pos1) dividend = -dividend;\n        if (pos2) divisor = -divisor;\n        int q = 0, d = divisor, t = 1;\n        while (t > 0 && dividend < 0) {\n            if (dividend - d <= 0) {\n                dividend -= d;\n                q -= t;\n                if ((INT_MIN >> 1) < d) {\n                    t <<= 1;\n                    d <<= 1;\n                }\n            } else {\n                d >>= 1;\n                t >>= 1;\n            }\n        }\n        return pos? -q : q;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        """\n        \u4e8c\u5206\u6cd5\n        :param int divisor\n        :param int dividend\n        :return int\n        """\n        # \u9519\u8bef\u5904\u7406\n        if divisor == 0:\n            raise ZeroDivisionError\n        if abs(divisor) == 1:\n            result = dividend if 1 == divisor else -dividend\n            return min(2**31-1, max(-2**31, result))\n\n        # \u786e\u5b9a\u7ed3\u679c\u7684\u7b26\u53f7\n        sign = ((dividend >= 0) == (divisor >= 0))\n\n        result = 0\n        # abs\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u5728while\u6761\u4ef6\u4e2d\uff0c\u4e0d\u8fc7\u53ef\u80fd\u4f1a\u591a\u8ba1\u7b97\u51e0\u6b21\n        _divisor = abs(divisor)\n        _dividend = abs(dividend)\n\n        while _divisor <= _dividend:\n            r, _dividend = self._multi_divide(_divisor, _dividend)\n            result += r\n\n        result = result if sign else -result\n\n        # \u6ce8\u610f\u8fd4\u56de\u503c\u4e0d\u80fd\u8d85\u8fc732\u4f4d\u6709\u7b26\u53f7\u6570\u7684\u8868\u793a\u8303\u56f4\n        return min(2**31-1, max(-2**31, result))\n\n    def _multi_divide(self, divisor, dividend):\n        """\n        \u7ffb\u500d\u9664\u6cd5\uff0c\u5982\u679c\u53ef\u4ee5\u88ab\u9664\uff0c\u5219\u4e0b\u4e00\u6b65\u9664\u6570\u7ffb\u500d\uff0c\u76f4\u81f3\u9664\u6570\u5927\u4e8e\u88ab\u9664\u6570\uff0c\n        \u8fd4\u56de\u5546\u52a0\u603b\u7684\u7ed3\u679c\u4e0e\u88ab\u9664\u6570\u7684\u5269\u4f59\u503c\uff1b\n        \u8fd9\u91cc\u5c31\u4e0d\u505a\u5f02\u5e38\u5904\u7406\u4e86\uff1b\n        :param int divisor\n        :param int dividend\n        :return tuple result, left_dividend\n        """\n        result = 0\n        times_count = 1\n        while divisor <= dividend:\n            dividend -= divisor\n            result += times_count\n            times_count += times_count\n            divisor += divisor\n        return result, dividend\n'}]},"substring-with-concatenation-of-all-words":{id:"30",name:"substring-with-concatenation-of-all-words",pre:[{text:"\u5b57\u7b26\u4e32",link:null,color:"green"},{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"Counter",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md",code:[{language:"cpp",text:"\n\nclass Solution {\nprivate:\n    int len, n;\n    string s;\n    bool rec(int i, unordered_map<string, int> &m, int cnt) {\n        if (cnt == n) return true;\n        int &v = m[s.substr(i, len)];\n        if (v) {\n            v--;\n            bool ret = rec(i + len, m, cnt + 1);\n            v++;\n            return ret;\n        }\n        return false;\n    }\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        if (words.empty()) return {};\n        this->s = s;\n        len = words[0].size();\n        n = words.size();\n        unordered_map<string, int> m;\n        for (string word : words) ++m[word];\n        int end = s.size() - n * len;\n        vector<int> v;\n        for (int i = 0; i <= end; ++i) {\n            if (rec(i, m, 0)) v.push_back(i);\n        }\n        return v;\n    }\n};\n"},{language:"py",text:"\nfrom collections import Counter\n\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        res = []\n        n = len(words)\n        word_len = len(words[0])\n        window_len = word_len * n\n        target = Counter(words)\n        i = 0\n        while i < len(s) - window_len + 1:\n            sliced = []\n            start = i\n            for _ in range(n):\n                sliced.append(s[start:start + word_len])\n                start += word_len\n            if Counter(sliced) == target:\n                res.append(i)\n            i += 1\n        return res\n"}]},"next-permutation":{id:"31",name:"next-permutation",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u5199\u51e0\u4e2a\u4f8b\u5b50\u901a\u5e38\u4f1a\u5e2e\u52a9\u7406\u89e3\u95ee\u9898\u7684\u89c4\u5f8b",link:null,color:"blue"},{text:"\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u9996\u5c3e\u6307\u9488\u4e0d\u65ad\u4ea4\u6362\u4f4d\u7f6e\u5373\u53ef\u5b9e\u73b0reverse",link:null,color:"blue"},{text:"\u627e\u5230\u4ece\u53f3\u8fb9\u8d77`\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684`\uff0c\u5e76\u5c06\u5176\u548cnums[i]\u8fdb\u884c\u4ea4\u6362",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/31.next-permutation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/31.next-permutation.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=31 lang=javascript\n *\n * [31] Next Permutation\n */\n\nfunction reverseRange(A, i, j) {\n  while (i < j) {\n    const temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n    i++;\n    j--;\n  }\n}\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function (nums) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n) \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n  if (nums == null || nums.length <= 1) return;\n\n  let i = nums.length - 2;\n  // \u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u964d\u5e8f\u7684,\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u6211\u4eec\u7684\u56de\u6eaf\u70b9\n  while (i > -1 && nums[i + 1] <= nums[i]) i--;\n\n  // \u5982\u679c\u627e\u4e86\u5c31swap\n  if (i > -1) {\n    let j = nums.length - 1;\n    // \u627e\u5230\u4ece\u53f3\u8fb9\u8d77\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684\uff0c\u5e76\u5c06\u5176\u548cnums[i]\u8fdb\u884c\u4ea4\u6362\n    // \u56e0\u4e3a\u5982\u679c\u4ea4\u6362\u7684\u6570\u5b57\u6bd4nums[i]\u8fd8\u8981\u5c0f\u80af\u5b9a\u4e0d\u7b26\u5408\u9898\u610f\n    while (nums[j] <= nums[i]) j--;\n    const temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n  }\n\n  // \u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5269\u4e0b\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\uff0c\u4f9d\u6b21\u586b\u5165\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u5927\u4e8e\u5f53\u524d\u6392\u5217\u7684\u6700\u5c0f\u503c\u4e86\n  // [i + 1, A.length -1]\u7684\u5143\u7d20\u8fdb\u884c\u53cd\u8f6c\n\n  reverseRange(nums, i + 1, nums.length - 1);\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n  void nextPermutation(vector<int>& nums) {\n    int i = nums.size() - 2, j = nums.size() - 1;\n    while (i >= 0 && nums[i] >= nums[i + 1]) --i;\n    if (i >= 0) {\n      while (j > i && nums[j] <= nums[i]) --j;\n      swap(nums[i], nums[j]);\n    }\n    reverse(nums.begin() + i + 1, nums.end());\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def nextPermutation(self, nums):\n        """\n        Do not return anything, modify nums in-place instead.\n        :param list nums\n        """\n        # \u7b2c\u4e00\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u4e0b\u964d\u70b9\n        down_index = None\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                down_index = i\n                break\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u964d\u70b9\uff0c\u91cd\u65b0\u6392\u5217\n        if down_index is None:\n            nums.reverse()\n        # \u5982\u679c\u6709\u4e0b\u964d\u70b9\n        else:\n            # \u7b2c\u4e8c\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u6bd4\u4e0b\u964d\u70b9\u5927\u7684\u6570\uff0c\u5bf9\u6362\u4f4d\u7f6e\n            for i in range(len(nums)-1, i, -1):\n                if nums[down_index] < nums[i]:\n                    nums[down_index], nums[i] = nums[i], nums[down_index]\n                    break\n            # \u7b2c\u4e09\u90e8\uff0c\u91cd\u65b0\u6392\u5217\u4e0b\u964d\u70b9\u4e4b\u540e\u7684\u6570\n            i, j = down_index+1, len(nums)-1\n            while i < j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n'}]},"longest-valid-parentheses":{id:"32",name:"longest-valid-parentheses",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u89e3\u67901.\u7b2c3\u70b9\u7279\u5f81,\u9700\u8981\u68c0\u67e5\u7684\u5b57\u7b26\u662fs[i",link:null,color:"blue"},{text:"1]\u548cs[i",link:null,color:"blue"},{text:"2",link:null,color:"blue"},{text:"dp[i",link:null,color:"blue"},{text:"1]],\u6839\u636e\u5b9a\u4e49\u53ef\u77e5:i",link:null,color:"blue"},{text:"1>=dp[i",link:null,color:"blue"},{text:"1],\u4f46\u662fi",link:null,color:"blue"},{text:"2\u4e0d\u4e00\u5b9a\u5927\u4e8edp[i",link:null,color:"blue"},{text:"1],\u56e0\u6b64,\u9700\u8981\u68c0\u67e5\u8d8a\u754c;2.\u7b2c4\u70b9\u7279\u5f81\u6700\u5bb9\u6613\u9057\u6f0f,\u8fd8\u6709\u5c31\u662f\u4e0d\u9700\u8981\u68c0\u67e5\u8d8a\u754c,\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u53ef\u77e5:i>=dp[i],\u6240\u4ee5dp[i",link:null,color:"blue"},{text:"dp[i]]\u7684\u8fb9\u754c\u60c5\u51b5\u662fdp[0];",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/32.longest-valid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/32.longest-valid-parentheses.md",code:[{language:"java",text:"\npublic class Solution {\n    public int longestValidParentheses(String s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, left + right);\n            }\n            if (right > left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, left + right);\n            }\n            if (left > right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n}\n"},{language:"js",text:'\n// \u7528\u6808\u6765\u89e3\nvar longestValidParentheses = function (s) {\n  let stack = new Array();\n  let longest = 0;\n  stack.push(-1);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === "(") {\n      stack.push(i);\n    } else {\n      stack.pop();\n      if (stack.length === 0) {\n        stack.push(i);\n      } else {\n        longest = Math.max(longest, i - stack[stack.length - 1]);\n      }\n    }\n  }\n  return longest;\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        stack<int> st;\n        st.push(-1);\n        int ans = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == ')' && st.top() != -1 && s[st.top()] == '(') {\n                st.pop();\n                ans = max(ans, i - st.top());\n            } else st.push(i);\n        }\n        return ans;\n    }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int left = 0, right = 0, ans = 0, N = s.size();\n        for (int i = 0; i < N; ++i) {\n            left += s[i] == '(';\n            right += s[i] == ')';\n            if (left == right) ans = max(ans, left + right);\n            else if (right > left) left = right = 0;\n        }\n        left = 0, right = 0;\n        for (int i = N - 1; i >= 0; --i) {\n            left += s[i] == '(';\n            right += s[i] == ')';\n            if (left == right) ans = max(ans, left + right);\n            else if (left > right) left = right = 0;\n        }\n        return ans;\n    }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        vector<int> dp(s.size() + 1, 0);\n        int ans = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == '(') continue;\n            int start = i - dp[i] - 1;\n            if (start >= 0 && s[start] == '(')\n                dp[i + 1] = dp[i] + 2 + dp[start];\n            ans = max(ans, dp[i + 1]);\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        ans = 0\n\n        def validCnt(start):\n            # cnt \u4e3a ) \u7684\u6570\u91cf\u51cf\u53bb ( \u7684\u6570\u91cf\n            cnt = 0\n            ans = 0\n            for i in range(start, n):\n                if s[i] == '(':\n                    cnt += 1\n                if s[i] == ')':\n                    cnt -= 1\n                if cnt < 0:\n                    return i - start\n                if cnt == 0:\n                    ans = max(ans, i - start + 1)\n            return ans\n        for i in range(n):\n            ans = max(ans, validCnt(i))\n\n        return ans\n"},{language:"py",text:'\n\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        if not s:\n            return 0\n        res = 0\n        stack = [-1]\n        for i in range(len(s)):\n            if s[i] == "(":\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    res = max(res, i - stack[-1])\n        return res\n'},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        ans = l = r = 0\n        for c in s:\n            if c == '(':\n                l += 1\n            else:\n                r += 1\n            if l == r:\n                ans = max(ans, l + r)\n            if r > l:\n                l = r = 0\n        l = r = 0\n        for c in s[::-1]:\n            if c == '(':\n                l += 1\n            else:\n                r += 1\n            if l == r:\n                ans = max(ans, l + r)\n            if r < l:\n                l = r = 0\n\n        return ans\n"},{language:"py",text:"\ns = '(())())'\n"},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        mlen = 0\n        slen = len(s)\n        dp = [0] * (slen + 1)\n        for i in range(1, len(s) + 1):\n            # \u6709\u6548\u7684\u62ec\u53f7\u5bf9\u4e0d\u53ef\u80fd\u4f1a\u4ee5'('\u7ed3\u5c3e\u7684\n            if s[i - 1] == '(':\n                continue\n\n            left_paren = i - 2 - dp[i - 1]\n            if left_paren >= 0 and s[left_paren] == '(':\n                dp[i] = dp[i - 1] + 2\n\n                # \u62fc\u63a5\u6709\u6548\u62ec\u53f7\u5bf9\n                if dp[i - dp[i]]:\n                    dp[i] += dp[i - dp[i]]\n\n                # \u66f4\u65b0\u6700\u5927\u6709\u6548\u6269\u5bf9\u957f\u5ea6\n                if dp[i] > mlen:\n                    mlen = dp[i]\n\n        return mlen\n"}]},"search-in-rotated-sorted-array":{id:"33",name:"search-in-rotated-sorted-array",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"[\u4e8c\u5206\u6cd5](../91/binary",link:null,color:"blue"},{text:"search.md)",link:null,color:"blue"},{text:"\u627e\u51fa\u6709\u5e8f\u533a\u95f4\uff0c\u7136\u540e\u6839\u636etarget\u662f\u5426\u5728\u6709\u5e8f\u533a\u95f4\u820d\u5f03\u4e00\u534a\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=33 lang=javascript\n *\n * [33] Search in Rotated Sorted Array\n */\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n  // \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n  // [6,7,8,1,2,3,4,5]\n  let start = 0;\n  let end = nums.length - 1;\n\n  while (start <= end) {\n    const mid = start + ((end - start) >> 1);\n    if (nums[mid] === target) return mid;\n\n    // [start, mid]\u6709\u5e8f\n\n    // \ufe0f\u26a0\ufe0f\u6ce8\u610f\u8fd9\u91cc\u7684\u7b49\u53f7\n    if (nums[mid] >= nums[start]) {\n      //target \u5728 [start, mid] \u4e4b\u95f4\n\n      // \u5176\u5b9etarget\u4e0d\u53ef\u80fd\u7b49\u4e8enums[mid]\uff0c \u4f46\u662f\u4e3a\u4e86\u5bf9\u79f0\uff0c\u6211\u8fd8\u662f\u52a0\u4e0a\u4e86\u7b49\u53f7\n      if (target >= nums[start] && target <= nums[mid]) {\n        end = mid - 1;\n      } else {\n        //target \u4e0d\u5728 [start, mid] \u4e4b\u95f4\n        start = mid + 1;\n      }\n    } else {\n      // [mid, end]\u6709\u5e8f\n\n      // target \u5728 [mid, end] \u4e4b\u95f4\n      if (target >= nums[mid] && target <= nums[end]) {\n        start = mid + 1;\n      } else {\n        // target \u4e0d\u5728 [mid, end] \u4e4b\u95f4\n        end = mid - 1;\n      }\n    }\n  }\n\n  return -1;\n};\n"},{language:"py",text:'\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        """\u7528\u4e8c\u5206\u6cd5\uff0c\u5148\u5224\u65ad\u5de6\u53f3\u4e24\u8fb9\u54ea\u4e00\u8fb9\u662f\u6709\u5e8f\u7684\uff0c\u518d\u5224\u65ad\u662f\u5426\u5728\u6709\u5e8f\u7684\u5217\u8868\u4e4b\u5185"""\n        if len(nums) <= 0:\n            return -1\n\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (right - left) // 2 + left\n            if nums[mid] == target:\n                return mid\n\n            # \u5982\u679c\u4e2d\u95f4\u7684\u503c\u5927\u4e8e\u6700\u5de6\u8fb9\u7684\u503c\uff0c\u8bf4\u660e\u5de6\u8fb9\u6709\u5e8f\n            if nums[mid] > nums[left]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid\n                else:\n                    # \u8fd9\u91cc +1\uff0c\u56e0\u4e3a\u4e0a\u9762\u662f <= \u7b26\u53f7\n                    left = mid + 1\n            # \u5426\u5219\u53f3\u8fb9\u6709\u5e8f\n            else:\n                # \u6ce8\u610f\uff1a\u8fd9\u91cc\u5fc5\u987b\u662f mid+1\uff0c\u56e0\u4e3a\u6839\u636e\u6211\u4eec\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0cmid\u5c5e\u4e8e\u5de6\u8fb9\u7684\u5e8f\u5217\n                if nums[mid+1] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid\n\n        return left if nums[left] == target else -1\n'}]},"combination-sum":{id:"39",name:"combination-sum",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/39.combination-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/39.combination-sum.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums, remain, start) {\n  if (remain < 0) return;\n  else if (remain === 0) return list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, remain - nums[i], i); // \u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c i + 1\u4ee3\u8868\u4e0d\u53ef\u4ee5\u91cd\u590d\u5229\u7528\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function (candidates, target) {\n  const list = [];\n  backtrack(\n    list,\n    [],\n    candidates.sort((a, b) => a - b),\n    target,\n    0\n  );\n  return list;\n};\n"},{language:"cpp",text:"\nclass Solution {\nprivate:\n    vector<vector<int>> res;\n    void dfs(vector<int> &c, int t, int start, vector<int> &v) {\n        if (!t) {\n            res.push_back(v);\n            return;\n        }\n        for (int i = start; i < c.size() && t >= c[i]; ++i) {\n            v.push_back(c[i]);\n            dfs(c, t - c[i], i, v);\n            v.pop_back();\n        }\n    }\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<int> v;\n        dfs(candidates, target, 0, v);\n        return res;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        """\n        \u56de\u6eaf\u6cd5\uff0c\u5c42\u5c42\u9012\u51cf\uff0c\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u5c31\u52a0\u5165\u7ed3\u679c\u96c6\u4e2d\uff0c\u8d85\u51fa\u5219\u526a\u679d\uff1b\n        \u4e3b\u8981\u662f\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\u907f\u514d\u91cd\u590d\u7b49\uff1b\n        """\n        size = len(candidates)\n        if size <= 0:\n            return []\n\n        # \u5148\u6392\u5e8f\uff0c\u4fbf\u4e8e\u540e\u9762\u526a\u679d\n        candidates.sort()\n\n        path = []\n        res = []\n        self._find_path(target, path, res, candidates, 0, size)\n\n        return res\n\n    def _find_path(self, target, path, res, candidates, begin, size):\n        """\u6cbf\u7740\u8def\u5f84\u5f80\u4e0b\u8d70"""\n        if target == 0:\n            res.append(path.copy())\n        else:\n            for i in range(begin, size):\n                left_num = target - candidates[i]\n                # \u5982\u679c\u5269\u4f59\u503c\u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u8d85\u8fc7\u4e86\uff0c\u526a\u679d\n                if left_num < 0:\n                    break\n                # \u5426\u5219\u628a\u5f53\u524d\u503c\u52a0\u5165\u8def\u5f84\n                path.append(candidates[i])\n                # \u4e3a\u907f\u514d\u91cd\u590d\u89e3\uff0c\u6211\u4eec\u628a\u6bd4\u5f53\u524d\u503c\u5c0f\u7684\u53c2\u6570\u4e5f\u4ece\u4e0b\u4e00\u6b21\u5bfb\u627e\u4e2d\u5254\u9664\uff0c\n                # \u56e0\u4e3a\u6839\u636e\u4ed6\u4eec\u5f97\u51fa\u7684\u89e3\u4e00\u5b9a\u5728\u4e4b\u524d\u5c31\u627e\u5230\u8fc7\u4e86\n                self._find_path(left_num, path, res, candidates, i, size)\n                # \u8bb0\u5f97\u628a\u5f53\u524d\u503c\u79fb\u51fa\u8def\u5f84\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u503c\u7684\u8def\u5f84\n                path.pop()\n'}]},"combination-sum-ii":{id:"40",name:"combination-sum-ii",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/40.combination-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/40.combination-sum-ii.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums, remain, start) {\n  if (remain < 0) return;\n  else if (remain === 0) return list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    // \u548c39.combination-sum \u7684\u5176\u4e2d\u4e00\u4e2a\u533a\u522b\u5c31\u662f\u8fd9\u9053\u9898candidates\u53ef\u80fd\u6709\u91cd\u590d\n    // \u4ee3\u7801\u8868\u793a\u5c31\u662f\u4e0b\u9762\u8fd9\u4e00\u884c\u3002\u6ce8\u610f i > start \u8fd9\u4e00\u6761\u4ef6\n    if (i > start && nums[i] == nums[i - 1]) continue; // skip duplicates\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, remain - nums[i], i + 1); // i + 1\u4ee3\u8868\u4e0d\u53ef\u4ee5\u91cd\u590d\u5229\u7528\uff0c i \u4ee3\u8868\u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  const list = [];\n  backtrack(\n    list,\n    [],\n    candidates.sort((a, b) => a - b),\n    target,\n    0\n  );\n  return list;\n};\n"},{language:"cpp",text:"\nclass Solution {\n    vector<vector<int>> ans;\n    void backtrack(vector<int> &A, int target, int start, vector<int> &path) {\n        if (!target) {\n            ans.push_back(path);\n            return;\n        }\n        for (int i = start; i < A.size() && target >= A[i]; ++i) {\n            if (i != start && A[i] == A[i - 1]) continue;\n            path.push_back(A[i]);\n            dfs(A, target - A[i], i + 1, path);\n            path.pop_back();\n        }\n    }\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& A, int target) {\n        sort(A.begin(), A.end());\n        vector<int> path;\n        backtrack(A, target, 0, path);\n        return ans;\n    }\n};\n"},{language:"py",text:"\n if target == 0:\n    res.append(path.copy())\nelse:\n    for i in range(begin, size):\n        left_num = target - candidates[i]\n        if left_num < 0:\n            break\n        path.append(candidates[i])\n        self._find_path(candidates, path, res, left_num, i+1, size)\n        path.pop()\n"},{language:"py",text:"\n\n if target == 0:\n    res.append(path.copy())\nelse:\n    for i in range(begin, size):\n        # \u589e\u52a0\u4e0b\u9762\u4e00\u884c\u4ee3\u7801\n        if i > begin and candidates[i] == candidate[i - 1]: continue\n        left_num = target - candidates[i]\n        if left_num < 0:\n            break\n        path.append(candidates[i])\n        self._find_path(candidates, path, res, left_num, i+1, size)\n        path.pop()\n"},{language:"py",text:'\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        """\n        \u4e0e39\u9898\u7684\u533a\u522b\u662f\u4e0d\u80fd\u91cd\u7528\u5143\u7d20\uff0c\u800c\u5143\u7d20\u53ef\u80fd\u6709\u91cd\u590d\uff1b\n        \u4e0d\u80fd\u91cd\u7528\u597d\u89e3\u51b3\uff0c\u56de\u6eaf\u7684index\u5f80\u4e0b\u4e00\u4e2a\u5c31\u884c\uff1b\n        \u5143\u7d20\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u5c31\u8ba9\u7ed3\u679c\u7684\u53bb\u91cd\u9ebb\u70e6\u4e00\u4e9b\uff1b\n        """\n        size = len(candidates)\n        if size == 0:\n            return []\n\n        # \u8fd8\u662f\u5148\u6392\u5e8f\uff0c\u4e3b\u8981\u662f\u65b9\u4fbf\u53bb\u91cd\n        candidates.sort()\n\n        path = []\n        res = []\n        self._find_path(candidates, path, res, target, 0, size)\n\n        return res\n\n    def _find_path(self, candidates, path, res, target, begin, size):\n        if target == 0:\n            res.append(path.copy())\n        else:\n            for i in range(begin, size):\n                left_num = target - candidates[i]\n                if left_num < 0:\n                    break\n                # \u5982\u679c\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\uff0c\u524d\u4e00\u4e2a\u5143\u7d20\u5df2\u7ecf\u904d\u5386\u4e86\u540e\u4e00\u4e2a\u5143\u7d20\u4e0e\u4e4b\u540e\u5143\u7d20\u7ec4\u5408\u7684\u6240\u6709\u53ef\u80fd\n                if i > begin and candidates[i] == candidates[i-1]:\n                    continue\n                path.append(candidates[i])\n                # \u5f00\u59cb\u7684 index \u5f80\u540e\u79fb\u4e86\u4e00\u683c\n                self._find_path(candidates, path, res, left_num, i+1, size)\n                path.pop()\n'}]},"trapping-rain-water":{id:"42",name:"trapping-rain-water",pre:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"geekblue"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[{text:"\u5efa\u6a21`h[i]=Math.min(\u5de6\u8fb9\u67f1\u5b50\u6700\u5927\u503c,\u53f3\u8fb9\u67f1\u5b50\u6700\u5927\u503c)`(h\u4e3a\u4e0b\u96e8\u4e4b\u540e\u7684\u6c34\u4f4d)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/42.trapping-rain-water.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/42.trapping-rain-water.md",code:[{language:"js",text:"\nfor (let i = 0; i < height.length; i++) {\n  area += (h[i] - height[i]) * 1; // h\u4e3a\u4e0b\u96e8\u4e4b\u540e\u7684\u6c34\u4f4d\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=42 lang=javascript\n *\n * [42] Trapping Rain Water\n *\n */\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function (height) {\n  let max = 0;\n  let volume = 0;\n  const leftMax = [];\n  const rightMax = [];\n\n  for (let i = 0; i < height.length; i++) {\n    leftMax[i] = max = Math.max(height[i], max);\n  }\n\n  max = 0;\n\n  for (let i = height.length - 1; i >= 0; i--) {\n    rightMax[i] = max = Math.max(height[i], max);\n  }\n\n  for (let i = 0; i < height.length; i++) {\n    volume = volume + Math.min(leftMax[i], rightMax[i]) - height[i];\n  }\n\n  return volume;\n};\n"},{language:"cpp",text:"\nint trap(vector<int>& heights)\n{\n\tif(heights == null)\n\t\treturn 0;\n    int ans = 0;\n    int size = heights.size();\n    vector<int> left_max(size), right_max(size);\n    left_max[0] = heights[0];\n    for (int i = 1; i < size; i++) {\n        left_max[i] = max(heights[i], left_max[i - 1]);\n    }\n    right_max[size - 1] = heights[size - 1];\n    for (int i = size - 2; i >= 0; i--) {\n        right_max[i] = max(heights[i], right_max[i + 1]);\n    }\n    for (int i = 1; i < size - 1; i++) {\n        ans += min(left_max[i], right_max[i]) - heights[i];\n    }\n    return ans;\n}\n\n"},{language:"cpp",text:"\n\nclass Solution {\npublic:\n    int trap(vector<int>& heights)\n{\n    int left = 0, right = heights.size() - 1;\n    int ans = 0;\n    int left_max = 0, right_max = 0;\n    while (left < right) {\n        if (heights[left] < heights[right]) {\n            heights[left] >= left_max ? (left_max = heights[left]) : ans += (left_max - heights[left]);\n            ++left;\n        }\n        else {\n            heights[right] >= right_max ? (right_max = heights[right]) : ans += (right_max - heights[right]);\n            --right;\n        }\n    }\n    return ans;\n}\n\n};\n"},{language:"py",text:"\nclass Solution:\n    def trap(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r = [0] * n, [0] * n\n        ans = 0\n        for i in range(1, len(heights)):\n            l[i] = max(l[i - 1], heights[i - 1])\n        for i in range(len(heights) - 2, 0, -1):\n            r[i] = max(r[i + 1], heights[i + 1])\n        for i in range(len(heights)):\n            ans += max(0, min(l[i], r[i]) - heights[i])\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def trap(self, heights: List[int]) -> int:\n        n = len(heights)\n        l_max = r_max = 0\n        l, r = 0, n - 1\n        ans = 0\n        while l < r:\n            if heights[l] < heights[r]:\n                if heights[l] < l_max:\n                    ans += l_max - heights[l]\n                else:\n                    l_max = heights[l]\n                l += 1\n            else:\n                if heights[r] < r_max:\n                    ans += r_max - heights[r]\n                else:\n                    r_max = heights[r]\n                r -= 1\n        return ans\n"}]},permutations:{id:"46",name:"permutations",pre:[{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/46.permutations.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums) {\n  if (tempList.length === nums.length) return list.push([...tempList]);\n  for (let i = 0; i < nums.length; i++) {\n    if (tempList.includes(nums[i])) continue;\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function (nums) {\n  const list = [];\n  backtrack(list, [], nums);\n  return list;\n};\n"},{language:"cpp",text:"\nclass Solution {\n    vector<vector<int>> ans;\n    void dfs(vector<int> &nums, int start) {\n        if (start == nums.size() - 1) {\n            ans.push_back(nums);\n            return;\n        }\n        for (int i = start; i < nums.size(); ++i) {\n            swap(nums[i], nums[start]);\n            dfs(nums, start + 1);\n            swap(nums[i], nums[start]);\n        }\n    }\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        dfs(nums, 0);\n        return ans;\n    }\n};\n"}]},"permutations-ii":{id:"47",name:"permutations-ii",pre:[{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/47.permutations-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/47.permutations-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=47 lang=javascript\n *\n * [47] Permutations II\n */\nfunction backtrack(list, nums, tempList, visited) {\n  if (tempList.length === nums.length) return list.push([...tempList]);\n  for (let i = 0; i < nums.length; i++) {\n    // \u548c46.permutations\u7684\u533a\u522b\u662f\u8fd9\u9053\u9898\u7684nums\u662f\u53ef\u4ee5\u91cd\u590d\u7684\n    // \u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u8fd9\u79cd\u60c5\u51b5\n    if (visited[i]) continue; // \u540c\u4e00\u4e2a\u6570\u5b57\u4e0d\u80fd\u7528\u4e24\u6b21\n    if (i > 0 && nums[i] === nums[i - 1] && visited[i - 1]) continue; // \u540c\u6837\u503c\u7684\u6570\u5b57\u4e0d\u80fd\u7528\u4e24\u6b21\n\n    visited[i] = true;\n    tempList.push(nums[i]);\n    backtrack(list, nums, tempList, visited);\n    visited[i] = false;\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function (nums) {\n  const list = [];\n  backtrack(\n    list,\n    nums.sort((a, b) => a - b),\n    [],\n    []\n  );\n  return list;\n};\n"},{language:"cpp",text:"\nclass Solution {\nprivate:\n  vector<vector<int>> ans;\n  void permute(vector<int> nums, int start) {\n    if (start == nums.size() - 1) {\n      ans.push_back(nums);\n      return;\n    }\n    for (int i = start; i < nums.size(); ++i) {\n      if (i != start && nums[i] == nums[start]) continue;\n      swap(nums[i], nums[start]);\n      permute(nums, start + 1);\n    }\n  }\npublic:\n  vector<vector<int>> permuteUnique(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    permute(nums, 0);\n    return ans;\n  }\n};\n"}]},"rotate-image":{id:"48",name:"rotate-image",pre:[{text:"\u539f\u5730\u7b97\u6cd5",link:null,color:"orange"},{text:"\u77e9\u9635",link:null,color:"gold"}],keyPoints:[{text:"\u77e9\u9635\u65cb\u8f6c\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/48.rotate-image.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/48.rotate-image.md",code:[{language:"js",text:"\nvar rotate = function (matrix) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n  const oMatrix = JSON.parse(JSON.stringify(matrix)); // clone\n  const n = oMatrix.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      matrix[j][n - i - 1] = oMatrix[i][j];\n    }\n  }\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=48 lang=javascript\n *\n * [48] Rotate Image\n */\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function (matrix) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n\n  // \u505a\u6cd5\uff1a \u5148\u6cbf\u7740\u5bf9\u89d2\u7ebf\u7ffb\u8f6c\uff0c\u7136\u540e\u6cbf\u7740\u6c34\u5e73\u7ebf\u7ffb\u8f6c\n  const n = matrix.length;\n  function swap(arr, [i, j], [m, n]) {\n    const temp = arr[i][j];\n    arr[i][j] = arr[m][n];\n    arr[m][n] = temp;\n  }\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i; j++) {\n      swap(matrix, [i, j], [n - j - 1, n - i - 1]);\n    }\n  }\n\n  for (let i = 0; i < n / 2; i++) {\n    for (let j = 0; j < n; j++) {\n      swap(matrix, [i, j], [n - i - 1, j]);\n    }\n  }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int N = matrix.size();\n        for (int i = 0; i < N / 2; ++i) {\n            for (int j = i; j < N - i - 1; ++j) {\n                int tmp = matrix[i][j];\n                matrix[i][j] = matrix[N - j - 1][i];\n                matrix[N - j - 1][i] = matrix[N - i - 1][N - j - 1];\n                matrix[N - i - 1][N - j - 1] = matrix[j][N - i - 1];\n                matrix[j][N - i - 1] = tmp;\n            }\n        }\n    }\n};\n"}]},"group-anagrams":{id:"49",name:"group-anagrams",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u6876\u6392\u5e8f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/49.group-anagrams.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/49.group-anagrams.md",code:[{language:"js",text:'\nvar groupAnagrams = function (strs) {\n  const hashTable = {};\n\n  function sort(str) {\n    return str.split("").sort().join("");\n  }\n\n  // \u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u662f\u5f88\u4f18\uff0c\u4f46\u662f\u5f88\u76f4\u89c2\uff0c\u5bb9\u6613\u60f3\u5230\n  for (let i = 0; i < strs.length; i++) {\n    const str = strs[i];\n    const key = sort(str);\n    if (!hashTable[key]) {\n      hashTable[key] = [str];\n    } else {\n      hashTable[key].push(str);\n    }\n  }\n\n  return Object.values(hashTable);\n};\n'},{language:"js",text:'\n/*\n * @lc app=leetcode id=49 lang=javascript\n *\n * [49] Group Anagrams\n */\n/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function (strs) {\n  // \u7c7b\u4f3c\u6876\u6392\u5e8f\n\n  let counts = [];\n  const hashTable = {};\n  for (let i = 0; i < strs.length; i++) {\n    const str = strs[i];\n    counts = Array(26).fill(0);\n    for (let j = 0; j < str.length; j++) {\n      counts[str[j].charCodeAt(0) - "a".charCodeAt(0)]++;\n    }\n    const key = counts.join("-");\n    if (!hashTable[key]) {\n      hashTable[key] = [str];\n    } else {\n      hashTable[key].push(str);\n    }\n  }\n\n  return Object.values(hashTable);\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& A) {\n        unordered_map<string, int> m;\n        vector<vector<string>> ans;\n        for (auto &s : A) {\n            auto p = s;\n            sort(p.begin(), p.end());\n            if (!m.count(p)) {\n                m[p] = ans.size();\n                ans.push_back({});\n            }\n            ans[m[p]].push_back(s);\n        }\n        return ans;\n    }\n};\n"}]},"pow-x-n":{id:"50",name:"pow-x-n",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"}],keyPoints:[{text:"\u8d85\u65f6\u5206\u6790",link:null,color:"blue"},{text:"hashtable",link:null,color:"blue"},{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/50.pow-x-n.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/50.pow-x-n.md",code:[{language:"cpp",text:"\nclass Solution {\n    double myPow(double x, long n) {\n        if (n < 0) return 1 / myPow(x, -n);\n        if (n == 0) return 1;\n        if (n == 1) return x;\n        if (n == 2) return x * x;\n        return myPow(myPow(x, n / 2), 2) * (n % 2 ? x : 1);\n    }\npublic:\n    double myPow(double x, int n) {\n        return myPow(x, (long)n);\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        res = 1\n        for _ in range(n):\n            res *= x\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        return self.myPow(x, n // 2) * self.myPow(x, n - n // 2)\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        return self.myPow(x * x, n // 2) if n % 2 == 0 else x * self.myPow(x, n - 1)\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        res = 1\n        while n:\n            if n & 1 == 1:\n                res *= x\n            x *= x\n            n >>= 1\n        return res\n"}]},"N-Queens-II":{id:"52",name:"N-Queens-II",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",link:null,color:"geekblue"}],keyPoints:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/52.N-Queens-II.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/52.N-Queens-II.md",code:[{language:"js",text:"\n/**\n * @param {number} n\n * @return {number}\n * @param row \u5f53\u524d\u5c42\n * @param cols \u5217\n * @param pie \u5de6\u659c\u7ebf\n * @param na \u53f3\u659c\u7ebf\n */\nconst totalNQueens = function (n) {\n    let res = 0;\n    const dfs = (n, row, cols, pie, na) => {\n        if (row >= n) {\n            res++;\n            return;\n        }\n        // \u5c06\u6240\u6709\u80fd\u653e\u7f6e Q \u7684\u4f4d\u7f6e\u7531 0 \u53d8\u6210 1\uff0c\u4ee5\u4fbf\u8fdb\u884c\u540e\u7eed\u7684\u4f4d\u904d\u5386\n        // \u4e5f\u5c31\u662f\u5f97\u5230\u5f53\u524d\u6240\u6709\u7684\u7a7a\u4f4d\n        let bits = (~(cols | pie | na)) & ((1 << n) - 1);\n        while (bits) {\n            // \u53d6\u6700\u4f4e\u4f4d\u76841\n            let p = bits & -bits;\n            // \u628aP\u4f4d\u7f6e\u4e0a\u653e\u5165\u7687\u540e\n            bits = bits & (bits - 1);\n            // row + 1 \u641c\u7d22\u4e0b\u4e00\u884c\u53ef\u80fd\u7684\u4f4d\u7f6e\n            // cols \uff5c p \u76ee\u524d\u6240\u6709\u653e\u7f6e\u7687\u540e\u7684\u5217\n            // (pie | p) << 1 \u548c (na | p) >> 1) \u4e0e\u5df2\u653e\u7f6e\u8fc7\u7687\u540e\u7684\u4f4d\u7f6e \u4f4d\u4e8e\u4e00\u6761\u659c\u7ebf\u4e0a\u7684\u4f4d\u7f6e\n            dfs(n, row + 1, cols | p, (pie | p) << 1, (na | p) >> 1);\n        }\n    }\n    dfs(n, 0, 0, 0, 0);\n    return res;\n};\n"}]},"maximum-sum-subarray-cn":{id:"53",name:"maximum-sum-subarray-cn",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u5206\u67901.\u66b4\u529b\u89e3\uff0c\u5217\u4e3e\u6240\u6709\u7ec4\u5408\u5b50\u5e8f\u5217\u9996\u5c3e\u4f4d\u7f6e\u7684\u7ec4\u5408\uff0c\u6c42\u89e3\u6700\u5927\u7684\u5b50\u5e8f\u5217\u548c,\u4f18\u5316\u53ef\u4ee5\u9884\u5148\u5904\u7406\uff0c\u5f97\u5230\u524d\u7f00\u548c2.\u5206\u6cbb\u6cd5\uff0c\u6bcf\u6b21\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u628a\u6570\u7ec4\u5206\u4e3a\u5de6\u53f3\u4e2d\u4e09\u90e8\u5206\uff0c\u5206\u522b\u6c42\u51fa\u5de6\u53f3\u4e2d\uff08\u8fd9\u91cc\u4e2d\u662f\u5305\u62ec\u4e2d\u95f4\u5143\u7d20\u7684\u5b50\u5e8f\u5217\uff09\u6700\u5927\u548c\u3002\u5bf9\u5de6\u53f3\u5206\u522b\u6df1\u5ea6\u9012\u5f52\uff0c\u4e09\u8005\u4e2d\u6700\u5927\u503c\u5373\u4e3a\u5f53\u524d\u6700\u5927\u5b50\u5e8f\u5217\u548c\u30023.\u52a8\u6001\u89c4\u5212\uff0c\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6c42\u5230\u5f53\u524d\u4f4d\u7f6e\u6700\u5927\u548c\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"bloomberg"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md",code:[{language:"java",text:"\nclass MaximumSubarrayPrefixSum {\n  public int maxSubArray(int[] nums) {\n      int len = nums.length;\n      int maxSum = Integer.MIN_VALUE;\n      int sum = 0;\n      for (int i = 0; i < len; i++) {\n        sum = 0;\n        for (int j = i; j < len; j++) {\n          sum += nums[j];\n          maxSum = Math.max(maxSum, sum);\n        }\n      }\n      return maxSum;\n  }\n}\n"},{language:"java",text:"\nclass MaxSumSubarray {\n  public int maxSubArray3(int[] nums) {\n      int maxSum = nums[0];\n      int sum = 0;\n      int minSum = 0;\n      for (int num : nums) {\n        // prefix Sum\n        sum += num;\n        // update maxSum\n        maxSum = Math.max(maxSum, sum - minSum);\n        // update minSum\n        minSum = Math.min(minSum, sum);\n      }\n      return maxSum;\n  }\n}\n"},{language:"java",text:"\nclass MaximumSubarrayDivideConquer {\n  public int maxSubArrayDividConquer(int[] nums) {\n      if (nums == null || nums.length == 0) return 0;\n      return helper(nums, 0, nums.length - 1);\n    }\n    private int helper(int[] nums, int l, int r) {\n      if (l > r) return Integer.MIN_VALUE;\n      int mid = (l + r) >>> 1;\n      int left = helper(nums, l, mid - 1);\n      int right = helper(nums, mid + 1, r);\n      int leftMaxSum = 0;\n      int sum = 0;\n      // left surfix maxSum start from index mid - 1 to l\n      for (int i = mid - 1; i >= l; i--) {\n        sum += nums[i];\n        leftMaxSum = Math.max(leftMaxSum, sum);\n      }\n      int rightMaxSum = 0;\n      sum = 0;\n      // right prefix maxSum start from index mid + 1 to r\n      for (int i = mid + 1; i <= r; i++) {\n        sum += nums[i];\n        rightMaxSum = Math.max(sum, rightMaxSum);\n      }\n      // max(left, right, crossSum)\n      return Math.max(leftMaxSum + rightMaxSum + nums[mid], Math.max(left, right));\n    }\n}\n"},{language:"java",text:"\nclass MaximumSubarrayDP {\n  public int maxSubArray(int[] nums) {\n     int currMaxSum = nums[0];\n     int maxSum = nums[0];\n     for (int i = 1; i < nums.length; i++) {\n       currMaxSum = Math.max(currMaxSum + nums[i], nums[i]);\n       maxSum = Math.max(maxSum, currMaxSum);\n     }\n     return maxSum;\n  }\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = -Number.MAX_VALUE;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum = 0;\n    for (let j = i; j < len; j++) {\n      sum += list[j];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n\n  return max;\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  let min = 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += list[i];\n    if (sum - min > max) max = sum - min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n\n  return max;\n}\n"},{language:"js",text:"\nfunction helper(list, m, n) {\n  if (m === n) return list[m];\n  let sum = 0;\n  let lmax = -Number.MAX_VALUE;\n  let rmax = -Number.MAX_VALUE;\n  const mid = ((n - m) >> 1) + m;\n  const l = helper(list, m, mid);\n  const r = helper(list, mid + 1, n);\n  for (let i = mid; i >= m; i--) {\n    sum += list[i];\n    if (sum > lmax) lmax = sum;\n  }\n\n  sum = 0;\n\n  for (let i = mid + 1; i <= n; i++) {\n    sum += list[i];\n    if (sum > rmax) rmax = sum;\n  }\n\n  return Math.max(l, r, lmax + rmax);\n}\n\nfunction LSS(list) {\n  return helper(list, 0, list.length - 1);\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  for (let i = 1; i < len; i++) {\n    list[i] = Math.max(0, list[i - 1]) + list[i];\n    if (list[i] > max) max = list[i];\n  }\n\n  return max;\n}\n"},{language:"py",text:"\nimport sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = -sys.maxsize\n        sum = 0\n        for i in range(n):\n            sum = 0\n            for j in range(i, n):\n                sum += nums[j]\n                maxSum = max(maxSum, sum)\n\n        return maxSum\n"},{language:"py",text:"\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = nums[0]\n        minSum = sum = 0\n        for i in range(n):\n            sum += nums[i]\n            maxSum = max(maxSum, sum - minSum)\n            minSum = min(minSum, sum)\n\n        return maxSum\n"},{language:"py",text:"\nimport sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        return self.helper(nums, 0, len(nums) - 1)\n    def helper(self, nums, l, r):\n        if l > r:\n            return -sys.maxsize\n        mid = (l + r) // 2\n        left = self.helper(nums, l, mid - 1)\n        right = self.helper(nums, mid + 1, r)\n        left_suffix_max_sum = right_prefix_max_sum = 0\n        sum = 0\n        for i in reversed(range(l, mid)):\n            sum += nums[i]\n            left_suffix_max_sum = max(left_suffix_max_sum, sum)\n        sum = 0\n        for i in range(mid + 1, r + 1):\n            sum += nums[i]\n            right_prefix_max_sum = max(right_prefix_max_sum, sum)\n        cross_max_sum = left_suffix_max_sum + right_prefix_max_sum + nums[mid]\n        return max(cross_max_sum, left, right)\n"},{language:"py",text:"\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_sum_ending_curr_index = max_sum = nums[0]\n        for i in range(1, n):\n            max_sum_ending_curr_index = max(max_sum_ending_curr_index + nums[i], nums[i])\n            max_sum = max(max_sum_ending_curr_index, max_sum)\n\n        return max_sum\n"}]},"jump-game":{id:"55",name:"jump-game",pre:[{text:"\u8d2a\u5fc3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/greedy.md",color:"purple"}],keyPoints:[{text:"\u8bb0\u5f55\u548c\u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\u80fd\u591f\u5230\u8fbe\u7684\u6700\u5927\u7684\u7d22\u5f15",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/55.jump-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/55.jump-game.md",code:[{language:"java",text:"\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int n=nums.length;\n        int k=0;\n        for(int i=0;i<n;i++)\n        {\n            if(i>k){\n                return false;\n            }\n            // \u80fd\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n            if(k>=n-1){\n                return true;\n            }\n            // \u4ece\u5f53\u524d\u4f4d\u7f6e\u80fd\u8df3\u7684\u6700\u8fdc\u7684\u4f4d\u7f6e\n            k = Math.max(k, i+nums[i]);\n        }\n        return k >= n-1;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function (nums) {\n  let max = 0; // \u80fd\u591f\u8d70\u5230\u7684\u6570\u7ec4\u4e0b\u6807\n\n  for (let i = 0; i < nums.length; i++) {\n    if (max < i) return false; // \u5f53\u524d\u8fd9\u4e00\u6b65\u90fd\u8d70\u4e0d\u5230\uff0c\u540e\u9762\u66f4\u8d70\u4e0d\u5230\u4e86\n    max = Math.max(nums[i] + i, max);\n  }\n\n  return max >= nums.length - 1;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        int n=nums.size();\n        int k=0;\n        for(int i=0;i<n;i++)\n        {\n            if(i>k){\n                return false;\n            }\n            // \u80fd\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n            if(k>=n-1){\n                return true;\n            }\n            // \u4ece\u5f53\u524d\u4f4d\u7f6e\u80fd\u8df3\u7684\u6700\u8fdc\u7684\u4f4d\u7f6e\n            k = max(k, i+nums[i]);\n        }\n        return k >= n-1;\n    }\n};\n"}]},"merge-intervals":{id:"56",name:"merge-intervals",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u4e0d\u6392\u5e8f\uff0c\u9700\u8981\u501f\u52a9\u4e00\u4e9bhack,\u8fd9\u91cc\u4e0d\u4ecb\u7ecd\u4e86",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/56.merge-intervals.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/56.merge-intervals.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=56 lang=javascript\n *\n * [56] Merge Intervals\n */\n/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\n\nfunction intersected(a, b) {\n  if (a[0] > b[1] || a[1] < b[0]) return false;\n  return true;\n}\n\nfunction mergeTwo(a, b) {\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\n}\nvar merge = function (intervals) {\n  // \u8fd9\u79cd\u7b97\u6cd5\u9700\u8981\u5148\u6392\u5e8f\n  intervals.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < intervals.length - 1; i++) {\n    const cur = intervals[i];\n    const next = intervals[i + 1];\n\n    if (intersected(cur, next)) {\n      intervals[i] = undefined;\n      intervals[i + 1] = mergeTwo(cur, next);\n    }\n  }\n  return intervals.filter((q) => q);\n};\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, intervals, cut):\n        ans = []\n        for s, e in intervals:\n            if s < cut[0]: ans.append([s, min(e, cut[0])])\n            if cut[1] < e: ans.append([max(s, cut[1]), e])\n        return ans\n"}]},"insert-interval":{id:"57",name:"insert-interval",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/57.insert-interval.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/57.insert-interval.md",code:[{language:"py",text:"\n\n\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        intervals.append(newInterval)\n        intervals.sort(key=lambda a: a[0])\n\n        def intersected(a, b):\n            if a[0] > b[1] or a[1] < b[0]:\n                return False\n            return True\n\n        def mergeTwo(a, b):\n            return [min(a[0], b[0]), max(a[1], b[1])]\n\n        i = 0\n        while i < len(intervals) - 1:\n            cur = intervals[i]\n            next = intervals[i + 1]\n            if intersected(cur, next):\n                intervals[i] = None\n                intervals[i + 1] = mergeTwo(cur, next)\n            i += 1\n\n        return list(filter(lambda x: x, intervals))\n\n"},{language:"py",text:"\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        i, n = 0, len(intervals)\n        ans = []\n\n        def intersected(a, b):\n            if a[0] > b[1] or a[1] < b[0]:\n                return False\n            return True\n        # \u524d\n        while i < n and intervals[i][1] < newInterval[0]:\n            ans.append(intervals[i])\n            i += 1\n        # \u4e2d\n        while i < n and intersected(intervals[i], newInterval):\n            newInterval = [min(intervals[i][0], newInterval[0]),\n                           max(intervals[i][1], newInterval[1])]\n            i += 1\n        ans.append(newInterval)\n        # \u540e\n        while i < n:\n            ans.append(intervals[i])\n            i += 1\n        return ans\n"}]},"permutation-sequence":{id:"60",name:"permutation-sequence",pre:[{text:"\u6570\u5b66",link:null,color:"geekblue"},{text:"\u56de\u6eaf",link:null,color:"green"},{text:"factorial",link:null,color:"orange"}],keyPoints:[{text:"\u627e\u89c4\u5f8b",link:null,color:"blue"},{text:"\u6392\u5217\u7ec4\u5408",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"Twitter"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/60.permutation-sequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/60.permutation-sequence.md",code:[{language:"py",text:'\nimport math\n\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        res = ""\n        candidates = [str(i) for i in range(1, n + 1)]\n\n        while n != 0:\n            facto = math.factorial(n - 1)\n            # i \u8868\u793a\u524d\u9762\u88ab\u6211\u4eec\u6392\u9664\u7684\u7ec4\u6570\uff0c\u4e5f\u5c31\u662fk\u6240\u5728\u7684\u7ec4\u7684\u4e0b\u6807\n            # k // facto \u662f\u4e0d\u884c\u7684\uff0c \u6bd4\u5982\u5728 k % facto == 0\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6709\u95ee\u9898\n            i = math.ceil(k / facto) - 1\n            # \u6211\u4eec\u628acandidates[i]\u52a0\u5165\u5230\u7ed3\u679c\u96c6\uff0c\u7136\u540e\u5c06\u5176\u5f39\u51facandidates\uff08\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u5143\u7d20\uff09\n            res += candidates[i]\n            candidates.pop(i)\n            # k \u7f29\u5c0f\u4e86 facto *  i\n            k -= facto * i\n            # \u6bcf\u6b21\u8fed\u4ee3\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u5904\u7406\u4e86\u4e00\u4e2a\u5143\u7d20\uff0cn \u51cf\u53bb 1\uff0c\u5f53n == 0 \u8bf4\u660e\u5168\u90e8\u5904\u7406\u5b8c\u6210\uff0c\u6211\u4eec\u9000\u51fa\u5faa\u73af\n            n -= 1\n        return res\n'}]},"Rotate-List":{id:"61",name:"Rotate-List",pre:[{text:"\u6c42\u5355\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9",link:null,color:"gold"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/61.Rotate-List.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/61.Rotate-List.md",code:[{language:"java",text:"\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head == null || head.next == null) return head;\n        int count = 0;\n        ListNode now = head;\n        while(now != null){\n            now = now.next;\n            count++;\n        }\n        k = k % count;\n        ListNode slow = head, fast = head;\n        while(fast.next != null){\n            if(k-- <= 0){\n                slow = slow.next;\n            }\n            fast = fast.next;\n        }\n        fast.next = head;\n        ListNode res = slow.next;\n        slow.next = null;\n        return res;\n    }\n}\n"},{language:"js",text:"\n\u5feb\u6307\u9488 = head;\n\u6162\u6307\u9488 = head;\nwhile (\u5feb\u6307\u9488.next) {\n  if (N-- <= 0) {\n    \u6162\u6307\u9488 = \u6162\u6307\u9488.next;\n  }\n  \u5feb\u6307\u9488 = \u5feb\u6307\u9488.next;\n}\n"},{language:"js",text:"\nlet slow = (fast = head);\nwhile (fast.next) {\n  if (k-- <= 0) {\n    slow = slow.next;\n  }\n  fast = fast.next;\n}\n"},{language:"js",text:"\n  \u83b7\u53d6\u94fe\u8868\u7684\u957f\u5ea6\n  k = k % \u94fe\u8868\u7684\u957f\u5ea6\n  \u83b7\u53d6\u5012\u6570\u7b2ck + 1,\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\u4e0e\u94fe\u8868\u5c3e\u8282\u70b9\n  \u5012\u6570\u7b2ck + 1\u4e2a\u8282\u70b9.next = null\n  \u94fe\u8868\u5c3e\u8282\u70b9.next = head\n  return \u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\n"},{language:"js",text:"\nvar rotateRight = function (head, k) {\n  if (!head || !head.next) return head;\n  let count = 0,\n    now = head;\n  while (now) {\n    now = now.next;\n    count++;\n  }\n  k = k % count;\n  let slow = (fast = head);\n  while (fast.next) {\n    if (k-- <= 0) {\n      slow = slow.next;\n    }\n    fast = fast.next;\n  }\n  fast.next = head;\n  let res = slow.next;\n  slow.next = null;\n  return res;\n};\n"},{language:"cpp",text:"\nclass Solution {\n    int getLength(ListNode *head) {\n        int len = 0;\n        for (; head; head = head->next, ++len);\n        return len;\n    }\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) return NULL;\n        int len = getLength(head);\n        k %= len;\n        if (k == 0) return head;\n        auto p = head, q = head;\n        while (k--) q = q->next;\n        while (q->next) {\n            p = p->next;\n            q = q->next;\n        }\n        auto h = p->next;\n        q->next = head;\n        p->next = NULL;\n        return h;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        # \u53cc\u6307\u9488\n        if head:\n            p1 = head\n            p2 = head\n            count = 1\n            i = 0\n            while i < k:\n                if p2.next:\n                    count += 1\n                    p2 = p2.next\n                else:\n                    k = k % count\n                    i = -1\n                    p2 = head\n                i += 1\n\n            while p2.next:\n                p1 = p1.next\n                p2 = p2.next\n\n            if p1.next:\n                tmp = p1.next\n            else:\n                return head\n            p1.next = None\n            p2.next = head\n            return tmp\n"}]},"unique-paths":{id:"62",name:"unique-paths",pre:[{text:"\u6392\u5217\u7ec4\u5408",link:null,color:"green"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u6392\u5217\u7ec4\u5408\u539f\u7406",link:null,color:"blue"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u57fa\u672c\u52a8\u6001\u89c4\u5212\u95ee\u9898",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u5230O(n),\u8fd9\u4f1a\u662f\u4e00\u4e2a\u8003\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/62.unique-paths.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/62.unique-paths.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=62 lang=javascript\n *\n * [62] Unique Paths\n *\n * https://leetcode.com/problems/unique-paths/description/\n */\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const dp = Array(n).fill(1);\n\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[j] = dp[j] + dp[j - 1];\n    }\n  }\n\n  return dp[n - 1];\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<int> dp(n + 1, 0);\n        dp[n - 1] = 1;\n        for (int i = m - 1; i >= 0; --i) {\n            for (int j = n - 1; j >= 0; --j) dp[j] += dp[j + 1];\n        }\n        return dp[0];\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        d = [[1] * n for _ in range(m)]\n\n        for col in range(1, m):\n            for row in range(1, n):\n                d[col][row] = d[col - 1][row] + d[col][row - 1]\n\n        return d[m - 1][n - 1]\n"},{language:"py",text:"\nclass Solution:\n\n    @lru_cache\n    def uniquePaths(self, m: int, n: int) -> int:\n        if m == 1 or n == 1:\n            return 1\n        return self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n"},{language:"py",text:"\nclass Solution:\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                dp[j] += dp[j - 1]\n        return dp[n - 1]\n"}]},"unique-paths-ii":{id:"63",name:"unique-paths-ii",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u57fa\u672c\u52a8\u6001\u89c4\u5212\u95ee\u9898",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u5230O(n),\u8fd9\u4f1a\u662f\u4e00\u4e2a\u8003\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/63.unique-paths-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/63.unique-paths-ii.md",code:[{language:"cpp",text:"\nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int M = obstacleGrid.size(), N = obstacleGrid[0].size();\n        vector<int> memo(N, 0);\n        memo[N - 1] = 1;\n        for (int i = M - 1; i >= 0; --i) {\n            for (int j = N - 1; j >= 0; --j) {\n                if (obstacleGrid[i][j] == 1) memo[j] = 0;\n                else memo[j] += j == N - 1 ? 0 : memo[j + 1];\n            }\n        }\n        return memo[0];\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        if m == 0: return 0\n        n = len(obstacleGrid[0])\n        @lru_cache(None)\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n: return 0\n            if obstacleGrid[i][j] == 1: return 0\n            if i == 0 and j == 0: return 1\n            return dfs(i - 1, j) + dfs(i, j - 1)\n        return dfs(m - 1, n - 1)\n"},{language:"py",text:"\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0]:\n            return 0\n\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[1][1] = 1\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == 1 and j == 1:\n                    continue\n                if obstacleGrid[i - 1][j - 1] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = 0\n        return dp[m][n]\n"},{language:"py",text:"\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0]:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if obstacleGrid[i - 1][j - 1] == 0:\n                    dp[j] += dp[j - 1]\n                else:\n                    dp[j] = 0\n        return dp[-1]\n"}]},"valid-number":{id:"65",name:"valid-number",pre:[{text:"\u6682\u65e0",link:null,color:"green"}],keyPoints:[{text:"\u5206\u6790\u975e\u6cd5\u7684\u60c5\u51b5\uff0c\u7528\u4e09\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u70b9\uff0c\u6307\u6570\uff0c\u6570\u5b57\u7684\u4f4d\u7f6e\u6765\u590d\u5236\u5224\u65ad",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/65.valid-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/65.valid-number.md",code:[{language:"py",text:"\nclass Solution:\n    def isNumber(self, s: str) -> bool:\n        last_dot = last_e = last_d = -1\n        for i, c in enumerate(s):\n            if c.isdigit():\n                last_d = i\n            elif c == '.':\n                if last_dot != -1 or last_e != -1: return False\n                last_dot = i\n            elif c.lower() == 'e':\n                if last_d == -1 or last_e != -1: return False\n                last_e = i\n            elif c == '+' or c == '-':\n                if i == 0 or s[i-1].lower() == 'e':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n\n        return s[-1].isdigit() or (s[-1] == '.' and last_d != -1)\n"},{language:"py",text:'\n\nclass Solution:\n    def isNumber(self, s: str) -> bool:\n        # \u4efb\u4f55\u72b6\u6001\u673a\u7684\u6838\u5fc3\u90fd\u662f\u5efa\u7acb\u5982\u4e0b\u7684\u72b6\u6001\u673a\u6a21\u578b\n        states = {\n            "start": {"SIGN":"sign1",  "DIGIT":"digit1",  "DOT":"dot1"},\n            "sign1": {"DIGIT":"digit1",  "DOT":"dot1"},\n            "sign2": {"DIGIT":"D"},\n            "digit1": {"DIGIT":"digit1",  "DOT":"dot2",  "EXP":"exp",  "END": True},\n            "digit2": {"DIGIT":"digit2",  "EXP":"exp",  "END": True},\n            "dot1": {"DIGIT":"digit2"}, # \u524d\u9762\u6ca1\u6570\u5b57\n            "dot2": {"DIGIT":"digit2",  "EXP":"exp",  "END": True}, # \u524d\u9762\u6709\u6570\u5b57\n            "exp": {"SIGN":"sign2",  "DIGIT":"D"},\n            "D": {"DIGIT":"D",  "END": True}\n        }\n\n        def get(ch):\n            if ch == ".": return "DOT"\n            elif ch in "+-": return "SIGN"\n            elif ch in "Ee": return "EXP"\n            elif ch.isdigit(): return "DIGIT"\n\n        state = "start"\n        for c in s:\n            state = states[state].get(get(c))\n            if not state: return False\n\n        return "END" in states[state]\n\n'}]},"plus-one":{id:"66",name:"plus-one",pre:[{text:"\u6570\u7ec4\u7684\u904d\u5386(\u6b63\u5411\u904d\u5386\u548c\u53cd\u5411\u904d\u5386)",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/66.plus-one.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/66.plus-one.md",code:[{language:"java",text:"\nfor(int i = n - 1; i > - 1; i --) {\n  \u5185\u90e8\u903b\u8f91\n}\n\n"},{language:"js",text:"\n// \u9996\u5148\u6211\u4eec\u8981\u4ece\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u6211\u4eec\u7684\u8ba1\u7b97\u5f97\u51fa\u6211\u4eec\u65b0\u7684sum\nsum = arr[arr.length - 1] + 1\n\n// \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u5224\u65ad\u8fd9\u4e2a\u65b0\u7684sum\u662f\u5426\u8d85\u8fc79\nsum > 9 ?\n\n// \u5047\u5982\u5927\u4e8e 9, \u90a3\u4e48\u6211\u4eec\u4f1a\u66f4\u65b0\u8fd9\u4e00\u4f4d\u4e3a 0 \u5e76\u4e14\u5c06carry\u503c\u66f4\u6539\u4e3a1\ncarry = 1\narr[i] = 0\n\n// \u5047\u5982\u4e0d\u5927\u4e8e 9\uff0c\u66f4\u65b0\u6700\u540e\u4e00\u4f4d\u4e3asum\u5e76\u76f4\u63a5\u8fd4\u56de\u6570\u7ec4\narr[arr.length - 1] = sum\nreturn arr\n\n// \u63a5\u7740\u6211\u4eec\u8981\u7ee7\u7eed\u5411\u6570\u7ec4\u7684\u5012\u6570\u7b2c\u4e8c\u4f4d\u91cd\u590d\u8fdb\u884c\u6211\u4eec\u4e0a\u4e00\u6b65\u7684\u64cd\u4f5c\n...\n\n// \u5f53\u6211\u4eec\u5b8c\u6210\u4ee5\u540e\uff0c\u5982\u679c\u6570\u7ec4\u7b2c\u4e00\u4f4d\u65f6\u7684sum\u5927\u4e8e0\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7ed9\u6570\u7ec4\u7684\u9996\u4f4d\u589e\u6dfb\u4e00\u4e2a1\nresult = new array with size of arr.length + 1\nresult[0] = 1\nresult[1] ...... result[result.length - 1]  = 0\n"},{language:"js",text:"\nvar plusOne = function (digits) {\n  var carry = 1; // \u6211\u4eec\u5c06\u521d\u59cb\u7684 +1 \u4e5f\u5f53\u505a\u662f\u4e00\u4e2a\u5728\u4e2a\u4f4d\u7684 carry\n  for (var i = digits.length - 1; i > -1; i--) {\n    if (carry) {\n      var sum = carry + digits[i];\n      digits[i] = sum % 10;\n      carry = sum > 9 ? 1 : 0; // \u6bcf\u6b21\u8ba1\u7b97\u90fd\u4f1a\u66f4\u65b0\u4e0b\u4e00\u6b65\u9700\u8981\u7528\u5230\u7684 carry\n    }\n  }\n  if (carry === 1) {\n    digits.unshift(1); // \u5982\u679ccarry\u6700\u540e\u505c\u7559\u57281\uff0c\u8bf4\u660e\u6709\u9700\u8981\u989d\u5916\u7684\u4e00\u4e2a\u957f\u5ea6 \u6240\u4ee5\u6211\u4eec\u5c31\u5728\u9996\u4f4d\u589e\u6dfb\u4e00\u4e2a 1\n  }\n  return digits;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& A) {\n        int i = A.size() - 1, carry = 1;\n        for (; i >= 0 && carry; --i) {\n            carry += A[i];\n            A[i] = carry % 10;\n            carry /= 10;\n        }\n        if (carry) A.insert(begin(A), carry);\n        return A;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i], carry = (carry + digits[i]) % 10, (carry + digits[i]) // 10\n        return [carry] + digits if carry else digits\n"}]},"set-matrix-zeroes":{id:"73",name:"set-matrix-zeroes",pre:[{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"green"}],keyPoints:[{text:"\u4f7f\u7528\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u6765\u66ff\u4ee3\u6211\u4eecm+n\u6570\u7ec4",link:null,color:"blue"},{text:"\u5148\u8bb0\u5f55\u4e0b\u201d\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u662f\u5426\u5168\u662f0\u201c\u8fd9\u6837\u7684\u4e00\u4e2a\u6570\u636e\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a\u540e\u7eed\u5bf9\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u7684\u66f4\u65b0\u9020\u6210\u6570\u636e\u4e22\u5931",link:null,color:"blue"},{text:"\u6700\u540e\u66f4\u65b0\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/73.set-matrix-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/73.set-matrix-zeroes.md",code:[{language:"js",text:"\nvar setZeroes = function (matrix) {\n  if (matrix.length === 0) return matrix;\n  const m = matrix.length;\n  const n = matrix[0].length;\n  const zeroes = Array(m + n).fill(false);\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const item = matrix[i][j];\n\n      if (item === 0) {\n        zeroes[i] = true;\n        zeroes[m + j] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < m; i++) {\n    if (zeroes[i]) {\n      matrix[i] = Array(n).fill(0);\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (zeroes[m + i]) {\n      for (let j = 0; j < m; j++) {\n        matrix[j][i] = 0;\n      }\n    }\n  }\n\n  return matrix;\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=73 lang=javascript\n *\n * [73] Set Matrix Zeroes\n */\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function (matrix) {\n  if (matrix.length === 0) return matrix;\n  const m = matrix.length;\n  const n = matrix[0].length;\n\n  // \u65f6\u95f4\u590d\u6742\u5ea6 O(m * n), \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n  let firstRow = false; // \u7b2c\u4e00\u884c\u662f\u5426\u5e94\u8be5\u5168\u90e8\u4e3a0\n  let firstCol = false; // \u7b2c\u4e00\u5217\u662f\u5426\u5e94\u8be5\u5168\u90e8\u4e3a0\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const item = matrix[i][j];\n      if (item === 0) {\n        if (i === 0) {\n          firstRow = true;\n        }\n        if (j === 0) {\n          firstCol = true;\n        }\n        matrix[0][j] = 0;\n        matrix[i][0] = 0;\n      }\n    }\n  }\n\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      const item = matrix[i][j];\n      if (matrix[0][j] == 0 || matrix[i][0] == 0) {\n        matrix[i][j] = 0;\n      }\n    }\n  }\n\n  // \u6700\u540e\u5904\u7406\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\n\n  if (firstRow) {\n    for (let i = 0; i < n; i++) {\n      matrix[0][i] = 0;\n    }\n  }\n\n  if (firstCol) {\n    for (let i = 0; i < m; i++) {\n      matrix[i][0] = 0;\n    }\n  }\n\n  return matrix;\n};\n"},{language:"py",text:'\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        """\n        Do not return anything, modify matrix in-place instead.\n        """\n        def setRowZeros(matrix: List[List[int]], i:int) -> None:\n            C = len(matrix[0])\n            matrix[i] = [0] * C\n\n        def setColZeros(matrix: List[List[int]], j:int) -> None:\n            R = len(matrix)\n            for i in range(R):\n                matrix[i][j] = 0\n\n        isCol = False\n        R = len(matrix)\n        C = len(matrix[0])\n\n        for i in range(R):\n            if matrix[i][0] == 0:\n                isCol = True\n            for j in range(1, C):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for j in range(1, C):\n            if matrix[0][j] == 0:\n                setColZeros(matrix, j)\n\n        for i in range(R):\n            if matrix[i][0] == 0:\n                setRowZeros(matrix, i)\n\n        if isCol:\n            setColZeros(matrix, 0)\n\n'},{language:"py",text:'\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        """\n        \u8fd9\u9898\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff0c\u5fc5\u987b\u6709\u4e2a\u5730\u65b9\u8bb0\u5f55\u5224\u65ad\u7ed3\u679c\uff0c\u4f46\u53c8\u4e0d\u80fd\u5f71\u54cd\u4e0b\u4e00\u6b65\u7684\u5224\u65ad\u6761\u4ef6\uff1b\n        \u76f4\u63a5\u6539\u4e3a0\u7684\u8bdd\uff0c\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b65\u7684\u5224\u65ad\u6761\u4ef6\uff1b\n        \u56e0\u6b64\uff0c\u6709\u4e00\u79cd\u601d\u8def\u662f\u5148\u6539\u4e3aNone\uff0c\u6700\u540e\u518d\u5c06None\u6539\u4e3a0\uff1b\n        \u4ece\u6761\u4ef6\u4e0a\u770b\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u7b2c\u4e00\u884c\u3001\u7b2c\u4e8c\u884c\u4f5c\u4e3a\u8bb0\u5f55\u7a7a\u95f4\uff0c\u90a3\u4e48\uff0c\u7528None\u5e94\u8be5\u4e5f\u4e0d\u7b97\u8fdd\u80cc\u9898\u76ee\u6761\u4ef6\uff1b\n        """\n        rows = len(matrix)\n        cols = len(matrix[0])\n        # \u904d\u5386\u77e9\u9635\uff0c\u7528None\u8bb0\u5f55\u8981\u6539\u7684\u5730\u65b9\uff0c\u6ce8\u610f\u5982\u679c\u662f0\u5219\u8981\u4fdd\u7559\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b65\u5224\u65ad\n        for r in range(rows):\n            for c in range(cols):\n                if matrix[r][c] is not None and matrix[r][c] == 0:\n                    # \u6539\u503c\n                    for i in range(rows):\n                        matrix[i][c] = None if matrix[i][c] != 0 else 0\n                    for j in range(cols):\n                        matrix[r][j] = None if matrix[r][j] != 0 else 0\n        # \u518d\u6b21\u904d\u5386\uff0c\u5c06None\u6539\u4e3a0\n        for r in range(rows):\n            for c in range(cols):\n                if matrix[r][c] is None:\n                    matrix[r][c] = 0\n'}]},"sort-colors":{id:"75",name:"sort-colors",pre:[{text:"\u8377\u5170\u56fd\u65d7\u95ee\u9898",link:"https://en.wikipedia.org/wiki/Dutch_national_flag_problem",color:"purple"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u8377\u5170\u56fd\u65d7\u95ee\u9898",link:null,color:"blue"},{text:"countingsort",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/75.sort-colors.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/75.sort-colors.md",code:[{language:"cpp",text:"\nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int r = 0, g = 0, b = 0;\n        for (int n : nums) {\n            if (n == 0) {\n                nums[b++] = 2;\n                nums[g++] = 1;\n                nums[r++] = 0;\n            } else if (n == 1) {\n                nums[b++] = 2;\n                nums[g++] = 1;\n            } else nums[b++] = 2;\n        }\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        p0 = cur = 0\n        p2 = len(nums) - 1\n\n        while cur <= p2:\n            if nums[cur] == 0:\n                nums[cur], nums[p0] = nums[p0], nums[cur]\n                p0 += 1\n                cur += 1\n            elif nums[cur] == 2:\n                nums[cur], nums[p2] = nums[p2], nums[cur]\n                p2 -= 1\n            else:\n                cur += 1\n\n'},{language:"py",text:"\nclass Solution:\n    def partition(self, head: ListNode, x: int) -> ListNode:\n        l1 = cur = head\n        while cur:\n            if cur.val < x:\n                cur.val, l1.val = l1.val, cur.val\n                l1 = l1.next\n            cur = cur.next\n        return head\n"}]},subsets:{id:"78",name:"subsets",pre:[{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/78.subsets.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/78.subsets.md",code:[{language:"java",text:"\nclass Solution {\n    // \u7ed3\u679c\n    List<List<Integer>> res = new ArrayList();\n    public List<List<Integer>> subsets(int[] nums) {\n        backtrack(nums, 0, new ArrayList<Integer>());\n        return res;\n    }\n\n    public void backtrack(int[] nums, int start, ArrayList<Integer> track)\n    {\n        // \u6ce8\u610f\uff1a\u6df1\u62f7\u8d1d\n        res.add(new ArrayList(track));\n        for(int i=start; i<nums.length;i++)\n        {\n            // \u505a\u9009\u62e9\n            track.add(nums[i]);\n            // \u56de\u6eaf\n            backtrack(nums, i+1, track);\n            // \u64a4\u9500\u9009\u62e9\n            track.remove(track.size()-1);\n        }\n    }\n}\n"},{language:"js",text:"\nfunction backtrack(list, tempList, nums, start) {\n  list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, i + 1);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function (nums) {\n  const list = [];\n  backtrack(list, [], nums, 0);\n  return list;\n};\n"},{language:"py",text:"\nclass Solution:\n    def subsets(self, nums):\n        self.res = []\n        self.track = []\n        self.backtrack(nums, 0, self.track)\n\n        return self.res\n\n    def backtrack(self, nums, start, track):\n        # \u6ce8\u610f\u6df1\u62f7\u8d1d\n        self.res.append(list(self.track))\n        for i in range(start, len(nums)):\n            # \u505a\u9009\u62e9\n            self.track.append(nums[i])\n            # \u56de\u6eaf\n            self.backtrack(nums, i+1, self.track)\n            # \u64a4\u9500\u9009\u62e9\n            self.track.pop()\n"}]},"word-search":{id:"79",name:"word-search",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u8d77\u59cb\u70b9\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u505aDFS",link:null,color:"blue"},{text:"DFS\u8fc7\u7a0b\u4e2d\uff0c\u8981\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u91cd\u590d\u904d\u5386\uff0c\u8fd9\u91cc\uff08JavaCode\u4e2d\uff09\u7528`*`\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u7528Set\u6216\u8005\u662fboolean[][]\u6570\u7ec4\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4f4d\u7f6e\u3002",link:null,color:"blue"},{text:"\u662f\u5426\u5339\u914d\u5f53\u524d\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\uff0c\u4e0d\u7b26\u5408\u56de\u6eaf\uff0c\u8fd9\u91cc\u8bb0\u5f97\u628a\u5f53\u524d`*`\u91cd\u65b0\u8bbe\u4e3a\u5f53\u524d\u5b57\u7b26\u3002\u5982\u679c\u7528Set\u6216\u8005\u662fboolean[][]\u6570\u7ec4\uff0c\u8bb0\u5f97\u628a\u5f53\u524d\u4f4d\u7f6e\u91cd\u8bbe\u4e3a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/79.word-search.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/79.word-search.md",code:[{language:"java",text:"\npublic class LC79WordSearch {\n  public boolean exist(char[][] board, String word) {\n    if (board == null || word == null) return false;\n    if (word.length() == 0) return true;\n    if (board.length == 0) return false;\n    int rows = board.length;\n    int cols = board[0].length;\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        // scan board, start with word first character\n        if (board[r][c] == word.charAt(0)) {\n          if (helper(board, word, r, c, 0)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean helper(char[][] board, String word, int r, int c, int start) {\n    // already match word all characters, return true\n    if (start == word.length()) return true;\n    if (!isValid(board, r, c) ||\n        board[r][c] != word.charAt(start)) return false;\n    // mark visited\n    board[r][c] = '*';\n    boolean res = helper(board, word, r - 1, c, start + 1) // \u4e0a\n        ||  helper(board, word, r + 1, c, start + 1)       // \u4e0b\n        ||  helper(board, word, r, c - 1, start + 1)       // \u5de6\n        ||  helper(board, word, r, c + 1, start + 1);      // \u53f3\n    // backtracking to start position\n    board[r][c] = word.charAt(start);\n    return res;\n  }\n\n  private boolean isValid(char[][] board, int r, int c) {\n    return r >= 0 && r < board.length && c >= 0 && c < board[0].length;\n  }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=79 lang=javascript\n *\n * [79] Word Search\n */\nfunction DFS(board, row, col, rows, cols, word, cur) {\n  // \u8fb9\u754c\u68c0\u67e5\n  if (row >= rows || row < 0) return false;\n  if (col >= cols || col < 0) return false;\n\n  const item = board[row][col];\n\n  if (item !== word[cur]) return false;\n\n  if (cur + 1 === word.length) return true;\n\n  // \u5982\u679c\u4f60\u7528hashmap\u8bb0\u5f55\u8bbf\u95ee\u7684\u5b57\u6bcd\uff0c \u90a3\u4e48\u4f60\u9700\u8981\u6bcf\u6b21backtrack\u7684\u65f6\u5019\u624b\u52a8\u6e05\u9664hashmap\uff0c\u5e76\u4e14\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\n  // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e00\u4e2alittle trick\n\n  board[row][col] = null;\n\n  // \u4e0a\u4e0b\u5de6\u53f3\n  const res =\n    DFS(board, row + 1, col, rows, cols, word, cur + 1) ||\n    DFS(board, row - 1, col, rows, cols, word, cur + 1) ||\n    DFS(board, row, col - 1, rows, cols, word, cur + 1) ||\n    DFS(board, row, col + 1, rows, cols, word, cur + 1);\n\n  board[row][col] = item;\n\n  return res;\n}\n/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function (board, word) {\n  if (word.length === 0) return true;\n  if (board.length === 0) return false;\n\n  const rows = board.length;\n  const cols = board[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const hit = DFS(board, i, j, rows, cols, word, 0);\n      if (hit) return true;\n    }\n  }\n  return false;\n};\n"},{language:"py",text:"\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m = len(board)\n        n = len(board[0])\n\n        def dfs(board, r, c, word, index):\n            if index == len(word):\n                return True\n            if r < 0 or r >= m or c < 0 or c >= n or board[r][c] != word[index]:\n                return False\n            board[r][c] = '*'\n            res = dfs(board, r - 1, c, word, index + 1) or dfs(board, r + 1, c, word, index + 1) or dfs(board, r, c - 1, word, index + 1) or dfs(board, r, c + 1, word, index + 1)\n            board[r][c] = word[index]\n            return res\n\n        for r in range(m):\n            for c in range(n):\n                if board[r][c] == word[0]:\n                    if dfs(board, r, c, word, 0):\n                        return True\n        return False\n"}]},"remove-duplicates-from-sorted-array-ii":{id:"80",name:"remove-duplicates-from-sorted-array-ii",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u5feb\u6162\u6307\u9488",link:null,color:"blue"},{text:"\u8bfb\u5199\u6307\u9488",link:null,color:"blue"},{text:"\u5220\u9664\u6392\u5e8f\u95ee\u9898",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md",code:[{language:"cpp",text:"\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int i = 0;\n        int k = 2;\n        for (int num : nums) {\n            if (i < k || num != nums[i - k]) {\n                nums[i] = num;\n                i++;\n            }\n        }\n        return i;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        # \u5199\u6307\u9488\n        i = 0\n        K = 2\n        for num in nums:\n            if i < K or num != nums[i-K]:\n                nums[i] = num\n                i += 1\n        return i\n"}]},"largest-rectangle-in-histogram":{id:"84",name:"largest-rectangle-in-histogram",pre:[{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md",code:[{language:"cpp",text:"\nclass Solution {\npublic:\n    int largestRectangleArea(vector<int>& A) {\n        A.push_back(0);\n        int N = A.size(), ans = 0;\n        stack<int> s;\n        for (int i = 0; i < N; ++i) {\n            while (s.size() && A[s.top()] >= A[i]) {\n                int h = A[s.top()];\n                s.pop();\n                int j = s.size() ? s.top() : -1;\n                ans = max(ans, h * (i - j - 1));\n            }\n            s.push(i);\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, ans = len(heights), 0\n        if n != 0:\n            ans = heights[0]\n        for i in range(n):\n            height = heights[i]\n            for j in range(i, n):\n                height = min(height, heights[j])\n                ans = max(ans, (j - i + 1) * height)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r, ans = [-1] * n, [n] * n, 0\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j -= 1\n            l[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j += 1\n            r[i] = j\n        for i in range(n):\n            ans = max(ans, heights[i] * (r[i] - l[i] - 1))\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r, ans = [-1] * n, [n] * n, 0\n\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j = l[j]\n            l[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j = r[j]\n            r[i] = j\n        for i in range(n):\n            ans = max(ans, heights[i] * (r[i] - l[i] - 1))\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights), [0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                ans = max(ans, heights[st.pop(-1)] * (i - st[-1] - 1))\n            st.append(i)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights),[0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                a = heights[st[-1]]\n                st.pop()\n                # \u5982\u679c\u6ca1\u6709\u524d\u9762\u7684\u54e8\u5175\uff0c\u8fd9\u91cc\u7684 st[-1] \u53ef\u80fd\u4f1a\u8d8a\u754c\u3002\n                ans = max(ans, a * (i - 1 - st[-1]))\n            st.append(i)\n        return ans\n"}]},"maximal-rectangle":{id:"85",name:"maximal-rectangle",pre:[{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/85.maximal-rectangle.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/85.maximal-rectangle.md",code:[{language:"py",text:'\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights), [0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                ans = max(ans, heights[st.pop(-1)] * (i - st[-1] - 1))\n            st.append(i)\n\n        return ans\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        m = len(matrix)\n        if m == 0: return 0\n        n = len(matrix[0])\n        heights = [0] * n\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == "0":\n                    heights[j] = 0\n                else:\n                    heights[j] += 1\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n'}]},"partition-list":{id:"86",name:"partition-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386\u5b8c\u6210\u4e4b\u540e\u8bb0\u5f97`currentL1.next=null;`\u5426\u5219\u4f1a\u5185\u5b58\u6ea2\u51fa>\u5982\u679c\u5355\u7eaf\u7684\u904d\u5386\u662f\u4e0d\u9700\u8981\u4e0a\u9762\u64cd\u4f5c\u7684\uff0c\u4f46\u662f\u6211\u4eec\u7684\u904d\u5386\u4f1a\u5bfc\u81f4currentL1.next\u548ccurrentL2.next>\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0d\u662fnull\uff0c\u5982\u679c\u4e0d\u8fd9\u4e48\u64cd\u4f5c\u7684\u8bdd\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u94fe\u8868\u6210\u73af\uff0c\u9020\u6210\u6ea2\u51fa\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/86.partition-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/86.partition-list.md",code:[{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function (head, x) {\n  const dummyHead1 = {\n    next: null,\n  };\n  const dummyHead2 = {\n    next: null,\n  };\n\n  let current = {\n    next: head,\n  };\n  let currentL1 = dummyHead1;\n  let currentL2 = dummyHead2;\n  while (current.next) {\n    current = current.next;\n    if (current.val < x) {\n      currentL1.next = current;\n      currentL1 = current;\n    } else {\n      currentL2.next = current;\n      currentL2 = current;\n    }\n  }\n\n  currentL2.next = null;\n\n  currentL1.next = dummyHead2.next;\n\n  return dummyHead1.next;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        ListNode dummy, geHead, *ltTail = &dummy, *geTail = &geHead;\n        while (head) {\n            auto p = head;\n            head = head->next;\n            if (p->val < x) {\n                ltTail->next = p;\n                ltTail = p;\n            } else {\n                geTail->next = p;\n                geTail = p;\n            }\n        }\n        ltTail->next = geHead.next;\n        geTail->next = NULL;\n        return dummy.next;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def partition(self, head: ListNode, x: int) -> ListNode:\n        """\u5728\u539f\u94fe\u8868\u64cd\u4f5c\uff0c\u601d\u8def\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u901a\u8fc7\u6307\u9488\u8fdb\u884c\u533a\u5206\u800c\u5df2"""\n        # \u5728\u94fe\u8868\u6700\u524d\u9762\u8bbe\u5b9a\u4e00\u4e2a\u521d\u59cbnode\u4f5c\u4e3a\u951a\u70b9\uff0c\u65b9\u4fbf\u8fd4\u56de\u6700\u540e\u7684\u7ed3\u679c\n        first_node = ListNode(0)\n        first_node.next = head\n        # \u8bbe\u8ba1\u4e09\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5c0f\u4e8ex\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u524d\u540e\u5206\u79bb\u70b9\n        # \u4e00\u4e2a\u6307\u5411\u5f53\u524d\u904d\u5386\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        # \u4e00\u4e2a\u6307\u5411\u5f53\u524d\u904d\u5386\u7684\u8282\u70b9\n        sep_node = first_node\n        pre_node = first_node\n        current_node = head\n\n        while current_node is not None:\n            if current_node.val < x:\n                # \u6ce8\u610f\u6709\u53ef\u80fd\u51fa\u73b0\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u5206\u79bb\u8282\u70b9\u7684\u60c5\u51b5\n                if pre_node is sep_node:\n                    pre_node = current_node\n                    sep_node = current_node\n                    current_node = current_node.next\n                else:\n                    # \u8fd9\u6bb5\u6b21\u5e8f\u6bd4\u8f83\u70e7\u8111\n                    pre_node.next = current_node.next\n                    current_node.next = sep_node.next\n                    sep_node.next = current_node\n                    sep_node = current_node\n                    current_node = pre_node.next\n            else:\n                pre_node = current_node\n                current_node = pre_node.next\n\n        return first_node.next\n'}]},"scramble-string":{id:"87",name:"scramble-string",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u5c06\u5176\u62bd\u8c61\u4e3a\u6811\u7684\u5bf9\u6bd4\u95ee\u9898",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/87.scramble-string.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/87.scramble-string.md",code:[{language:"py",text:"\nclass Solution:\n    def flipEquiv(self, root1: TreeNode, root2: TreeNode) -> bool:\n        if not root1 or not root2:\n            return not root1 and not root2\n        if root1.val != root2.val:\n            return False\n        # \u4e0d\u7ffb\u8f6c\n        if self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right):\n            return True\n        # \u7ffb\u8f6c\n        if self.flipEquiv(root1.left, root2.right) and self.flipEquiv(root1.right, root2.left):\n            return True\n        # \u4e0d\u7ba1\u7ffb\u8f6c\u8fd8\u662f\u4e0d\u7ffb\u8f6c\u90fd\u4e0d\u884c\uff0c\u76f4\u63a5\u8fd4\u56de False\n        return False\n"},{language:"py",text:"\n\nclass Solution:\n    @lru_cache(None)\n    def isScramble(self, s1: str, s2: str) -> bool:\n        if s1 == s2:\n            return True\n        # \u526a\u679d\n        if collections.Counter(s1) != collections.Counter(s2):\n            return False\n        # \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u6839\u8282\u70b9\n        for i in range(1, len(s1)):\n            # ----|-\n            # -|----\n            # \u4e0d\u8fdb\u884c\u7ffb\u8f6c\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            # \u8fdb\u884c\u7ffb\u8f6c\n            if self.isScramble(s1[i:], s2[:-i]) and self.isScramble(s1[:i], s2[-i:]):\n                return True\n        # \u4e0d\u7ba1\u7ffb\u8f6c\u8fd8\u662f\u4e0d\u7ffb\u8f6c\u90fd\u4e0d\u884c\uff0c\u76f4\u63a5\u8fd4\u56de False\n        return False\n\n\n"}]},"merge-sorted-array":{id:"88",name:"merge-sorted-array",pre:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"}],keyPoints:[{text:"\u4ece\u540e\u5f80\u524d\u6bd4\u8f83\uff0c\u5e76\u4ece\u540e\u5f80\u524d\u63d2\u5165\uff0c\u8fd9\u6837\u53ef\u907f\u514d\u5199\u6307\u9488\u5f71\u54cd\uff0c\u540c\u65f6\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230$O(1)$",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"loomberg"},{name:"facebook"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/88.merge-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/88.merge-sorted-array.md",code:[{language:"java",text:"\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i=m-1, j=n-1, k=m+n-1;\n        // \u5408\u5e76\n        while(i>=0 && j>=0)\n        {\n            if(nums1[i] > nums2[j])\n            {\n                nums1[k--] = nums1[i--];\n            }\n            else\n            {\n                nums1[k--] = nums2[j--];\n            }\n        }\n        // \u5408\u5e76\u5269\u4f59\u7684nums2\n        while(j>=0)\n        {\n            nums1[k--] = nums2[j--];\n        }\n    }\n}\n"},{language:"js",text:"\n// \u8fd9\u79cd\u89e3\u6cd5\u8fdem\u90fd\u7528\u4e0d\u5230\n// \u8fd9\u663e\u7136\u4e0d\u662f\u51fa\u9898\u4eba\u7684\u610f\u601d\nif (n === 0) return;\nlet current2 = 0;\nfor (let i = nums1.length - 1; i >= nums1.length - n; i--) {\n  nums1[i] = nums2[current2++];\n}\nnums1.sort((a, b) => a - b); // \u5f53\u7136\u4f60\u53ef\u4ee5\u81ea\u5df1\u5199\u6392\u5e8f\uff0c\u8fd9\u91cc\u61d2\u5f97\u5199\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u504f\u79bb\u4e86\u9898\u76ee\u672c\u8eab\n"},{language:"js",text:"\n// \u5c06nums1 \u548c nums2 \u5408\u5e76\nfunction merge(nums1, nums2) {\n  let ret = [];\n  while (nums1.length || nums2.length) {\n    // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u8d58\u4f59\n    if (nums1.length === 0) {\n      ret.push(nums2.shift());\n      continue;\n    }\n\n    if (nums2.length === 0) {\n      ret.push(nums1.shift());\n      continue;\n    }\n    const a = nums1[0];\n    const b = nums2[0];\n    if (a > b) {\n      ret.push(nums2.shift());\n    } else {\n      ret.push(nums1.shift());\n    }\n  }\n  return ret;\n}\n"},{language:"js",text:"\nvar merge = function (nums1, m, nums2, n) {\n  // \u8bbe\u7f6e\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u521d\u59cb\u5316\u6307\u5411nums1\u7684\u672b\u5c3e\uff08\u6839\u636e#62\uff0c\u5e94\u8be5\u662findex\u4e3a m+n-1 \u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3anums1\u7684\u957f\u5ea6\u6709\u53ef\u80fd\u66f4\u957f\uff09\n  // \u7136\u540e\u4e0d\u65ad\u5de6\u79fb\u6307\u9488\u66f4\u65b0\u5143\u7d20\n  let current = m + n - 1;\n\n  while (current >= 0) {\n    // \u6ca1\u5fc5\u8981\u7ee7\u7eed\u4e86\n    if (n === 0) return;\n\n    // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u8d58\u4f59\n    if (m < 1) {\n      nums1[current--] = nums2[--n];\n      continue;\n    }\n\n    if (n < 1) {\n      nums1[current--] = nums1[--m];\n      continue;\n    }\n    // \u53d6\u5927\u7684\u586b\u5145 nums1\u7684\u672b\u5c3e\n    // \u7136\u540e\u66f4\u65b0 m \u6216\u8005 n\n    if (nums1[m - 1] > nums2[n - 1]) {\n      nums1[current--] = nums1[--m];\n    } else {\n      nums1[current--] = nums2[--n];\n    }\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        pos = m + n - 1\n        while m > 0 and n > 0:\n            if nums1[m - 1] < nums2[n - 1]:\n                nums1[pos] = nums2[n - 1]\n                n -= 1\n            else:\n                nums1[pos] = nums1[m - 1]\n                m -= 1\n            pos -= 1\n        while n > 0:\n            nums1[pos] = nums2[n - 1]\n            n -= 1\n            pos -= 1\n\n'}]},"subsets-ii":{id:"90",name:"subsets-ii",pre:[{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/90.subsets-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/90.subsets-ii.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums, start) {\n  list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    // \u548c78.subsets\u7684\u533a\u522b\u5728\u4e8e\u8fd9\u9053\u9898nums\u53ef\u4ee5\u6709\u91cd\u590d\n    // \u56e0\u6b64\u9700\u8981\u8fc7\u6ee4\u8fd9\u79cd\u60c5\u51b5\n    if (i > start && nums[i] === nums[i - 1]) continue;\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, i + 1);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function (nums) {\n  const list = [];\n  backtrack(\n    list,\n    [],\n    nums.sort((a, b) => a - b),\n    0,\n    []\n  );\n  return list;\n};\n"}]},"decode-ways":{id:"91",name:"decode-ways",pre:[{text:"\u722c\u697c\u68af\u95ee\u9898",link:null,color:"geekblue"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u722c\u697c\u68af\u95ee\u9898\uff08\u6211\u628a\u8fd9\u79cd\u9898\u76ee\u7edf\u79f0\u4e3a\u722c\u697c\u68af\u95ee\u9898\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/91.decode-ways.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/91.decode-ways.md",code:[{language:"js",text:'\n/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function (s) {\n  if (s == null || s.length == 0) {\n    return 0;\n  }\n  const dp = Array(s.length + 1).fill(0);\n  dp[0] = 1;\n  dp[1] = s[0] !== "0" ? 1 : 0;\n  for (let i = 2; i < s.length + 1; i++) {\n    const one = +s.slice(i - 1, i);\n    const two = +s.slice(i - 2, i);\n\n    if (two >= 10 && two <= 26) {\n      dp[i] = dp[i - 2];\n    }\n\n    if (one >= 1 && one <= 9) {\n      dp[i] += dp[i - 1];\n    }\n  }\n\n  return dp[dp.length - 1];\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n  int numDecodings(string s) {\n    int pre2 = 0, pre1 = 1;\n    for (int i = 0; i < s.size() && pre1; ++i) {\n      int cur = 0;\n      if (s[i] != '0') cur += pre1;\n      if (i != 0 && s[i - 1] != '0' && (s[i - 1] - '0') * 10 + s[i] - '0' <= 26)\n        cur += pre2;\n      pre2 = pre1;\n      pre1 = cur;\n    }\n    return pre1;\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        @lru_cache(None)\n        def dp(start):\n            if start == len(s):\n                return 1\n            if start > len(s):\n                return 0\n            if s[start] != "0":\n                if s[start : start + 2] <= "26":\n                    return dp(start + 1) + dp(start + 2)\n                return dp(start + 1)\n            return 0\n\n        return dp(0)\n'}]},"reverse-linked-list-ii":{id:"92",name:"reverse-linked-list-ii",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u56db\u70b9\u6cd5",link:null,color:"blue"},{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u8003\u8651\u7279\u6b8a\u60c5\u51b5m\u662f1\u6216\u8005n\u662f\u94fe\u8868\u957f\u5ea6\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u7528\u56db\u4e2a\u53d8\u91cf\u8bb0\u5f55\u7279\u6b8a\u8282\u70b9\uff0c\u7136\u540e\u64cd\u4f5c\u8fd9\u56db\u4e2a\u8282\u70b9\u4f7f\u4e4b\u6309\u7167\u4e00\u5b9a\u65b9\u5f0f\u8fde\u63a5\u5373\u53ef\u3002",link:null,color:"blue"},{text:"\u6ce8\u610f\u66f4\u65b0current\u548cpre\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u6709\u53ef\u80fd\u51fa\u73b0\u6ea2\u51fa",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/92.reverse-linked-list-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/92.reverse-linked-list-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=92 lang=javascript\n *\n * [92] Reverse Linked List II\n *\n * https://leetcode.com/problems/reverse-linked-list-ii/description/\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} m\n * @param {number} n\n * @return {ListNode}\n */\nvar reverseBetween = function (head, m, n) {\n  // \u865a\u62df\u8282\u70b9\uff0c\u7b80\u5316\u64cd\u4f5c\n  const dummyHead = {\n    next: head,\n  };\n\n  let cur = dummyHead.next; // \u5f53\u524d\u904d\u5386\u7684\u8282\u70b9\n  let pre = cur; // \u56e0\u4e3a\u8981\u53cd\u8f6c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8bb0\u4f4f\u524d\u4e00\u4e2a\u8282\u70b9\n  let index = 0; // \u94fe\u8868\u7d22\u5f15\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u662f\u7279\u6b8a\u4f4d\u7f6e\uff08\u5934\u5c3e\u4f4d\u7f6e\uff09\n\n  // \u4e0a\u9762\u63d0\u5230\u7684\u56db\u4e2a\u7279\u6b8a\u8282\u70b9\n  let p1 = (p2 = p3 = p4 = null);\n\n  while (cur) {\n    const next = cur.next;\n    index++;\n\n    // \u5bf9 (m - n) \u8303\u56f4\u5185\u7684\u8282\u70b9\u8fdb\u884c\u53cd\u8f6c\n    if (index > m && index <= n) {\n      cur.next = pre;\n    }\n\n    // \u4e0b\u9762\u56db\u4e2aif\u90fd\u662f\u8fb9\u754c, \u7528\u4e8e\u66f4\u65b0\u56db\u4e2a\u7279\u6b8a\u8282\u70b9\u7684\u503c\n    if (index === m - 1) {\n      p1 = cur;\n    }\n    if (index === m) {\n      p2 = cur;\n    }\n\n    if (index === n) {\n      p3 = cur;\n    }\n\n    if (index === n + 1) {\n      p4 = cur;\n    }\n\n    pre = cur;\n\n    cur = next;\n  }\n\n  // \u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u8d77\u6765\n  (p1 || dummyHead).next = p3; // \u7279\u6b8a\u60c5\u51b5\u9700\u8981\u8003\u8651\n  p2.next = p4;\n\n  return dummyHead.next;\n};\n"},{language:"py",text:"\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n        pre = None\n        cur = head\n        i = 0\n        p1 = p2 = p3 = p4 = None\n        # \u4e00\u5768\u903b\u8f91\n        if p1:\n            p1.next = p3\n        else:\n            dummy.next = p3\n        if p2:\n            p2.next = p4\n        return head\n"},{language:"py",text:"\nclass Solution:\n   def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n       pre = None\n       cur = head\n       i = 0\n       p1 = p2 = p3 = p4 = None\n       dummy = ListNode(0)\n       dummy.next = head\n       # \u4e00\u5768\u903b\u8f91\n       if p1:\n           p1.next = p3\n       else:\n           dummy.next = p3\n       if p2:\n           p2.next = p4\n\n       return dummy.next\n"},{language:"py",text:"\n    while cur:\n           i += 1\n           if i == m - 1:\n               p1 = cur\n           next = cur.next\n           if m < i <= n:\n               cur.next = pre\n\n           if i == m:\n               p2 = cur\n               p2.next = None\n\n           if i == n:\n               p3 = cur\n\n           if i == n + 1:\n               p4 = cur\n\n           pre = cur\n           cur = next\n"}]},"binary-tree-inorder-traversal":{id:"94",name:"binary-tree-inorder-traversal",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`left.concat(mid).concat(right)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> res = new LinkedList<>();\n    public List<Integer> inorderTraversal(TreeNode root) {\n        inorder(root);\n        return res;\n    }\n\n    public void inorder (TreeNode root) {\n        if (root == null) return;\n\n        inorder(root.left);\n\n        res.add(root.val);\n\n        inorder(root.right);\n    }\n}\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<> ();\n        Stack<TreeNode> stack = new Stack<> ();\n\n        while (root != null || !stack.isEmpty()) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            res.add(root.val);\n            root = root.right;\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  // 1. Recursive solution\n  // if (!root) return [];\n  // const left = root.left ? inorderTraversal(root.left) : [];\n  // const right = root.right ? inorderTraversal(root.right) : [];\n  // return left.concat([root.val]).concat(right);\n\n  // 2. iterative solutuon\n  if (!root) return [];\n  const stack = [root];\n  const ret = [];\n  let left = root.left;\n\n  let item = null; // stack \u4e2d\u5f39\u51fa\u7684\u5f53\u524d\u9879\n\n  while (left) {\n    stack.push(left);\n    left = left.left;\n  }\n\n  while ((item = stack.pop())) {\n    ret.push(item.val);\n    let t = item.right;\n\n    while (t) {\n      stack.push(t);\n      t = t.left;\n    }\n  }\n\n  return ret;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<TreeNode*> s;\n        vector<int> v;\n        while (root != NULL || !s.empty()) {\n            for (; root != NULL; root = root->left)\n                s.push_back(root);\n            v.push_back(s.back()->val);\n            root = s.back()->right;\n            s.pop_back();\n        }\n        return v;\n    }\n};\n"}]},"unique-binary-search-trees-ii":{id:"95",name:"unique-binary-search-trees-ii",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:null,color:"geekblue"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u6cbb\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md",code:[{language:"cpp",text:"\nclass Solution {\nprivate:\n    vector<TreeNode*> generateTrees(int first, int last) {\n        if (first > last) return { NULL };\n        vector<TreeNode*> v;\n        for (int i = first; i <= last; ++i) {\n            auto lefts = generateTrees(first, i - 1);\n            auto rights = generateTrees(i + 1, last);\n            for (auto left : lefts) {\n                for (auto right : rights) {\n                    v.push_back(new TreeNode(i));\n                    v.back()->left = left;\n                    v.back()->right = right;\n                }\n            }\n        }\n        return v;\n    }\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        if (n <= 0) return {};\n        return generateTrees(1, n);\n    }\n};\n"}]},"unique-binary-search-trees":{id:"96",name:"unique-binary-search-trees",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:null,color:"geekblue"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u6cbb\u6cd5",link:null,color:"blue"},{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"blue"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/96.unique-binary-search-trees.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/96.unique-binary-search-trees.md",code:[{language:"cpp",text:"\nclass Solution {\n    vector<int> visited;\n    int dp(int n) {\n        if (visited[n]) return visited[n];\n        int ans = 0;\n        for (int i = 0; i < n; ++i) ans += dp(i) * dp(n - i - 1);\n        return visited[n] = ans;\n    }\npublic:\n    int numTrees(int n) {\n        visited.assign(n + 1, 0);\n        visited[0] = 1;\n        return dp(n);\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        if n <= 1:\n            return 1\n        res = 0\n        for i in range(1, n + 1):\n            res += self.numTrees(i - 1) * self.numTrees(n - i)\n        return res\n"}]},"validate-binary-search-tree":{id:"98",name:"validate-binary-search-tree",pre:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09",link:null,color:"blue"},{text:"\u4e2d\u5e8f\u904d\u5386\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff08BST\uff09\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4",link:null,color:"blue"},{text:"\u5982\u679c\u4e00\u4e2a\u6811\u904d\u5386\u7684\u7ed3\u679c\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u90a3\u4e48\u4ed6\u4e5f\u662f\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811(BST)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/98.validate-binary-search-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/98.validate-binary-search-tree.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Stack<Integer> stack = new Stack<> ();\n        TreeNode previous = null;\n\n        while (root != null || !stack.isEmpty()) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            if (previous != null && root.val <= previous.val ) return false;\n            previous = root;\n            root = root.right;\n        }\n        return true;\n    }\n}\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return helper(root, null, null);\n    }\n\n    private boolean helper(TreeNode root, Integer lower, Integer higher) {\n        if (root == null) return true;\n\n        if (lower != null && root.val <= lower) return false;\n        if (higher != null && root.val >= higher) return false;\n\n        if (!helper(root.left, lower, root.val)) return false;\n        if (!helper(root.right, root.val, higher)) return false;\n\n        return true;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=98 lang=javascript\n *\n * [98] Validate Binary Search Tree\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  if (root === null) return true;\n  if (root.left === null && root.right === null) return true;\n  const stack = [root];\n  let cur = root;\n  let pre = null;\n\n  function insertAllLefts(cur) {\n    while (cur && cur.left) {\n      const l = cur.left;\n      stack.push(l);\n      cur = l;\n    }\n  }\n  insertAllLefts(cur);\n\n  while ((cur = stack.pop())) {\n    if (pre && cur.val <= pre.val) return false;\n    const r = cur.right;\n\n    if (r) {\n      stack.push(r);\n      insertAllLefts(r);\n    }\n    pre = cur;\n  }\n\n  return true;\n};\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  if (!root) return true;\n  return valid(root);\n};\n\nfunction valid(root, min = -Infinity, max = Infinity) {\n  if (!root) return true;\n  const val = root.val;\n  if (val <= min) return false;\n  if (val >= max) return false;\n  return valid(root.left, min, val) && valid(root.right, val, max);\n}\n"},{language:"cpp",text:"\n// \u9012\u5f52\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        TreeNode* prev = nullptr;\n        return validateBstInorder(root, prev);\n    }\n\nprivate:\n    bool validateBstInorder(TreeNode* root, TreeNode*& prev) {\n        if (root == nullptr) return true;\n        if (!validateBstInorder(root->left, prev)) return false;\n        if (prev != nullptr && prev->val >= root->val) return false;\n        prev = root;\n        return validateBstInorder(root->right, prev);\n    }\n};\n\n// \u8fed\u4ee3\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        auto s = vector<TreeNode*>();\n        TreeNode* prev = nullptr;\n        while (root != nullptr || !s.empty()) {\n            while (root != nullptr) {\n                s.push_back(root);\n                root = root->left;\n            }\n            root = s.back();\n            s.pop_back();\n            if (prev != nullptr && prev->val >= root->val) return false;\n            prev = root;\n            root = root->right;\n        }\n        return true;\n    }\n};\n"}]},"same-tree":{id:"100",name:"same-tree",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u5c42\u5e8f\u904d\u5386",link:null,color:"geekblue"},{text:"\u524d\u4e2d\u5e8f\u786e\u5b9a\u4e00\u68f5\u6811",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/100.same-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/100.same-tree.md",code:[{language:"js",text:"\nvar isSameTree = function (p, q) {\n  if (!p || !q) {\n    return !p && !q;\n  }\n  return (\n    p.val === q.val &&\n    isSameTree(p.left, q.left) &&\n    isSameTree(p.right, q.right)\n  );\n};\n"},{language:"js",text:"\nvar isSameTree = function (p, q) {\n  let curLevelA = [p];\n  let curLevelB = [q];\n\n  while (curLevelA.length && curLevelB.length) {\n    let nextLevelA = [];\n    let nextLevelB = [];\n    const isOK = isSameCurLevel(curLevelA, curLevelB, nextLevelA, nextLevelB);\n    if (isOK) {\n      curLevelA = nextLevelA;\n      curLevelB = nextLevelB;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction isSameCurLevel(curLevelA, curLevelB, nextLevelA, nextLevelB) {\n  if (curLevelA.length !== curLevelB.length) {\n    return false;\n  }\n  for (let i = 0; i < curLevelA.length; i++) {\n    if (!isSameNode(curLevelA[i], curLevelB[i])) {\n      return false;\n    }\n    curLevelA[i] && nextLevelA.push(curLevelA[i].left, curLevelA[i].right);\n    curLevelB[i] && nextLevelB.push(curLevelB[i].left, curLevelB[i].right);\n  }\n  return true;\n}\n\nfunction isSameNode(nodeA, nodeB) {\n  if (!nodeA || !nodeB) {\n    return nodeA === nodeB;\n  }\n  return nodeA.val === nodeB.val;\n  // return nodeA === nodeB || (nodeA && nodeB && nodeA.val === nodeB.val);\n}\n"},{language:"js",text:'\nvar isSameTree = function (p, q) {\n  const preorderP = preorder(p, []);\n  const preorderQ = preorder(q, []);\n  const inorderP = inorder(p, []);\n  const inorderQ = inorder(q, []);\n  return (\n    preorderP.join("") === preorderQ.join("") &&\n    inorderP.join("") === inorderQ.join("")\n  );\n};\n\nfunction preorder(root, arr) {\n  if (root === null) {\n    arr.push(" ");\n    return arr;\n  }\n  arr.push(root.val);\n  preorder(root.left, arr);\n  preorder(root.right, arr);\n  return arr;\n}\n\nfunction inorder(root, arr) {\n  if (root === null) {\n    arr.push(" ");\n    return arr;\n  }\n  inorder(root.left, arr);\n  arr.push(root.val);\n  inorder(root.right, arr);\n  return arr;\n}\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        return (!p && !q) || (p && q && p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));\n    }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        return (!p && !q) || (p && q && p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));\n    }\n};\n"}]},"symmetric-tree":{id:"101",name:"symmetric-tree",pre:[{text:"\u4e8c\u53c9\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/101.symmetric-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/101.symmetric-tree.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root == null)\n        {\n            return true;\n        }\n        else{\n            return recur(root.left, root.right);\n        }\n        // return root == null ? true : recur(root.left, root.right);\n    }\n\n    public boolean recur(TreeNode l, TreeNode r)\n    {\n        if(l == null && r==null)\n        {\n            return true;\n        }\n        // \u53ea\u5b58\u5728\u4e00\u4e2a\u5b50\u8282\u70b9 \u6216\u8005\u5de6\u53f3\u4e0d\u76f8\u7b49\n        if(l==null || r==null || l.val != r.val)\n        {\n            return false;\n        }\n\n        return recur(l.left, r.right) && recur(l.right, r.left);\n    }\n}\n"},{language:"cpp",text:"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        return root==NULL?true:recur(root->left, root->right);\n    }\n\n    bool recur(TreeNode* l, TreeNode* r)\n    {\n        if(l == NULL && r==NULL)\n        {\n            return true;\n        }\n        // \u53ea\u5b58\u5728\u4e00\u4e2a\u5b50\u8282\u70b9 \u6216\u8005\u5de6\u53f3\u4e0d\u76f8\u7b49\n        if(l==NULL || r==NULL || l->val != r->val)\n        {\n            return false;\n        }\n\n        return recur(l->left, r->right) && recur(l->right, r->left);\n    }\n};\n"},{language:"py",text:"\nseen = dict()\nfor i, num in enumerate(nums):\n    seen[i] = num\nfor i, num in enumerate(nums):\n    if  seen[len(nums) - 1 - i] != num:\n      return False\nreturn True\n"},{language:"py",text:"\nl = 0\nr = len(nums) - 1\n\nwhile l < r:\n   if nums[l] != nums[r]: return False\n   l += 1\n   r -= 1\nreturn True\n\n"},{language:"py",text:"\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 == root2 == None: return True\n            if not root1 or not root2: return False\n            if root1.val != root2.val: return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n        if not root: return True\n        return dfs(root.left, root.right)\n"}]},"binary-tree-level-order-traversal":{id:"102",name:"binary-tree-level-order-traversal",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"},{text:"\u6ce8\u610f\u585e\u5165null\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u65e0\u9650\u5faa\u73af",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (!root) return [];\n  const items = []; // \u5b58\u653e\u6240\u6709\u8282\u70b9\n  const queue = [root, null]; // null \u7b80\u5316\u64cd\u4f5c\n  let levelNodes = []; // \u5b58\u653e\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\n\n  while (queue.length > 0) {\n    const t = queue.shift();\n\n    if (t) {\n      levelNodes.push(t.val);\n      if (t.left) {\n        queue.push(t.left);\n      }\n      if (t.right) {\n        queue.push(t.right);\n      }\n    } else {\n      // \u4e00\u5c42\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\n      items.push(levelNodes);\n      levelNodes = [];\n      if (queue.length > 0) {\n        queue.push(null);\n      }\n    }\n  }\n\n  return items;\n};\n"},{language:"py",text:'\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        """\u9012\u5f52\u6cd5"""\n        if root is None:\n            return []\n\n        result = []\n\n        def add_to_result(level, node):\n            """\u9012\u5f52\u51fd\u6570\n            :param level int \u5f53\u524d\u5728\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\n            :param node TreeNode \u5f53\u524d\u8282\u70b9\n            """\n            if level > len(result) - 1:\n                result.append([])\n\n            result[level].append(node.val)\n            if node.left:\n                add_to_result(level+1, node.left)\n            if node.right:\n                add_to_result(level+1, node.right)\n\n        add_to_result(0, root)\n        return result\n'}]},"binary-tree-zigzag-level-order-traversal":{id:"103",name:"binary-tree-zigzag-level-order-traversal",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n  if (!root) return [];   \n  const items = [];\n  let isOdd = true;\n  let levelNodes = [];\n  \n  const queue = [root, null];\n\n\n  while(queue.length > 0) {\n      const t = queue.shift();\n\n      if (t) {\n          levelNodes.push(t.val)\n          if (t.left) {\n            queue.push(t.left)\n          }\n          if (t.right) {\n            queue.push(t.right)\n          }\n      } else {\n        if (!isOdd) {\n          levelNodes = levelNodes.reverse();\n        }\n        items.push(levelNodes)\n        levelNodes = [];\n        isOdd = !isOdd;\n        if (queue.length > 0) {\n            queue.push(null);\n        }\n      }\n  }\n\n  return items\n    \n};\n"}]},"maximum-depth-of-binary-tree":{id:"104",name:"maximum-depth-of-binary-tree",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42\uff0c\u6216\u8005\u5728\u5bf9\u6bcf\u5c42\u8fdb\u884c\u8fed\u4ee3\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u961f\u5217\u5143\u7d20\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u5c42\u6240\u542b\u5143\u7d20\u4e2a\u6570\uff09",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"apple"},{name:"linkedin"},{name:"uber"},{name:"yahoo"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if(root == null)\n        {\n            return 0;\n        }\n        // \u961f\u5217\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        int res = 0;\n        // \u6309\u5c42\u6269\u5c55\n        while(!queue.isEmpty())\n        {\n            // \u62ff\u51fa\u8be5\u5c42\u6240\u6709\u8282\u70b9\uff0c\u5e76\u538b\u5165\u5b50\u8282\u70b9\n            int size = queue.size();\n            while(size > 0)\n            {\n                TreeNode node = queue.poll();\n\n                if(node.left != null)\n                {\n                    queue.offer(node.left);\n                }\n                if(node.right != null)\n                {\n                    queue.offer(node.right);\n                }\n                size-=1;\n            }\n            // \u7edf\u8ba1\u5c42\u6570\n            res +=1;\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\nvar maxDepth = function (root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n  return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=104 lang=javascript\n *\n * [104] Maximum Depth of Binary Tree\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function (root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n\n  // \u5c42\u6b21\u904d\u5386 BFS\n  let cur = root;\n  const queue = [root, null];\n  let depth = 1;\n\n  while ((cur = queue.shift()) !== undefined) {\n    if (cur === null) {\n      // \u6ce8\u610f\u26a0\ufe0f\uff1a \u4e0d\u5904\u7406\u4f1a\u65e0\u9650\u5faa\u73af\uff0c\u8fdb\u800c\u5806\u6808\u6ea2\u51fa\n      if (queue.length === 0) return depth;\n      depth++;\n      queue.push(null);\n      continue;\n    }\n    const l = cur.left;\n    const r = cur.right;\n\n    if (l) queue.push(l);\n    if (r) queue.push(r);\n  }\n\n  return depth;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if not root: return 0\n        q, depth = [root, None], 1\n        while q:\n            node = q.pop(0)\n            if node:\n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n            elif q:\n                q.append(None)\n                depth += 1\n        return depth\n"}]},"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal":{id:"105",name:"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md",code:[{language:"java",text:"\npreorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  public TreeNode buildTree(int[] preorder, int[] inorder) {\n    if (preorder.length != inorder.length) return null;\n    \n    HashMap<Integer, Integer> map = new HashMap<> ();\n\n    for (int i=0; i<inorder.length; i++) {\n      map.put(inorder[i], i);\n    }\n\n    return helper(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, map);\n  }\n\n  public TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, HashMap<Integer, Integer> map) {\n    if (preStart>preEnd || inStart>inEnd) return null;\n    \n    TreeNode root = new TreeNode(preorder[prestart]);\n    int inRoot = map.get(preorder[preStart]);\n    int leftChldLen = inRoot - inStart;\n\n    root.left = helper(preorder, preStart+1, preStart+leftChldLen, inorder, inStart, inRoot-1, map);\n    root.left = helper(preorder, preStart+leftChldLen+1, preEnd, inorder, inRoot+1, inEnd, map);\n\n    return root;\n  }\n}\n"}]},"convert-sorted-array-to-binary-search-tree":{id:"108",name:"convert-sorted-array-to-binary-search-tree",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u5e73\u8861\u4e8c\u53c9\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u627e\u4e2d\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md",code:[{language:"java",text:"\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return dfs(nums, 0, nums.length - 1);\n    }\n\n    private TreeNode dfs(int[] nums, int lo, int hi) {\n        if (lo > hi) {\n            return null;\n        }\n        int mid = lo + (hi - lo) / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = dfs(nums, lo, mid - 1);\n        root.right = dfs(nums, mid + 1, hi);\n        return root;\n    }\n}\n\n"},{language:"js",text:"\nvar sortedArrayToBST = function (nums) {\n  // \u7531\u4e8e\u6570\u7ec4\u662f\u6392\u5e8f\u597d\u7684\uff0c\u56e0\u6b64\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u4e00\u534a\u662f\u5de6\u5b50\u6811\uff0c\u53e6\u4e00\u534a\u662f\u53f3\u5b50\u6811\n  // \u7136\u540e\u8fd0\u7528\u201c\u6811\u7684\u9012\u5f52\u6027\u8d28\u201d\u9012\u5f52\u5b8c\u6210\u64cd\u4f5c\u5373\u53ef\u3002\n  if (nums.length === 0) return null;\n  const mid = nums.length >> 1;\n  const root = new TreeNode(nums[mid]);\n\n  root.left = sortedArrayToBST(nums.slice(0, mid));\n  root.right = sortedArrayToBST(nums.slice(mid + 1));\n  return root;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        return reBuild(nums, 0, nums.size()-1);\n    }\n\n    TreeNode* reBuild(vector<int>& nums, int left, int right)\n    {\n        // \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e2d\u5e8f\u904d\u5386\u4e3a\u7a7a\n        if(left > right)\n        {\n            return NULL;\n        }\n        // \u5efa\u7acb\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\n        int mid = (left+right)/2;\n        TreeNode * root = new TreeNode(nums[mid]);\n\n        // \u5de6\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root->left = reBuild(nums, left, mid-1);\n        // \u53f3\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root->right = reBuild(nums, mid+1, right);\n        // \u8fd4\u56de\u6839\u8282\u70b9\n        return root;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        if not nums: return None\n        mid = (len(nums) - 1) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root\n"},{language:"py",text:'\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: TreeNode\n        """\n        return self.reBuild(nums, 0, len(nums)-1)\n\n    def reBuild(self, nums, left, right):\n         # \u7ec8\u6b62\u6761\u4ef6\uff1a\n        if left > right:\n            return\n        # \u5efa\u7acb\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\n        mid = (left + right)//2\n        root = TreeNode(nums[mid])\n        # \u5de6\u53f3\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root.left = self.reBuild(nums, left, mid-1)\n        root.right = self.reBuild(nums, mid+1, right)\n\n        return root\n'}]},"Convert-Sorted-List-to-Binary-Search-Tree":{id:"109",name:"Convert-Sorted-List-to-Binary-Search-Tree",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:null,color:"geekblue"},{text:"> \u5bf9\u4e8e\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u5f53\u524d\u8282\u70b9\u7684\u503c\u5fc5\u7136\u5927\u4e8e\u6240\u6709\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c",link:null,color:"magenta"},{text:"> \u540c\u7406,\u5f53\u524d\u8282\u70b9\u7684\u503c\u5fc5\u7136\u5c0f\u4e8e\u6240\u6709\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/109.Convert-Sorted-List-to-Binary-Search-Tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/109.Convert-Sorted-List-to-Binary-Search-Tree.md",code:[{language:"java",text:"\nclass Solution {\n public TreeNode sortedListToBST(ListNode head) {\n     if(head == null) return null;\n     return run(head,null);\n }\n private TreeNode run(ListNode head, ListNode tail){\n     if(head == tail) return null;\n     ListNode fast = head, slow = head;\n     while(fast != tail && fast.next != tail){\n         fast = fast.next.next;\n         slow = slow.next;\n     }\n     TreeNode root = new TreeNode(slow.val);\n     root.left = run(head, slow);\n     root.right = run(slow.next, tail);\n     return root;\n }\n}\n"},{language:"js",text:"\nvar sortedListToBST = function (head) {\n  if (!head) return null;\n  return run(head, null);\n};\n\nfunction run(head, tail) {\n  if (head == tail) return null;\n  let fast = head;\n  let slow = head;\n  while (fast != tail && fast.next != tail) {\n    fast = fast.next.next;\n    slow = slow.next;\n  }\n  let root = new TreeNode(slow.val);\n  root.left = run(head, slow);\n  root.right = run(slow.next, tail);\n  return root;\n}\n"},{language:"js",text:"\nvar sortedListToBST = function (head) {\n  let res = [];\n  while (head) {\n    res.push(head.val);\n    head = head.next;\n  }\n  return run(res);\n};\n\nfunction run(res) {\n  if (res.length == 0) return null;\n  let mid = parseInt(res.length / 2);\n  let root = new TreeNode(res[mid]);\n  root.left = mid > 0 ? run(res.slice(0, mid)) : null;\n  root.right = mid >= res.length - 1 ? null : run(res.slice(mid + 1));\n  return root;\n}\n"}]},"path-sum-ii":{id:"113",name:"path-sum-ii",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/113.path-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/113.path-sum-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=113 lang=javascript\n *\n * [113] Path Sum II\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction backtrack(root, sum, res, tempList) {\n  if (root === null) return;\n  if (root.left === null && root.right === null && sum === root.val)\n    return res.push([...tempList, root.val]);\n\n  tempList.push(root.val);\n  backtrack(root.left, sum - root.val, res, tempList);\n\n  backtrack(root.right, sum - root.val, res, tempList);\n  tempList.pop();\n}\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function (root, sum) {\n  if (root === null) return [];\n  const res = [];\n  backtrack(root, sum, res, []);\n  return res;\n};\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        if not root:\n            return []\n\n        result = []\n\n        def trace_node(pre_list, left_sum, node):\n            new_list = pre_list.copy()\n            new_list.append(node.val)\n            if not node.left and not node.right:\n                # \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u548c\u4e0a\u9762\u7684\u5408\u5e76\uff0c\u4f46\u5206\u5f00\u5199\u4f1a\u5feb\u51e0\u6beb\u79d2\uff0c\u53ef\u4ee5\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5224\u65ad\n                if left_sum == node.val:\n                    result.append(new_list)\n            else:\n                if node.left:\n                    trace_node(new_list, left_sum-node.val, node.left)\n                if node.right:\n                    trace_node(new_list, left_sum-node.val, node.right)\n\n        trace_node([], sum, root)\n        return result\n"}]},"best-time-to-buy-and-sell-stock":{id:"121",name:"best-time-to-buy-and-sell-stock",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u7c7b\u9898\u53ea\u8981\u4f60\u5728\u5fc3\u4e2d\uff08\u6216\u8005\u522b\u7684\u5730\u65b9\uff09\u753b\u51fa\u4e0a\u9762\u8fd9\u79cd\u56fe\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"amazon"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"},{name:"uber"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md",code:[{language:"java",text:"\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int minprice = Integer.MAX_VALUE;\n        int maxprofit = 0;\n        for (int price: prices) {\n            maxprofit = Math.max(maxprofit, price - minprice);\n             minprice = Math.min(price, minprice);\n        }\n        return maxprofit;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function (prices) {\n  let min = prices[0];\n  let profit = 0;\n  // 7 1 5 3 6 4\n  for (let i = 1; i < prices.length; i++) {\n    if (prices[i] > prices[i - 1]) {\n      profit = Math.max(profit, prices[i] - min);\n    } else {\n      min = Math.min(min, prices[i]);\n    }\n  }\n\n  return profit;\n};\n"},{language:"cpp",text:"\n/**\n * \u7cfb\u7edf\u4e0aC++\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u8f93\u5165\u6709[]\uff0c\u56e0\u6b64\u9700\u8981\u52a0\u4e00\u4e2a\u5224\u65ad\n */\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) return 0;\n        auto min = prices[0];\n        auto profit = 0;\n        for (auto i = 1; i < prices.size(); ++i) {\n            if (prices[i] > prices[i -1]) {\n                profit = max(profit, prices[i] - min);\n            } else {\n                min = std::min(min, prices[i]);;\n            }\n        }\n        return profit;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxProfit(self, prices: 'List[int]') -> int:\n        if not prices: return 0\n\n        min_price = float('inf')\n        max_profit = 0\n\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif max_profit < price - min_price:\n                max_profit = price - min_price\n        return max_profit\n"}]},"best-time-to-buy-and-sell-stock-ii":{id:"122",name:"best-time-to-buy-and-sell-stock-ii",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u7c7b\u9898\u53ea\u8981\u4f60\u5728\u5fc3\u4e2d\uff08\u6216\u8005\u522b\u7684\u5730\u65b9\uff09\u753b\u51fa\u4e0a\u9762\u8fd9\u79cd\u56fe\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md",code:[{language:"java",text:"\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        for(int i=1;i<prices.length;i++)\n        {\n            if(prices[i] > prices[i-1])\n            {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function (prices) {\n  let profit = 0;\n\n  for (let i = 1; i < prices.length; i++) {\n    if (prices[i] > prices[i - 1]) {\n      profit = profit + prices[i] - prices[i - 1];\n    }\n  }\n\n  return profit;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int res = 0;\n        for(int i=1;i<prices.size();i++)\n        {\n            if(prices[i] > prices[i-1])\n            {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n};\n"}]},"binary-tree-maximum-path-sum":{id:"124",name:"binary-tree-maximum-path-sum",pre:[{text:"\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/tree.md",color:"purple"}],keyPoints:[{text:"\u9012\u5f52",link:null,color:"blue"},{text:"\u7406\u89e3\u9898\u76ee\u4e2d\u7684path\u5b9a\u4e49",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  int ans;\n  public int maxPathSum(TreeNode root) {\n    ans = Integer.MIN_VALUE;\n    helper(root);   // recursion\n    return ans;\n  }\n\n  public int helper(TreeNode root) {\n    if (root == null) return 0;\n    int leftMax = Math.max(0, helper(root.left));     // find the max sub-path sum in left sub-tree\n    int rightMax = Math.max(0, helper(root.right));   // find the max sub-path sum in right sub-tree\n    ans = Math.max(ans, leftMax+rightMax+root.val);   // find the max path sum at current node\n    return max(leftMax, rightMax) + root.val;         // according to the definition of path, the return value of current node can only be that the sum of current node value plus either left or right max path sum.\n  }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=124 lang=javascript\n *\n * [124] Binary Tree Maximum Path Sum\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction helper(node, payload) {\n  if (node === null) return 0;\n\n  const l = helper(node.left, payload);\n  const r = helper(node.right, payload);\n\n  payload.max = Math.max(\n    node.val + Math.max(0, l) + Math.max(0, r),\n    payload.max\n  );\n\n  return node.val + Math.max(l, r, 0);\n}\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function (root) {\n  if (root === null) return 0;\n  const payload = {\n    max: root.val,\n  };\n  helper(root, payload);\n  return payload.max;\n};\n"},{language:"cpp",text:"\nclass Solution {\nprivate:\n    int ans = INT_MIN;\n    int postOrder(TreeNode *root) {\n        if (!root) return INT_MIN;\n        int L = max(0, postOrder(root->left)), R = max(0, postOrder(root->right));\n        ans = max(ans, L + R + root->val);\n        return root->val + max(L, R);\n    }\npublic:\n    int maxPathSum(TreeNode* root) {\n        postOrder(root);\n        return ans;\n    }\n};\n\n"},{language:"py",text:"\n\nclass Solution:\n    ans = float('-inf')\n    def maxPathSum(self, root: TreeNode) -> int:\n        def helper(node):\n            if not node: return 0\n            l = helper(node.left)\n            r = helper(node.right)\n            self.ans = max(self.ans, max(l,0) + max(r, 0) + node.val)\n            return max(l, r, 0) + node.val\n        helper(root)\n        return self.ans\n"}]},"valid-palindrome":{id:"125",name:"valid-palindrome",pre:[{text:"\u56de\u6587",link:null,color:"lime"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"facebook"},{name:"microsoft"},{name:"uber"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/125.valid-palindrome.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/125.valid-palindrome.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=125 lang=javascript\n *\n * [125] Valid Palindrome\n */\n// \u53ea\u5904\u7406\u82f1\u6587\u5b57\u7b26\uff08\u9898\u76ee\u5ffd\u7565\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u524d\u9762\u5168\u90e8\u8f6c\u5316\u6210\u4e86\u5c0f\u5199\uff0c \u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u53ea\u5224\u65ad\u5c0f\u5199\uff09\u548c\u6570\u5b57\nfunction isValid(c) {\n  const charCode = c.charCodeAt(0);\n  const isDigit =\n    charCode >= "0".charCodeAt(0) && charCode <= "9".charCodeAt(0);\n  const isChar = charCode >= "a".charCodeAt(0) && charCode <= "z".charCodeAt(0);\n\n  return isDigit || isChar;\n}\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function (s) {\n  s = s.toLowerCase();\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left < right) {\n    if (!isValid(s[left])) {\n      left++;\n      continue;\n    }\n    if (!isValid(s[right])) {\n      right--;\n      continue;\n    }\n\n    if (s[left] === s[right]) {\n      left++;\n      right--;\n    } else {\n      break;\n    }\n  }\n\n  return right <= left;\n};\n'},{language:"py",text:'\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            if not s[left].isalnum():\n                left += 1\n                continue\n            if not s[right].isalnum():\n                right -= 1\n                continue\n            if s[left].lower() == s[right].lower():\n                left += 1\n                right -= 1\n            else:\n                break\n        return right <= left\n\n    def isPalindrome2(self, s: str) -> bool:\n        """\n        \u4f7f\u7528\u8bed\u8a00\u7279\u6027\u8fdb\u884c\u6c42\u89e3\n        """\n        s = \'\'.join(i for i in s if i.isalnum()).lower()\n        return s == s[::-1]\n'}]},"longest-consecutive-sequence":{id:"128",name:"longest-consecutive-sequence",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/128.longest-consecutive-sequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/128.longest-consecutive-sequence.md",code:[{language:"java",text:"\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int ans = 0;\n        for (int num : nums) {\n            set.add(num);\n        }\n        for(int i = 0;i < nums.length; i ++) {\n            int x = nums[i];\n            // \u8bf4\u660ex\u662f\u8fde\u7eed\u5e8f\u5217\u7684\u5f00\u5934\u5143\u7d20\n            if  (!set.contains(x - 1)) {\n                while(set.contains(x + 1)) {\n                    x ++;\n                }\n            }\n            ans = Math.max(ans, x - nums[i] + 1);\n        }\n        return ans;\n\n    }\n}\n"},{language:"js",text:"\nif (nums.length === 0) return 0;\nlet count = 1;\nlet maxCount = 1;\n// \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u4e0d\u9700\u8981\u6392\u5e8f\uff0c\u8fd9\u4e48\u505a\u53ea\u4e0d\u8fc7\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\nnums = [...new Set(nums)].sort((a, b) => a - b);\nfor (let i = 0; i < nums.length - 1; i++) {\n  if (nums[i + 1] - nums[i] === 1) {\n    count++;\n  } else {\n    if (count > maxCount) {\n      maxCount = count;\n    }\n    count = 1;\n  }\n}\nreturn Math.max(count, maxCount);\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function (nums) {\n  set = new Set(nums);\n  let max = 0;\n  let temp = 0;\n  set.forEach((x) => {\n    // \u8bf4\u660ex\u662f\u8fde\u7eed\u5e8f\u5217\u7684\u5f00\u5934\u5143\u7d20\u3002\u52a0\u8fd9\u4e2a\u6761\u4ef6\u76f8\u5f53\u4e8e\u526a\u679d\u7684\u4f5c\u7528\uff0c\u5426\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u5230 N ^ 2\n    if (!set.has(x - 1)) {\n      temp = x + 1;\n      while (set.has(y)) {\n        temp = temp + 1;\n      }\n      max = Math.max(max, y - x); // y - x \u5c31\u662f\u4ecex\u5f00\u59cb\u5230\u6700\u540e\u6709\u591a\u5c11\u8fde\u7eed\u7684\u6570\u5b57\n    }\n  });\n  return max;\n};\n"},{language:"py",text:"\nclass Solution:\n    def longestConsecutive(self, A: List[int]) -> int:\n        seen = set(A)\n        ans = 0\n        for a in A:\n            t = a\n            #  if \u7684\u4f5c\u7528\u662f\u526a\u679d\n            if t + 1 not in seen:\n                while t - 1 in seen:\n                    t -= 1\n            ans = max(ans, a - t + 1)\n        return ans\n"}]},"sum-root-to-leaf-numbers":{id:"129",name:"sum-root-to-leaf-numbers",pre:[{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u9012\u5f52\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=129 lang=javascript\n *\n * [129] Sum Root to Leaf Numbers\n */\nfunction helper(node, cur) {\n  if (node === null) return 0;\n  const next = node.val + cur * 10;\n\n  if (node.left === null && node.right === null) return next;\n\n  const l = helper(node.left, next);\n  const r = helper(node.right, next);\n\n  return l + r;\n}\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function (root) {\n  // tag: `tree` `dfs` `math`\n  return helper(root, 0);\n};\n"},{language:"py",text:"\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n\n        def helper(node, cur_val):\n            if not node: return 0\n            next_val = cur_val * 10 + node.val\n\n            if not (node.left or node.right):\n                return next_val\n\n            left_val = helper(node.left, next_val)\n            right_val = helper(node.right, next_val)\n\n            return left_val + right_val\n\n        return helper(root, 0)\n"},{language:"py",text:"\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        if not root: return 0\n        result = 0\n        node_queue, sum_queue = [root], [root.val]\n        while node_queue:\n            for i in node_queue:\n                cur_node = node_queue.pop(0)\n                cur_val = sum_queue.pop(0)\n                if cur_node.left:\n                    node_queue.append(cur_node.left)\n                    sum_queue.append(cur_val * 10 + cur_node.left.val)\n                if cur_node.right:\n                    node_queue.append(cur_node.right)\n                    sum_queue.append(cur_val * 10 + cur_node.right.val)\n                if not (cur_node.left or cur_node.right):\n                    result += cur_val\n        return result\n"}]},"surrounded-regions":{id:"130",name:"surrounded-regions",pre:[{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u7ef4\u6570\u7ec4DFS\u89e3\u9898\u6a21\u677f",link:null,color:"blue"},{text:"\u8f6c\u5316\u95ee\u9898\u4e3a`\u8fde\u901a\u533a\u57df\u95ee\u9898`",link:null,color:"blue"},{text:"\u76f4\u63a5mutate\u539f\u6570\u7ec4\uff0c\u8282\u7701\u7a7a\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/130.surrounded-regions.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/130.surrounded-regions.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=130 lang=javascript\n *\n * [130] Surrounded Regions\n */\n// \u5c06O\u4ee5\u53ca\u5468\u8fb9\u7684O\u8f6c\u5316\u4e3aA\nfunction mark(board, i, j, rows, cols) {\n  if (i < 0 || i > rows - 1 || j < 0 || j > cols - 1 || board[i][j] !== "O")\n    return;\n\n  board[i][j] = "A";\n  mark(board, i + 1, j, rows, cols);\n  mark(board, i - 1, j, rows, cols);\n  mark(board, i, j + 1, rows, cols);\n  mark(board, i, j - 1, rows, cols);\n}\n/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function (board) {\n  const rows = board.length;\n  if (rows === 0) return [];\n  const cols = board[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (i === 0 || i == rows - 1 || j === 0 || j === cols - 1) {\n        mark(board, i, j, rows, cols);\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (board[i][j] === "O") {\n        board[i][j] = "X";\n      } else if (board[i][j] === "A") {\n        board[i][j] = "O";\n      }\n    }\n  }\n\n  return board;\n};\n'},{language:"cpp",text:"\nclass Solution {\n    int M, N, dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    void dfs(vector<vector<char>> &board, int x, int y) {\n        if (x < 0 || x >= M || y < 0 || y >= N || board[x][y] != 'O') return;\n        board[x][y] = '#';\n        for (auto &dir : dirs) dfs(board, x + dir[0], y + dir[1]);\n    }\npublic:\n    void solve(vector<vector<char>>& board) {\n        if (board.empty() || board[0].empty()) return;\n        M = board.size(), N = board[0].size();\n        for (int i = 0; i < M; ++i) {\n            dfs(board, i, 0);\n            dfs(board, i, N - 1);\n        }\n        for (int j = 0; j < N; ++j) {\n            dfs(board, 0, j);\n            dfs(board, M - 1, j);\n        }\n        for (auto &row : board) {\n            for (auto &cell : row) {\n                cell = cell == '#' ? 'O' : 'X';\n            }\n        }\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        # \u5982\u679c\u6570\u7ec4\u957f\u6216\u5bbd\u5c0f\u4e8e\u7b49\u4e8e2\uff0c\u5219\u4e0d\u9700\u8981\u66ff\u6362\n        if len(board) <= 2 or len(board[0]) <= 2:\n            return\n\n        row, col = len(board), len(board[0])\n\n        def dfs(i, j):\n            \"\"\"\n            \u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\uff0c\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff0c\u66ff\u6362\u4e3aA\u5e76\u8fdb\u4e00\u6b65\u6d4b\u8bd5\uff0c\u5426\u5219\u505c\u6b62\n            \"\"\"\n            if i < 0 or j < 0 or i >= row or j >= col or board[i][j] != 'O':\n                return\n            board[i][j] = 'A'\n\n            dfs(i - 1, j)\n            dfs(i + 1, j)\n            dfs(i, j - 1)\n            dfs(i, j + 1)\n\n        # \u4ece\u5916\u56f4\u5f00\u59cb\n        for i in range(row):\n            dfs(i, 0)\n            dfs(i, col-1)\n\n        for j in range(col):\n            dfs(0, j)\n            dfs(row-1, j)\n\n        # \u6700\u540e\u5b8c\u6210\u66ff\u6362\n        for i in range(row):\n            for j in range(col):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'A':\n                    board[i][j] = 'O'\n"}]},"palindrome-partitioning":{id:"131",name:"palindrome-partitioning",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/131.palindrome-partitioning.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/131.palindrome-partitioning.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=131 lang=javascript\n *\n * [131] Palindrome Partitioning\n */\n\nfunction isPalindrom(s) {\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left < right && s[left] === s[right]) {\n    left++;\n    right--;\n  }\n\n  return left >= right;\n}\nfunction backtrack(s, list, tempList, start) {\n  const sliced = s.slice(start);\n\n  if (isPalindrom(sliced) && tempList.join("").length === s.length)\n    list.push([...tempList]);\n\n  for (let i = 0; i < sliced.length; i++) {\n    const sub = sliced.slice(0, i + 1);\n    if (isPalindrom(sub)) {\n      tempList.push(sub);\n    } else {\n      continue;\n    }\n    backtrack(s, list, tempList, start + i + 1);\n    tempList.pop();\n  }\n}\n/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function (s) {\n  // "aab"\n  // ["aa", "b"]\n  // ["a", "a", "b"]\n  const list = [];\n  backtrack(s, list, [], 0);\n  return list;\n};\n'},{language:"cpp",text:"\n\tclass Solution {\nprivate:\n  vector<vector<string>> ans;\n  vector<string> tmp;\n  bool isPalindrome(string &s, int first, int last) {\n    while (first < last && s[first] == s[last]) ++first, --last;\n    return first >= last;\n  }\n  void dfs(string &s, int start) {\n    if (start == s.size()) { ans.push_back(tmp); return; }\n    for (int i = start; i < s.size(); ++i) {\n      if (isPalindrome(s, start, i)) {\n        tmp.push_back(s.substr(start, i - start + 1));\n        dfs(s, i + 1);\n        tmp.pop_back();\n      }\n    }\n  }\npublic:\n  vector<vector<string>> partition(string s) {\n    dfs(s, 0);\n    return ans;\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        """\u56de\u6eaf\u6cd5"""\n\n        res = []\n\n        def helper(s, tmp):\n            """\n            \u5982\u679c\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf4\u660e\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\n            \u5426\u5219\u9010\u4e2a\u5b57\u7b26\u5f80\u524d\u6d4b\u8bd5\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\n            \u5982\u679c\u662f\uff0c\u5219\u5904\u7406\u5269\u4f59\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5df2\u7ecf\u5f97\u5230\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\n            """\n            if not s:\n                res.append(tmp)\n            for i in range(1, len(s) + 1):\n                if s[:i] == s[:i][::-1]:\n                    helper(s[i:], tmp + [s[:i]])\n\n        helper(s, [])\n        return res\n'}]},"palindrome-partitioning-ii":{id:"132",name:"palindrome-partitioning-ii",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u9884\u5904\u7406\u3002\u5c06s[i:j]\u662f\u5426\u4e3a\u56de\u6587\u7684\u6570\u636e\u63d0\u524d\u8ba1\u7b97\u51fa\u6765\u5b58\u50a8\u5230\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u666e\u901a\u7684\u52a8\u6001\u89c4\u5212\u3002",link:null,color:"blue"},{text:"\u5982\u679cs[0:j]\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u56de\u6587\uff0c\u90a3\u4e48dp[j]\u5e94\u8be5\u662f0",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/132.palindrome-partitioning-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/132.palindrome-partitioning-ii.md",code:[{language:"py",text:"\nfor i in range(n):\n    for j in range(i + 1, n):\n        if judge(i + 1, j):\n            # \u4f60\u7684\u903b\u8f91\n"},{language:"py",text:"\npalindrome_pairs[i][j] = (s[i] == s[j]) and palindrome_pairs[i + 1][j - 1]\n"},{language:"py",text:"\nfor i in range(n):\n    for j in range(i + 1, n):\n        if judge(i + 1, j):\n            dp[j] = min(dp[j], dp[i] + 1)\n"},{language:"py",text:'\n\nclass Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        palindrome_pairs = [[True] * n for _ in range(n)]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                palindrome_pairs[i][j] = (s[i] == s[j]) and palindrome_pairs[i + 1][j - 1]\n\n        def judge(i, j):\n            return palindrome_pairs[i][j]\n\n        dp = [float("inf")] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if palindrome_pairs[0][j]:\n                    dp[j] = 0\n                elif judge(i + 1, j):\n                    dp[j] = min(dp[j], dp[i] + 1)\n        return dp[-1]\n\n'}]},"single-number":{id:"136",name:"single-number",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"1.\u5f02\u6216\u7684\u6027\u8d28\u4e24\u4e2a\u6570\u5b57\u5f02\u6216\u7684\u7ed3\u679c`a^b`\u662f\u5c06a\u548cb\u7684\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5f97\u51fa\u7684\u6570\u5b57\u3002\u8fd0\u7b97\u7684\u903b\u8f91\u662f\u5982\u679c\u540c\u4e00\u4f4d\u7684\u6570\u5b57\u76f8\u540c\u5219\u4e3a0\uff0c\u4e0d\u540c\u5219\u4e3a12.\u5f02\u6216\u7684\u89c4\u5f8b",link:null,color:"blue"},{text:"\u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5219\u4e3a`0`",link:null,color:"blue"},{text:"\u4efb\u4f55\u6570\u548c0\u5f02\u6216\u662f`\u672c\u8eab`3.\u5f88\u591a\u4eba\u53ea\u662f\u8bb0\u5f97\u5f02\u6216\u7684\u6027\u8d28\u548c\u89c4\u5f8b\uff0c\u4f46\u662f\u7f3a\u4e4f\u5bf9\u5176\u672c\u8d28\u7684\u7406\u89e3\uff0c\u5bfc\u81f4\u5f88\u96be\u60f3\u5230\u8fd9\u79cd\u89e3\u6cd5\uff08\u6211\u672c\u4eba\u4e5f\u6ca1\u60f3\u5230\uff094.bit\u8fd0\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/136.single-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/136.single-number.md",code:[{language:"java",text:"\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        for(int n:nums)\n        {\n            // \u5f02\u6216\n            res ^= n;\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function (nums) {\n  let ret = 0;\n  for (let index = 0; index < nums.length; index++) {\n    const element = nums[index];\n    ret = ret ^ element;\n  }\n  return ret;\n};\n"},{language:"py",text:"\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        single_number = 0\n        for num in nums:\n            single_number ^= num\n        return single_number\n"}]},"word-break":{id:"139",name:"word-break",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/139.word-break.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/139.word-break.md",code:[{language:"js",text:"\n/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function (s, wordDict) {\n  const dp = Array(s.length + 1);\n  dp[0] = true;\n  for (let i = 0; i < s.length + 1; i++) {\n    for (let word of wordDict) {\n      if (word.length <= i && dp[i - word.length]) {\n        if (s.substring(i - word.length, i) === word) {\n          dp[i] = true;\n        }\n      }\n    }\n  }\n\n  return dp[s.length] || false;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& dict) {\n        unordered_set<string> st(begin(dict), end(dict));\n        int N = s.size();\n        vector<bool> dp(N + 1);\n        dp[0] = true;\n        for (int i = 1; i <= N; ++i) {\n            for (int j = 0; j < i && !dp[i]; ++j) {\n                dp[i] = dp[j] && st.count(s.substr(j, i - j));\n            }\n        }\n        return dp[N];\n    }\n};\n\n"}]},"word-break-ii":{id:"140",name:"word-break-ii",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/140.word-break-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/140.word-break-ii.md",code:[{language:"js",text:'\n"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"[\n  ("a",\n  "aa",\n  "aaa",\n  "aaaa",\n  "aaaaa",\n  "aaaaaa",\n  "aaaaaaa",\n  "aaaaaaaa",\n  "aaaaaaaaa",\n  "aaaaaaaaaa")\n];\n'},{language:"js",text:"\n{\n  hi: true,\n  h: true,\n  i: true,\n  world: true,\n  hello: true,\n\n}\n"},{language:"cpp",text:'\nclass Solution {\n    int maxLen = 0;\n    unordered_set<string> ws;\n    vector<int> m;\n    vector<string> ans;\n    bool dfs(string &s, int i, string tmp) {\n        if (i == s.size()) {\n            ans.push_back(tmp);\n            return true;\n        }\n        if (m[i] == 0) return m[i];\n        m[i] = 0;\n        for (int j = min((int)s.size(), i + maxLen); j > i; --j) {\n            auto sub = s.substr(i, j - i);\n            if (ws.count(sub) && dfs(s, j, tmp.size() ? tmp + " " + sub : sub)) m[i] = 1;\n        }\n        return m[i];\n    }\npublic:\n    vector<string> wordBreak(string s, vector<string>& dict) {\n        ws = { dict.begin(), dict.end() };\n        for (auto &w : dict) maxLen = max(maxLen, (int)w.size());\n        m.assign(s.size(), -1); // -1 = unvisited, 0 = can not reach end, 1 = can reach end.\n        dfs(s, 0, "");\n        return ans;\n    }\n};\n'},{language:"py",text:"\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        ans = []\n        n = len(s)\n\n        def backtrack(temp, start):\n            if start == n: ans.append(temp[1:])\n            for i in range(start, n):\n                if s[start:i + 1] in wordDict:\n                    backtrack(temp + \" \" + s[start:i + 1], i + 1)\n        backtrack('', 0)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        n = len(s)\n        @lru_cache(None)\n        def backtrack(start):\n            ans = []\n            if start == n:\n                ans.append('')\n            for i in range(start, n):\n                if s[start:i + 1] in wordDict:\n                    if start == 0: temp = s[start:i + 1]\n                    else: temp = \" \" + s[start:i + 1]\n                    ps = backtrack(i + 1)\n                    for p in ps:\n                        ans.append(temp + p)\n            return ans\n        return backtrack(0)\n"}]},"Linked-List-Cycle-II":{id:"142",name:"Linked-List-Cycle-II",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/142.Linked-List-Cycle-II.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/142.Linked-List-Cycle-II.md",code:[{language:"js",text:"\ndata = new Set() // \u58f0\u660e\u54c8\u5e0c\u8868\nwhile head\u4e0d\u4e3a\u7a7a{\n  if \u5f53\u524d\u8282\u70b9\u5728\u54c8\u5e0c\u8868\u4e2d\u5b58\u5728{\n    return head // \u5f53\u524d\u8282\u70b9\u5c31\u662f\u73af\u7684\u5165\u53e3\u8282\u70b9\n  } else {\n    \u5c06\u5f53\u524d\u8282\u70b9\u63d2\u5165\u54c8\u5e0c\u8868\n  }\n  head\u6307\u9488\u540e\u79fb\n}\nreturn null // \u73af\u4e0d\u5b58\u5728\n"},{language:"js",text:"\nlet data = new Set();\nwhile (head) {\n  if (data.has(head)) {\n    return head;\n  } else {\n    data.add(head);\n  }\n  head = head.next;\n}\nreturn null;\n"},{language:"js",text:"x\nfast = head\nslow = head //\u5feb\u6162\u6307\u9488\u90fd\u6307\u5411\u5934\u90e8\ndo {\n  \u5feb\u6307\u9488\u5411\u540e\u4e24\u6b65\n  \u6162\u6307\u9488\u5411\u540e\u4e00\u6b65\n} while \u5feb\u6162\u6307\u9488\u4e0d\u76f8\u7b49\u65f6\nif \u6307\u9488\u90fd\u4e3a\u7a7a\u65f6{\n  return null // \u6ca1\u6709\u73af\n}\nwhile \u5feb\u6162\u6307\u9488\u4e0d\u76f8\u7b49\u65f6{\n  \u5feb\u6307\u9488\u5411\u540e\u4e00\u6b65\n  \u6162\u6307\u9488\u5411\u540e\u4e00\u6b65\n}\nreturn fast\n"},{language:"js",text:"\nif (head == null || head.next == null) return null;\nlet fast = (slow = head);\ndo {\n  if (fast != null && fast.next != null) {\n    fast = fast.next.next;\n  } else {\n    fast = null;\n  }\n  slow = slow.next;\n} while (fast != slow);\nif (fast == null) return null;\nfast = head;\nwhile (fast != slow) {\n  fast = fast.next;\n  slow = slow.next;\n}\nreturn fast;\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (!head) return NULL;\n        auto p = head, q = head;\n        while (p && p->next) {\n            p = p->next->next;\n            q = q->next;\n            if (p == q) break;\n        }\n        if (!p || !p->next) return NULL;\n        p = head;\n        for (; p != q; p = p->next, q = q->next);\n        return p;\n    }\n};\n\n"}]},"binary-tree-preorder-traversal":{id:"144",name:"binary-tree-preorder-traversal",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`mid.concat(left).concat(right)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function (root) {\n  // 1. Recursive solution\n\n  // if (!root) return [];\n\n  // return [root.val].concat(preorderTraversal(root.left)).concat(preorderTraversal(root.right));\n\n  // 2. iterative solutuon\n\n  if (!root) return [];\n  const ret = [];\n  const stack = [root];\n  let t = stack.pop();\n\n  while (t) {\n    if (t.right) {\n      stack.push(t.right);\n    }\n    if (t.left) {\n      stack.push(t.left);\n    }\n    ret.push(t.val);\n    t = stack.pop();\n  }\n\n  return ret;\n};\n"}]},"binary-tree-postorder-traversal":{id:"145",name:"binary-tree-postorder-traversal",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`left.concat(right).concat(mid)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function (root) {\n  // 1. Recursive solution\n\n  // if (!root) return [];\n\n  // return postorderTraversal(root.left).concat(postorderTraversal(root.right)).concat(root.val);\n\n  // 2. iterative solutuon\n\n  if (!root) return [];\n  const ret = [];\n  const stack = [root];\n  let p = root; // \u6807\u8bc6\u5143\u7d20\uff0c\u7528\u6765\u5224\u65ad\u8282\u70b9\u662f\u5426\u5e94\u8be5\u51fa\u6808\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (\n      top.left === p ||\n      top.right === p || // \u5b50\u8282\u70b9\u5df2\u7ecf\u904d\u5386\u8fc7\u4e86\n      (top.left === null && top.right === null) // \u53f6\u5b50\u5143\u7d20\n    ) {\n      p = stack.pop();\n      ret.push(p.val);\n    } else {\n      if (top.right) {\n        stack.push(top.right);\n      }\n      if (top.left) {\n        stack.push(top.left);\n      }\n    }\n  }\n\n  return ret;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> ans;\n        stack<TreeNode*> s;\n        TreeNode *prev = NULL;\n        while (root || s.size()) {\n            while (root) {\n                s.push(root);\n                root = root->left;\n            }\n            root = s.top();\n            if (!root->right || root->right == prev) {\n                ans.push_back(root->val);\n                s.pop();\n                prev = root;\n                root = NULL;\n            } else root = root->right;\n        }\n        return ans;\n    }\n};\n"}]},"lru-cache":{id:"146",name:"lru-cache",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/146.lru-cache.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/146.lru-cache.md",code:[{language:"js",text:"\nvar LRUCache = function(capacity) {\n\t\u4fdd\u5b58\u4e00\u4e2a\u8be5\u6570\u636e\u7ed3\u6784\u7684\u6700\u5927\u5bb9\u91cf\n\t\u751f\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868,\u540c\u65f6\u4fdd\u5b58\u8be5\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u4e0e\u5c3e\u8282\u70b9\n\t\u751f\u6210\u4e00\u4e2a\u54c8\u5e0c\u8868\n};\n\nfunction get (key) {\n\tif \u54c8\u5e0c\u8868\u4e2d\u5b58\u5728\u8be5\u5173\u952e\u5b57 {\n\t\t\u6839\u636e\u54c8\u5e0c\u8868\u83b7\u53d6\u8be5\u94fe\u8868\u8282\u70b9\n\t\t\u5c06\u8be5\u8282\u70b9\u653e\u7f6e\u4e8e\u94fe\u8868\u5934\u90e8\n\t\treturn \u94fe\u8868\u8282\u70b9\u7684\u503c\n\t} else {\n\t\t  return -1\n\t}\n};\n\nfunction put (key, value) {\n    if \u54c8\u5e0c\u8868\u4e2d\u5b58\u5728\u8be5\u5173\u952e\u5b57 {\n\t\t\u6839\u636e\u54c8\u5e0c\u8868\u83b7\u53d6\u8be5\u94fe\u8868\u8282\u70b9\n\t\t\u5c06\u8be5\u94fe\u8868\u8282\u70b9\u7684\u503c\u66f4\u65b0\n\t\t\u5c06\u8be5\u8282\u70b9\u653e\u7f6e\u4e8e\u94fe\u8868\u5934\u90e8\n\t} else {\n\t\tif \u5bb9\u91cf\u5df2\u6ee1 {\n\t\t\t\u5220\u9664\u94fe\u8868\u5c3e\u90e8\u7684\u8282\u70b9\n\t\t\t\u65b0\u751f\u6210\u4e00\u4e2a\u8282\u70b9\n\t\t\t\u5c06\u8be5\u8282\u70b9\u653e\u7f6e\u4e8e\u94fe\u8868\u5934\u90e8\n\t\t} else {\n\t\t\t\u65b0\u751f\u6210\u4e00\u4e2a\u8282\u70b9\n\t\t\t\u5c06\u8be5\u8282\u70b9\u653e\u7f6e\u4e8e\u94fe\u8868\u5934\u90e8\n\t\t}\n\t}\n};\n"},{language:"js",text:"\nfunction ListNode(key, val) {\n  this.key = key;\n  this.val = val;\n  this.pre = this.next = null;\n}\n\nvar LRUCache = function (capacity) {\n  this.capacity = capacity;\n  this.size = 0;\n  this.data = {};\n  this.head = new ListNode();\n  this.tail = new ListNode();\n  this.head.next = this.tail;\n  this.tail.pre = this.head;\n};\n\nfunction get(key) {\n  if (this.data[key] !== undefined) {\n    let node = this.data[key];\n    this.removeNode(node);\n    this.appendHead(node);\n    return node.val;\n  } else {\n    return -1;\n  }\n}\n\nfunction put(key, value) {\n  let node;\n  if (this.data[key] !== undefined) {\n    node = this.data[key];\n    this.removeNode(node);\n    node.val = value;\n  } else {\n    node = new ListNode(key, value);\n    this.data[key] = node;\n    if (this.size < this.capacity) {\n      this.size++;\n    } else {\n      key = this.removeTail();\n      delete this.data[key];\n    }\n  }\n  this.appendHead(node);\n}\n\nfunction removeNode(node) {\n  let preNode = node.pre,\n    nextNode = node.next;\n  preNode.next = nextNode;\n  nextNode.pre = preNode;\n}\n\nfunction appendHead(node) {\n  let firstNode = this.head.next;\n  this.head.next = node;\n  node.pre = this.head;\n  node.next = firstNode;\n  firstNode.pre = node;\n}\n\nfunction removeTail() {\n  let key = this.tail.pre.key;\n  this.removeNode(this.tail.pre);\n  return key;\n}\n"},{language:"py",text:"\nclass DLinkedNode:\n    def __init__(self, key=0, value=0):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = dict()\n        # \u4f7f\u7528\u4f2a\u5934\u90e8\u548c\u4f2a\u5c3e\u90e8\u8282\u70b9\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.capacity = capacity\n        self.size = 0\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        # \u5982\u679c key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u518d\u79fb\u5230\u5934\u90e8\n        node = self.cache[key]\n        self.moveToHead(node)\n        return node.value\n\n    def put(self, key: int, value: int) -> None:\n        if key not in self.cache:\n            # \u5982\u679c key \u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\n            node = DLinkedNode(key, value)\n            # \u6dfb\u52a0\u8fdb\u54c8\u5e0c\u8868\n            self.cache[key] = node\n            # \u6dfb\u52a0\u81f3\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\n            self.addToHead(node)\n            self.size += 1\n            if self.size > self.capacity:\n                # \u5982\u679c\u8d85\u51fa\u5bb9\u91cf\uff0c\u5220\u9664\u53cc\u5411\u94fe\u8868\u7684\u5c3e\u90e8\u8282\u70b9\n                removed = self.removeTail()\n                # \u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u9879\n                self.cache.pop(removed.key)\n                self.size -= 1\n        else:\n            # \u5982\u679c key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u518d\u4fee\u6539 value\uff0c\u5e76\u79fb\u5230\u5934\u90e8\n            node = self.cache[key]\n            node.value = value\n            self.moveToHead(node)\n\n    def addToHead(self, node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n\n    def removeNode(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n\n    def moveToHead(self, node):\n        self.removeNode(node)\n        self.addToHead(node)\n\n    def removeTail(self):\n        node = self.tail.prev\n        self.removeNode(node)\n        return node\n\n"}]},"insertion-sort-list":{id:"147",name:"insertion-sort-list",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/147.insertion-sort-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/147.insertion-sort-list.md",code:[{language:"java",text:"\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n\t\tListNode ans = new ListNode(-1);\n\t\twhile( head != null ){\n\t\t\tListNode next = head.next;\n            ListNode cur = ans;\n\t\t\twhile(cur.next != null && cur.next.val < head.val ){\n\t\t\t\tcur = cur.next;\n\t\t\t}\n\t\t\thead.next = cur.next;\n\t\t\tcur.next = head;\n\t\t\thead = next;\n\t\t}\n\n\t\treturn ans.next;\n    }\n}\n"},{language:"js",text:"\nvar insertionSortList = function (head) {\n  ans = new ListNode(-1);\n  while (head != null) {\n    next = head.next;\n    cur = ans;\n    while (cur.next != null && cur.next.val < head.val) {\n      cur = cur.next;\n    }\n    head.next = cur.next;\n    cur.next = head;\n    head = next;\n  }\n\n  return ans.next;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        ListNode dummy, *p;\n        while (head) {\n            auto *n = head;\n            head = head->next;\n            p = &dummy;\n            while (p->next && p->next->val < n->val) p = p->next;\n            n->next = p->next;\n            p->next = n;\n        }\n        return dummy.next;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        ans = ListNode(float("-inf"))\n        # do domething\n        return ans.next\n'},{language:"py",text:'\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        ans = ListNode(float("-inf"))\n\n        def insert(to_be_insert):\n            # \u9009\u62e9\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5e76\u63d2\u5165\n\n        while head:\n            insert(head)\n            head = head.next\n        return ans.next\n'},{language:"py",text:"\n# ans \u5c31\u662f\u4e0a\u9762\u6211\u63d0\u5230\u7684\u865a\u62df\u8282\u70b9\nans = cur\nwhile cur.next and cur.next.val < to_be_insert.val:\n    cur = cur.next\n"},{language:"py",text:"\nto_be_insert.next = cur.next\ncur.next = to_be_insert\n"},{language:"py",text:'\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        ans = ListNode(float("-inf"))\n\n        def helper(inserted):\n            cur = ans\n            while cur.next and cur.next.val < inserted.val:\n                cur = cur.next\n            inserted.next = cur.next\n            cur.next = inserted\n\n        while head:\n            helper(head)\n            head = head.next\n        return ans.next\n'},{language:"py",text:"\ninserted.next = cur.next\ncur.next = inserted\n"},{language:"py",text:'\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        ans = ListNode(float("-inf"))\n\n        def insert(to_be_insert):\n            # \u9009\u62e9\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5e76\u63d2\u5165\n            # \u8fd9\u91cc to_to_insert \u7684 next \u4f1a\u88ab\u4fee\u6539\uff0c\u8fdb\u800c\u5f71\u54cd\u5916\u5c42\u7684 head\n\n        while head:\n            # \u7559\u4e0b\u8054\u7cfb\u65b9\u5f0f\n            next = head.next\n            insert(head)\n            # \u4f7f\u7528\u8054\u7cfb\u65b9\u5f0f\u66f4\u65b0 head\n            head = next\n        return ans.next\n\n'},{language:"py",text:'\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n       ans = ListNode(float("-inf"))\n\n        while head:\n            next = head.next\n            cur = ans\n            while cur.next and cur.next.val < head.val:\n                cur = cur.next\n            head.next = cur.next\n            cur.next = head\n            head = next\n        return ans.next\n'}]},"evaluate-reverse-polish-notation":{id:"150",name:"evaluate-reverse-polish-notation",pre:[{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"1.\u6808\u7684\u57fa\u672c\u7528\u6cd52.\u5982\u679c\u4f60\u7528\u7684\u662fJS\u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f/\u548c\u5176\u4ed6\u5f88\u591a\u8bed\u8a00\u662f\u4e0d\u4e00\u6837\u76843.\u5982\u679c\u4f60\u7528\u7684\u662fJS\u7684\u8bdd\uff0c\u9700\u8981\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\u3002\u5426\u5219\u6709\u5f88\u591a\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u679c4.\u64cd\u4f5c\u7b26\u7684\u987a\u5e8f\u5e94\u8be5\u662f\u5148\u51fa\u6808\u7684\u662f\u7b2c\u4e8c\u4f4d\uff0c\u540e\u51fa\u6808\u7684\u662f\u7b2c\u4e00\u4f4d\u3002\u8fd9\u5728\u4e0d\u7b26\u5408\u4ea4\u6362\u5f8b\u7684\u64cd\u4f5c\u4e2d\u5f88\u91cd\u8981\uff0c\u6bd4\u5982\u51cf\u6cd5\u548c\u9664\u6cd5\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md",code:[{language:"java",text:'\nclass Solution {\n    public static int evalRPN(String[] tokens) {\n\tint[] numStack = new int[tokens.length / 2 + 1];\n\tint index = 0;\n\tfor (String s : tokens) {\n\t    if (s.equals("+")) {\n                numStack[index - 2] += numStack[--index];\n            } else if (s.equals("-")) {\n                numStack[index - 2] -= numStack[--index];\n            } else if (s.equals("*")) {\n                numStack[index - 2] *= numStack[--index];\n            } else if (s.equals("/")) {\n                numStack[index - 2] /= numStack[--index];\n            } else {\n                numStack[index++] = Integer.parseInt(s);\n            }\n\t}\n\treturn numStack[0];\n    }\n}\n'},{language:"js",text:'\n/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function (tokens) {\n  // \u8fd9\u79cd\u7b97\u6cd5\u7684\u524d\u63d0\u662f tokens\u662f\u6709\u6548\u7684\uff0c\n  // \u5f53\u7136\u8fd9\u7531\u7b97\u6cd5\u6765\u4fdd\u8bc1\n  const stack = [];\n\n  for (let index = 0; index < tokens.length; index++) {\n    const token = tokens[index];\n    // \u5bf9\u4e8e\u8fd0\u7b97\u6570\uff0c \u6211\u4eec\u76f4\u63a5\u5165\u6808\n    if (!Number.isNaN(Number(token))) {\n      stack.push(token);\n    } else {\n      // \u9047\u5230\u64cd\u4f5c\u7b26\uff0c\u6211\u4eec\u76f4\u63a5\u5927\u80c6\u8fd0\u7b97\uff0c\u4e0d\u7528\u8003\u8651\u7b97\u672f\u4f18\u5148\u7ea7\n      // \u7136\u540e\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808\u5373\u53ef\n\n      // \u5f53\u7136\u5982\u679c\u9898\u76ee\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u5141\u8bb8\u4f7f\u7528\u5355\u76ee\u7b49\u5176\u4ed6\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u9700\u8981\u505a\u5fae\u5c0f\u7684\u8c03\u6574\n      const a = Number(stack.pop());\n      const b = Number(stack.pop());\n      if (token === "*") {\n        stack.push(b * a);\n      } else if (token === "/") {\n        stack.push((b / a) >> 0);\n      } else if (token === "+") {\n        stack.push(b + a);\n      } else if (token === "-") {\n        stack.push(b - a);\n      }\n    }\n  }\n\n  return stack.pop();\n};\n'},{language:"cpp",text:"\n\tclass Solution {\npublic:\n  int evalRPN(vector<string>& tokens) {\n    stack<int> s;\n    for (string t : tokens) {\n      if (isdigit(t.back())) s.push(stoi(t));\n      else {\n        int n = s.top();\n        s.pop();\n        switch(t[0]) {\n          case '+': s.top() += n; break;\n          case '-': s.top() -= n; break;\n          case '*': s.top() *= n; break;\n          case '/': s.top() /= n; break;\n        }\n      }\n    }\n    return s.top();\n  }\n};\n"},{language:"py",text:"\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        if len(tokens) > 2:\n            stack = []\n            operations = ['+', '-', '*', '/']\n            for token in tokens:\n                if token in operations:\n                    b = int(stack.pop())\n                    a = int(stack.pop())\n                    if '+' == token:\n                        tmp = a + b\n                    elif '-' == token:\n                        tmp = a - b\n                    elif '*' == token:\n                        tmp = a * b\n                    else:\n                        tmp = int(a / b)\n                    stack.append(tmp)\n                else:\n                    stack.append(token)\n            return stack[0]\n        return int(tokens[-1])\n"}]},"maximum-product-subarray":{id:"152",name:"maximum-product-subarray",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u540c\u65f6\u8bb0\u5f55\u4e58\u79ef\u6700\u5927\u503c\u548c\u4e58\u79ef\u6700\u5c0f\u503c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/152.maximum-product-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/152.maximum-product-subarray.md",code:[{language:"js",text:"\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let temp = null;\n  for (let i = 0; i < nums.length; i++) {\n    temp = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      temp *= nums[j];\n      max = Math.max(temp, max);\n    }\n  }\n\n  return max;\n};\n"},{language:"js",text:"\nvar maxProduct = function (nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i])); // \u53d6\u6700\u5c0f\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i])); /// \u53d6\u6700\u5927\n    res = Math.max(res, max);\n  }\n  return res;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int maxProduct(vector<int>& A) {\n        int maxProd = 1, minProd = 1, ans = INT_MIN;\n        for (int n : A) {\n            int a = n * maxProd, b = n * minProd;\n            maxProd = max({n, a, b});\n            minProd = min({n, a, b});\n            ans = max(ans, maxProd);\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:"\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        max__dp = [1] * (n + 1)\n        min_dp = [1] * (n + 1)\n        ans = float('-inf')\n\n        for i in range(1, n + 1):\n            max__dp[i] = max(max__dp[i - 1] * nums[i - 1],\n                             min_dp[i - 1] * nums[i - 1], nums[i - 1])\n            min_dp[i] = min(max__dp[i - 1] * nums[i - 1],\n                            min_dp[i - 1] * nums[i - 1], nums[i - 1])\n            ans = max(ans, max__dp[i])\n        return ans\n"},{language:"py",text:"\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(1, n + 1):\n            temp = a\n            a = max(a * nums[i - 1],\n                    b * nums[i - 1], nums[i - 1])\n            b = min(temp * nums[i - 1],\n                    b * nums[i - 1], nums[i - 1])\n            ans = max(ans, a)\n        return ans\n\n"}]},"find-minimum-in-rotated-sorted-array":{id:"153",name:"find-minimum-in-rotated-sorted-array",pre:[{text:"\u4e8c\u5206",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/binary-search-1.md",color:"purple"}],keyPoints:[{text:"\u5982\u679c\u5de6\u7aef\u70b9\u7684\u503c\u5c0f\u4e8e\u53f3\u7aef\u70b9\u7684\u503c\u5219\u53ef\u4ee5\u63d0\u524d\u9000\u51fa",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/153.find-minimum-in-rotated-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/153.find-minimum-in-rotated-sorted-array.md",code:[{language:"py",text:"\nwhile l < r:\n   # your code here\nreturn nums[l] # or nums[r]\n\n"},{language:"py",text:"\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        l, r = 0, len(nums) - 1\n\n        while l < r:\n            # important\n            if nums[l] < nums[r]:\n                return nums[l]\n            mid = (l + r) // 2\n            # left part\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            else:\n                # right part\n                r = mid\n        # l or r is not important\n        return nums[l]\n\n\n"}]},"find-minimum-in-rotated-sorted-array-ii":{id:"154",name:"find-minimum-in-rotated-sorted-array-ii",pre:[{text:"\u4e8c\u5206",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/binary-search-1.md",color:"purple"}],keyPoints:[{text:"\u6bd4\u8f83\u53f3\u7aef\u70b9\u800c\u4e0d\u662f\u5de6\u7aef\u70b9",link:null,color:"blue"},{text:"\u5982\u679c\u5de6\u7aef\u70b9\u7684\u503c\u5c0f\u4e8e\u53f3\u7aef\u70b9\u7684\u503c\u5219\u53ef\u4ee5\u63d0\u524d\u9000\u51fa",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md",code:[{language:"py",text:"\n\n\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        l, r = 0, len(nums) - 1\n\n        while l < r:\n            if nums[l] < nums[r]:\n                return nums[l]\n            mid = (l + r) // 2\n            # [2,2,2,0,1]\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid\n            else:\n                r -= 1\n\n        return nums[l]  # or nums[r]\n\n\n"}]},"min-stack":{id:"155",name:"min-stack",pre:[{text:"\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"red"}],keyPoints:[{text:"\u5f80minstack\u4e2dpush\u7684\u5224\u65ad\u6761\u4ef6\u3002\u5e94\u8be5\u662fstack\u4e3a\u7a7a\u6216\u8005x\u5c0f\u4e8e\u7b49\u4e8eminstack\u6808\u9876\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"amazon"},{name:"bloomberg"},{name:"google"},{name:"snapchat"},{name:"uber"},{name:"zenefits"},{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/155.min-stack.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/155.min-stack.md",code:[{language:"java",text:'\npublic class MinStack {\n\n    // \u6570\u636e\u6808\n    private Stack<Integer> data;\n    // \u8f85\u52a9\u6808\n    private Stack<Integer> helper;\n\n    /**\n     * initialize your data structure here.\n     */\n    public MinStack() {\n        data = new Stack<>();\n        helper = new Stack<>();\n    }\n    \n    public void push(int x) {\n        // \u8f85\u52a9\u6808\u5728\u5fc5\u8981\u7684\u65f6\u5019\u624d\u589e\u52a0\n        data.add(x);\n        if (helper.isEmpty() || helper.peek() >= x) {\n            helper.add(x);\n        }\n    }\n\n    public void pop() {\n        // \u5173\u952e 3\uff1adata \u4e00\u5b9a\u5f97 pop()\n        if (!data.isEmpty()) {\n            // \u6ce8\u610f\uff1a\u58f0\u660e\u6210 int \u7c7b\u578b\uff0c\u8fd9\u91cc\u5b8c\u6210\u4e86\u81ea\u52a8\u62c6\u7bb1\uff0c\u4ece Integer \u8f6c\u6210\u4e86 int\uff0c\n            // \u56e0\u6b64\u4e0b\u9762\u7684\u6bd4\u8f83\u53ef\u4ee5\u4f7f\u7528 "==" \u8fd0\u7b97\u7b26\n            int top = data.pop();\n            if(top == helper.peek()){\n                helper.pop();\n            }\n        }\n    }\n\n    public int top() {\n        if(!data.isEmpty()){\n            return data.peek();\n        }\n    }\n\n    public int getMin() {\n        if(!helper.isEmpty()){\n            return helper.peek();\n        }\n    }\n}\n'},{language:"java",text:"\nclass MinStack {\n    long min;\n    Stack<Long> stack;\n    \n    /** initialize your data structure here. */\n    public MinStack() {\n        stack = new Stack<>();\n    }\n    \n    public void push(int x) {\n        if (stack.isEmpty()) {\n            stack.push(0L);\n            min = x;\n        }\n        else {\n            stack.push(x - min);\n            if (x < min)\n                min = x;\n        }\n    }\n    \n    public void pop() {\n        long p = stack.pop();\n        \n        if (p < 0) {\n            // if (p < 0), the popped value is the min\n            // Recall p is added by this statement: stack.push(x - min);\n            // So, p = x - old_min\n            // old_min = x - p\n            // again, if (p < 0), x is the min so:\n            // old_min = min - p\n            min = min - p;\n        }\n    }\n    \n    public int top() {\n        long p = stack.peek();\n        \n        if (p < 0) {\n            return (int) min;\n        }\n        else {\n            // p = x - min\n            // x = p + min\n            return (int) (p + min);\n        }\n    }\n    \n    public int getMin() {\n        return (int) min;    \n    }\n}\n"},{language:"js",text:"\n/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n    this.stack = []\n    this.minStack = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n    this.stack.push(x)\n    if (this.minStack.length == 0 ||  x <= this.minStack[this.minStack.length - 1]) {\n        this.minStack.push(x)\n    }\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    const x = this.stack.pop()\n    if (x !== void 0 &&  x === this.minStack[this.minStack.length - 1]) {\n        this.minStack.pop()\n    }\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    return this.stack[this.stack.length - 1]\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n    return this.minStack[this.minStack.length - 1]\n};\n\n/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=155 lang=javascript\n *\n * [155] Min Stack\n */\n/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this.stack = [];\n  this.minV = Number.MAX_VALUE;\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  // update 'min'\n  const minV = this.minV;\n  if (x < this.minV) {\n    this.minV = x;\n  }\n  return this.stack.push(x - minV);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const item = this.stack.pop();\n  const minV = this.minV;\n\n  if (item < 0) {\n    this.minV = minV - item;\n    return minV;\n  }\n  return item + minV;\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const item = this.stack[this.stack.length - 1];\n  const minV = this.minV;\n\n  if (item < 0) {\n    return minV;\n  }\n  return item + minV;\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this.minV;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n"},{language:"cpp",text:"\nclass MinStack {\n    stack<int> data;\n    stack<int> helper;\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n        \n    }\n    \n    void push(int x) {\n        data.push(x);\n        if(helper.empty() || helper.top() >= x)\n        {\n            helper.push(x);\n        }\n        \n    }\n    \n    void pop() {\n        int top = data.top();\n        data.pop();\n        if(top == helper.top())\n        {\n            helper.pop();\n        }\n        \n    }\n    \n    int top() {\n        return data.top();\n    }\n    \n    int getMin() {\n        return helper.top();\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n"},{language:"cpp",text:"\nclass MinStack {\n    stack<long> data;\n    long min = INT_MAX;\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n        \n    }\n    \n    void push(int x) {\n        data.push(x - min);\n        if(x < min)\n        {\n            min = x;\n        }\n        \n    }\n    \n    void pop() {\n        long top = data.top();\n        data.pop();\n        // \u66f4\u65b0\u6700\u5c0f\u503c\n        if(top < 0)\n        {\n            min -= top;\n        }\n        \n    }\n    \n    int top() {\n        long top = data.top();\n        // \u6700\u5c0f\u503c\u4e3a min\n        if (top < 0)\n        {\n            return min;\n        }\n        else{\n            return min+top;\n        }\n    }\n    \n    int getMin() {\n        return min;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n"},{language:"py",text:'\nclass MinStack:\n\n    def __init__(self):\n        """\n        initialize your data structure here.\n        """\n        self.stack = []\n        self.minstack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if not self.minstack or x <= self.minstack[-1]:\n            self.minstack.append(x)\n\n    def pop(self) -> None:\n        tmp = self.stack.pop()\n        if tmp == self.minstack[-1]:\n            self.minstack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def min(self) -> int:\n        return self.minstack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.min()\n'},{language:"py",text:'\nclass MinStack:\n\n    def __init__(self):\n        """\n        initialize your data structure here.\n        """\n        self.minV = float(\'inf\')\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x - self.minV)\n        if x < self.minV:\n            self.minV = x\n\n    def pop(self) -> None:\n        if not self.stack:\n            return\n        tmp = self.stack.pop()\n        if tmp < 0:\n            self.minV -= tmp\n\n    def top(self) -> int:\n        if not self.stack:\n            return\n        tmp = self.stack[-1]\n        if tmp < 0:\n            return self.minV\n        else:\n            return self.minV + tmp\n\n    def min(self) -> int:\n        return self.minV\n\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.min()\n'}]},"Intersection-of-Two-Linked-Lists":{id:"160",name:"Intersection-of-Two-Linked-Lists",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/160.Intersection-of-Two-Linked-Lists.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/160.Intersection-of-Two-Linked-Lists.md",code:[{language:"js",text:"x\ndata = new Set() // \u5b58\u653eA\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7684\u5730\u5740\n\nwhile A\u4e0d\u4e3a\u7a7a{\n  \u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0A\u94fe\u8868\u5f53\u524d\u8282\u70b9\n  A\u6307\u9488\u5411\u540e\u79fb\u52a8\n}\n\nwhile B\u4e0d\u4e3a\u7a7a{\n  if \u5982\u679c\u54c8\u5e0c\u8868\u4e2d\u542b\u6709B\u94fe\u8868\u5f53\u524d\u8282\u70b9\n    return B\n  B\u6307\u9488\u5411\u540e\u79fb\u52a8\n}\n\nreturn null // \u4e24\u6761\u94fe\u8868\u6ca1\u6709\u76f8\u4ea4\u70b9\n"},{language:"js",text:"\nlet data = new Set();\nwhile (A !== null) {\n  data.add(A);\n  A = A.next;\n}\nwhile (B !== null) {\n  if (data.has(B)) return B;\n  B = B.next;\n}\nreturn null;\n"},{language:"js",text:"\na = headA\nb = headB\nwhile a,b\u6307\u9488\u4e0d\u76f8\u7b49\u65f6 {\n    if a\u6307\u9488\u4e3a\u7a7a\u65f6\n      a\u6307\u9488\u91cd\u5b9a\u4f4d\u5230\u94fe\u8868 B\u7684\u5934\u7ed3\u70b9\n    else\n      a\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n    if b\u6307\u9488\u4e3a\u7a7a\u65f6\n      b\u6307\u9488\u91cd\u5b9a\u4f4d\u5230\u94fe\u8868 A\u7684\u5934\u7ed3\u70b9\n    else\n      b\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n}\nreturn a\n"},{language:"js",text:"\nvar getIntersectionNode = function (headA, headB) {\n  let a = headA,\n    b = headB;\n  while (a != b) {\n    a = a === null ? headB : a.next;\n    b = b === null ? headA : b.next;\n  }\n  return a;\n};\n"},{language:"py",text:"\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n"}]},"two-sum-ii-input-array-is-sorted":{id:"167",name:"two-sum-ii-input-array-is-sorted",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u7531\u4e8e\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u53cc\u6307\u9488\u66f4\u597d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"amazon"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md",code:[{language:"java",text:"\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int n = numbers.length;\n        int left = 0;\n        int right = n-1;\n        while(left <= right)\n        {\n            if(numbers[left] + numbers[right] == target)\n            {\n                return new int[]{left + 1, right + 1};\n            }\n            else if (numbers[left] + numbers[right] > target)\n            {\n                right--;\n            }\n            else\n            {\n                left++;\n            }\n        }\n\n        return new int[]{-1, -1};\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (numbers, target) {\n  const visited = {}; // \u8bb0\u5f55\u51fa\u73b0\u7684\u6570\u5b57\uff0c \u7a7a\u95f4\u590d\u6742\u5ea6N\n\n  for (let index = 0; index < numbers.length; index++) {\n    const element = numbers[index];\n    if (visited[target - element] !== void 0) {\n      return [visited[target - element], index + 1];\n    }\n    visited[element] = index + 1;\n  }\n  return [];\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        int n = numbers.size();\n        int left = 0;\n        int right = n-1;\n        while(left <= right)\n        {\n            if(numbers[left] + numbers[right] == target)\n            {\n                return {left + 1, right + 1};\n            }\n            else if (numbers[left] + numbers[right] > target)\n            {\n                right--;\n            }\n            else\n            {\n                left++;\n            }\n        }\n        return {-1, -1};\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        visited = {}\n        for index, number in enumerate(numbers):\n            if target - number in visited:\n                return [visited[target-number], index+1]\n            else:\n                visited[number] = index + 1\n\n# \u53cc\u6307\u9488\u601d\u8def\u5b9e\u73b0\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] < target:\n                left += 1\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n"}]},"majority-element":{id:"169",name:"majority-element",pre:[{text:"\u6295\u7968\u7b97\u6cd5",link:null,color:"geekblue"}],keyPoints:[{text:"\u6295\u7968\u7b97\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"adobe"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/169.majority-element.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/169.majority-element.md",code:[{language:"js",text:"\nvar majorityElement = function (nums) {\n  let count = 1;\n  let majority = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (count === 0) {\n      majority = nums[i];\n    }\n    if (nums[i] === majority) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return majority;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int ans = 0, cnt = 0;\n        for (int n : nums) {\n            if (ans == n) ++cnt;\n            else if (cnt > 0) --cnt;\n            else {\n                ans = n;\n                cnt = 1;\n            }\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        count, majority = 1, nums[0]\n        for num in nums[1:]:\n            if count == 0:\n                majority = num\n            if num == majority:\n                count += 1\n            else:\n                count -= 1\n        return majority\n"}]},"factorial-trailing-zeroes":{id:"172",name:"factorial-trailing-zeroes",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"orange"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"bloomberg"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=172 lang=javascript\n *\n * [172] Factorial Trailing Zeroes\n */\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function (n) {\n  // tag: \u6570\u8bba\n\n  // if (n === 0) return n;\n\n  // \u9012\u5f52\uff1a f(n) = n / 5 + f(n / 5)\n  // return Math.floor(n / 5)  + trailingZeroes(Math.floor(n / 5));\n  let count = 0;\n  while (n >= 5) {\n    count += Math.floor(n / 5);\n    n = Math.floor(n / 5);\n  }\n  return count;\n};\n"},{language:"js",text:"\nclass Solution {\n    public int trailingZeroes(int n) {\n        int res = 0;\n        while(n >= 5)\n        {\n            n/=5;\n            res += n;\n        }\n        return res;\n    }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        int res = 0;\n        while(n >= 5)\n        {\n            n/=5;\n            res += n;\n        }\n        return res;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        while n >= 5:\n            n = n // 5\n            count += n\n        return count\n\n\n# \u9012\u5f52\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        if n == 0: return 0\n        return n // 5 + self.trailingZeroes(n // 5)\n"}]},"reverse-bits":{id:"190",name:"reverse-bits",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u89e3\u67901.\u53ef\u4ee5\u7528\u4efb\u4f55\u6570\u5b57\u548c1\u8fdb\u884c\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u90fd\u53d6\u51b3\u4e8e\u8be5\u6570\u5b57\u6700\u540e\u4e00\u4f4d\u7684\u7279\u6027\u7b80\u5316\u64cd\u4f5c\u548c\u63d0\u9ad8\u6027\u80fdeg:",link:null,color:"blue"},{text:"n&1===1,\u8bf4\u660en\u7684\u6700\u540e\u4e00\u4f4d\u662f1",link:null,color:"blue"},{text:'n&1===0,\u8bf4\u660en\u7684\u6700\u540e\u4e00\u4f4d\u662f02.\u5bf9\u4e8eJS\uff0cES\u89c4\u8303\u5728\u4e4b\u524d\u5f88\u591a\u7248\u672c\u90fd\u662f\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u5f62\u7684\uff0c\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2atrick`n>>>0`3.\u53cc"\u6307\u9488"\u6a21\u578b4.bit\u8fd0\u7b97',link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"airbnb"},{name:"apple"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/190.reverse-bits.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/190.reverse-bits.md",code:[{language:"js",text:"\n/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function (n) {\n  let res = 0;\n  for (let i = 0; i < 32; i++) {\n    res = (res << 1) + (n & 1);\n    n = n >>> 1;\n  }\n\n  return res >>> 0;\n};\n"},{language:"py",text:"\nclass Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        result = 0\n        for i in range(32):\n            result = (result << 1) | (n & 1)\n            n >>= 1\n        return result\n# or\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ans = 0\n        for i in range(31, -1, -1):\n            ans |= ((n >> i) & 1) << (31 - i)\n        return ans\n"}]},"number-of-1-bits":{id:"191",name:"number-of-1-bits",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"\u89e3\u67901.`n&(n",link:null,color:"blue"},{text:"1)`\u53ef\u4ee5`\u6d88\u9664`n\u6700\u540e\u7684\u4e00\u4e2a1\u7684\u539f\u7406\u7b80\u5316\u64cd\u4f5c2.bit\u8fd0\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"apple"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/191.number-of-1-bits.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/191.number-of-1-bits.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=191 lang=javascript\n *\n */\n/**\n * @param {number} n - a positive integer\n * @return {number}\n */\nvar hammingWeight = function (n) {\n  let count = 0;\n  while (n !== 0) {\n    n = n & (n - 1);\n    count++;\n  }\n\n  return count;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int hammingWeight(uint32_t v) {\n        auto count = 0;\n        while (v != 0) {\n            v &= (v - 1);\n            ++count;\n        }\n        return count;\n    }\n};\n"},{language:"cpp",text:"\nconst uint32_t ODD_BIT_MASK = 0xAAAAAAAA;\nconst uint32_t EVEN_BIT_MASK = 0x55555555;\nconst uint32_t ODD_2BIT_MASK = 0xCCCCCCCC;\nconst uint32_t EVEN_2BIT_MASK = 0x33333333;\nconst uint32_t ODD_4BIT_MASK = 0xF0F0F0F0;\nconst uint32_t EVEN_4BIT_MASK = 0x0F0F0F0F;\nconst uint32_t ODD_8BIT_MASK = 0xFF00FF00;\nconst uint32_t EVEN_8BIT_MASK = 0x00FF00FF;\nconst uint32_t ODD_16BIT_MASK = 0xFFFF0000;\nconst uint32_t EVEN_16BIT_MASK = 0x0000FFFF;\n\nclass Solution {\npublic:\n\n    int hammingWeight(uint32_t v) {\n        v = (v & EVEN_BIT_MASK) + ((v & ODD_BIT_MASK) >> 1);\n        v = (v & EVEN_2BIT_MASK) + ((v & ODD_2BIT_MASK) >> 2);\n        v = (v & EVEN_4BIT_MASK) + ((v & ODD_4BIT_MASK) >> 4);\n        v = (v & EVEN_8BIT_MASK) + ((v & ODD_8BIT_MASK) >> 8);\n        return (v & EVEN_16BIT_MASK) + ((v & ODD_16BIT_MASK) >> 16);\n    }\n};\n"},{language:"py",text:'\nclass Solution(object):\n    def hammingWeight(self, n):\n        """\n        :type n: int\n        :rtype: int\n        """\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n'}]},"house-robber":{id:"198",name:"house-robber",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"},{name:"linkedin"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/198.house-robber.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/198.house-robber.md",code:[{language:"js",text:"\nlet a = 0;\nlet b = 0;\n\nfor (let i = 0; i < nums.length; i++) {\n  const temp = b;\n  b = Math.max(a + nums[i], b);\n  a = temp;\n}\n\nreturn b;\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function (nums) {\n  // Tag: DP\n  const dp = [];\n  dp[0] = 0;\n  dp[1] = 0;\n\n  for (let i = 2; i < nums.length + 2; i++) {\n    dp[i] = Math.max(dp[i - 2] + nums[i - 2], dp[i - 1]);\n  }\n\n  return dp[nums.length + 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        else:\n            prev = nums[0]\n            cur = max(prev, nums[1])\n            for i in range(2, length):\n                cur, prev = max(prev + nums[i], cur), cur\n            return cur\n"}]},"binary-tree-right-side-view":{id:"199",name:"binary-tree-right-side-view",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"},{text:"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe\u53ef\u4ee5\u770b\u4f5c\u662f\u5c42\u6b21\u904d\u5386\u6bcf\u6b21\u53ea\u53d6\u6bcf\u4e00\u5c42\u7684\u6700\u53f3\u8fb9\u7684\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/199.binary-tree-right-side-view.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/199.binary-tree-right-side-view.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar rightSideView = function(root) {\n  if (!root) return [];\n\n  const ret = [];\n  const queue = [root, null];\n\n  let levelNodes = [];\n\n  while (queue.length > 0) {\n    const node = queue.shift();\n    if (node !== null) {\n      levelNodes.push(node.val);\n      if (node.right) {\n        queue.push(node.right);\n      }\n      if (node.left) {\n        queue.push(node.left);\n      }\n    } else {\n      // \u4e00\u5c42\u904d\u5386\u5df2\u7ecf\u7ed3\u675f\n      ret.push(levelNodes[0]);\n      if (queue.length > 0) {\n        queue.push(null);\n      }\n      levelNodes = [];\n    }\n  }\n\n  return ret;\n};\n"}]},"number-of-islands":{id:"200",name:"number-of-islands",pre:[{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u7ef4\u6570\u7ec4DFS\u89e3\u9898\u6a21\u677f",link:null,color:"blue"},{text:"\u5c06\u5df2\u7ecf\u8bbf\u95ee\u7684\u5143\u7d20\u7f6e\u4e3a0\uff0c\u7701\u53bbvisited\u7684\u7a7a\u95f4\u5f00\u9500",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/200.number-of-islands.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/200.number-of-islands.md",code:[{language:"java",text:"\n   public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;\n\n        int count = 0;\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == '1') {\n                    dfs(grid, row, col);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private void dfs(char[][] grid,int row,int col) {\n        if (row<0||row== grid.length||col<0||col==grid[0].length||grid[row][col]!='1') {\n            return;\n        }\n        grid[row][col] = '0';\n        dfs(grid, row-1, col);\n        dfs(grid, row+1, col);\n        dfs(grid, row, col+1);\n        dfs(grid, row, col-1);\n    }\n"},{language:"js",text:'\n/*\n * @lc app=leetcode id=200 lang=javascript\n *\n * [200] Number of Islands\n */\nfunction helper(grid, i, j, rows, cols) {\n  if (i < 0 || j < 0 || i > rows - 1 || j > cols - 1 || grid[i][j] === "0")\n    return;\n\n  grid[i][j] = "0";\n\n  helper(grid, i + 1, j, rows, cols);\n  helper(grid, i, j + 1, rows, cols);\n  helper(grid, i - 1, j, rows, cols);\n  helper(grid, i, j - 1, rows, cols);\n}\n/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function (grid) {\n  let res = 0;\n  const rows = grid.length;\n  if (rows === 0) return 0;\n  const cols = grid[0].length;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === "1") {\n        helper(grid, i, j, rows, cols);\n        res++;\n      }\n    }\n  }\n  return res;\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int res = 0;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j] == '1')\n                {\n                    dfs(grid, i, j);\n                    res += 1;\n                }\n            }\n        }\n        return res;\n\n    }\n    void dfs(vector<vector<char>>& grid, int i, int j)\n    {\n        // edge\n        if(i<0 || i>= grid.size() || j<0 || j>= grid[0].size() || grid[i][j] != '1')\n        {\n            return;\n        }\n        grid[i][j] = '0';\n        dfs(grid, i+1, j);\n        dfs(grid, i-1, j);\n        dfs(grid, i, j+1);\n        dfs(grid, i, j-1);\n    }\n};\n\n"},{language:"py",text:"\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid: return 0\n\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '1':\n                    self.dfs(grid, i, j)\n                    count += 1\n\n        return count\n\n    def dfs(self, grid, i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1':\n            return\n        grid[i][j] = '0'\n        self.dfs(grid, i + 1, j)\n        self.dfs(grid, i - 1, j)\n        self.dfs(grid, i, j + 1)\n        self.dfs(grid, i, j - 1)\n\n"}]},"bitwise-and-of-numbers-range":{id:"201",name:"bitwise-and-of-numbers-range",pre:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"}],keyPoints:[{text:"n\u4e2a\u8fde\u7eed\u6570\u5b57\u6c42\u4e0e\u7684\u65f6\u5019\uff0c\u524dm\u4f4d\u90fd\u662f1",link:null,color:"blue"},{text:"\u53ef\u4ee5\u7528\u9012\u5f52\u5b9e\u73b0\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u96be\u60f3\u5230",link:null,color:"blue"},{text:"bit\u8fd0\u7b97\u4ee3\u7801\uff1a```jsn>m?rangeBitwiseAnd(m/2,n/2)<<1:m;```>\u6bcf\u6b21\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u8fd9\u662f\u4e8c\u5206\u6cd5\u5417\uff1f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md",code:[{language:"js",text:"\nlet res = m;\nfor (let i = m + 1; i <= n; i++) {\n  res = res & i;\n}\nreturn res;\n"},{language:"js",text:"\nn > m ? rangeBitwiseAnd(m / 2, n / 2) << 1 : m;\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=201 lang=javascript\n *\n * [201] Bitwise AND of Numbers Range\n *\n */\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar rangeBitwiseAnd = function (m, n) {\n  let count = 0;\n  while (m !== n) {\n    m = m >> 1;\n    n = n >> 1;\n    count++;\n  }\n\n  return n << count;\n};\n"},{language:"py",text:"\nclass Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        cnt = 0\n        while m != n:\n            m >>= 1\n            n >>= 1\n            cnt += 1\n\n        return m << cnt\n"}]},"remove-linked-list-elements":{id:"203",name:"remove-linked-list-elements",pre:[{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u5220\u9664\u6307\u5b9a\u8282\u70b9\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c>\u5176\u5b9e\u8bbe\u7f6edummy\u8282\u70b9\u5c31\u662f\u4e3a\u4e86\u5904\u7406\u7279\u6b8a\u4f4d\u7f6e\uff08\u5934\u8282\u70b9\uff09\uff0c\u8fd9\u8fd9\u9053\u9898\u5c31\u662f\u5982\u679c\u5934\u8282\u70b9\u662f\u7ed9\u5b9a\u7684\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u5462\uff1f>\u4e3a\u4e86\u4fdd\u8bc1\u4ee3\u7801\u903b\u8f91\u7684\u4e00\u81f4\u6027\uff0c\u5373\u4e0d\u9700\u8981\u4e3a\u5934\u8282\u70b9\u7279\u6b8a\u5b9a\u5236\u903b\u8f91\uff0c\u624d\u91c7\u7528\u7684\u865a\u62df\u8282\u70b9\u3002",link:null,color:"blue"},{text:"\u5982\u679c\u8fde\u7eed\u4e24\u4e2a\u8282\u70b9\u90fd\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u60c5\u51b5\u5bb9\u6613\u88ab\u5ffd\u7565\u3002eg:```js//\u53ea\u6709\u4e0b\u4e2a\u8282\u70b9\u4e0d\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u624d\u66f4\u65b0currentif(!next||next.val!==val){current=next;}```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/203.remove-linked-list-elements.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/203.remove-linked-list-elements.md",code:[{language:"js",text:"\n// \u53ea\u6709\u4e0b\u4e2a\u8282\u70b9\u4e0d\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u624d\u66f4\u65b0 current\nif (!next || next.val !== val) {\n  current = next;\n}\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function (head, val) {\n  const dummy = {\n    next: head,\n  };\n  let current = dummy;\n\n  while (current && current.next) {\n    let next = current.next;\n    if (next.val === val) {\n      current.next = next.next;\n      next = next.next;\n    }\n\n    if (!next || next.val !== val) {\n      current = next;\n    }\n  }\n\n  return dummy.next;\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        prev = ListNode(0)\n        prev.next = head\n        cur = prev\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return prev.next\n"}]},"reverse-linked-list":{id:"206",name:"reverse-linked-list",pre:[{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u4ea4\u6362\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u6ce8\u610f\u66f4\u65b0current\u548cpre\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u6709\u53ef\u80fd\u51fa\u73b0\u6ea2\u51fa",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"adobe"},{name:"amazon"},{name:"apple"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"},{name:"snapchat"},{name:"twitter"},{name:"uber"},{name:"yahoo"},{name:"yelp"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/206.reverse-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md",code:[{language:"java",text:"\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode pre = null, cur = head;\n\n        while (cur != null) {\n            ListNode next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n\n        return pre;\n    }\n}\n"},{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  if (!head || !head.next) return head;\n\n  let cur = head;\n  let pre = null;\n\n  while (cur) {\n    const next = cur.next;\n    cur.next = pre;\n    pre = cur;\n    cur = next;\n  }\n\n  return pre;\n};\n"},{language:"js",text:"\nvar reverseList = function (head) {\n  // \u9012\u5f52\u7ed3\u675f\u6761\u4ef6\n  if (head === null || head.next === null) {\n    return head;\n  }\n\n  // \u9012\u5f52\u53cd\u8f6c \u5b50\u94fe\u8868\n  let newReverseList = reverseList(head.next);\n  // \u83b7\u53d6\u539f\u6765\u94fe\u8868\u7684\u7b2c 2 \u4e2a\u8282\u70b9 newReverseListTail\n  let newReverseListTail = head.next;\n  // \u8c03\u6574\u539f\u6765\u5934\u7ed3\u70b9\u548c\u7b2c 2 \u4e2a\u8282\u70b9\u7684\u6307\u5411\n  newReverseListTail.next = head;\n  head.next = null;\n\n  // \u5c06\u8c03\u6574\u540e\u7684\u94fe\u8868\u8fd4\u56de\n  return newReverseList;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* cur = head;\n        ListNode* next = NULL;\n        while (cur != NULL) {\n            next = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = next;\n        }\n        return prev;\n    }\n};\n"},{language:"cpp",text:"\n// \u666e\u901a\u9012\u5f52\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* tail = nullptr;\n        return reverseRecursive(head, tail);\n    }\n\n    ListNode* reverseRecursive(ListNode *head, ListNode *&tail) {\n        if (head == nullptr) {\n            tail = nullptr;\n            return head;\n        }\n        if (head->next == nullptr) {\n            tail = head;\n            return head;\n        }\n        auto h = reverseRecursive(head->next, tail);\n        if (tail != nullptr) {\n            tail->next = head;\n            tail = head;\n            head->next = nullptr;\n        }\n        return h;\n    }\n};\n\n// \uff08\u7c7b\u4f3c\uff09\u5c3e\u9012\u5f52\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == nullptr) return head;\n        return reverseRecursive(nullptr, head, head->next);\n    }\n\n    ListNode* reverseRecursive(ListNode *prev, ListNode *head, ListNode *next)\n    {\n        if (next == nullptr) return head;\n        auto n = next->next;\n        next->next = head;\n        head->next = prev;\n        return reverseRecursive(head, next, n);\n    }\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head: return None\n        prev = None\n        cur = head\n        while cur:\n            cur.next, prev, cur = prev, cur, cur.next\n        return prev\n"},{language:"py",text:"\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head or not head.next: return head\n        ans = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return ans\n"}]},"implement-trie-prefix-tree":{id:"208",name:"implement-trie-prefix-tree",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md",code:[{language:"js",text:"\nfunction TrieNode(val) {\n  this.val = val; // \u5f53\u524d\u7684\u5b57\u6bcd\n  this.children = []; // \u9898\u76ee\u8981\u6c42\u5b57\u5178\u4ec5\u6709a-z\uff0c\u90a3\u4e48\u5176\u957f\u5ea6\u6700\u5927\u4e3a26\uff0826\u4e2a\u5b57\u6bcd\uff09\n  this.isWord = false;\n}\n"},{language:"js",text:'\nfunction computeIndex(c) {\n  return c.charCodeAt(0) - "a".charCodeAt(0);\n}\n'},{language:"js",text:'\n/*\n * @lc app=leetcode id=208 lang=javascript\n *\n * [208] Implement Trie (Prefix Tree)\n *\n * https://leetcode.com/problems/implement-trie-prefix-tree/description/\n *\n * algorithms\n * Medium (36.93%)\n * Total Accepted:    172K\n * Total Submissions: 455.5K\n * Testcase Example:  \'["Trie","insert","search","search","startsWith","insert","search"]\\n[[],["apple"],["apple"],["app"],["app"],["app"],["app"]]\'\n *\n * Implement a trie with insert, search, and startsWith methods.\n *\n * Example:\n *\n *\n * Trie trie = new Trie();\n *\n * trie.insert("apple");\n * trie.search("apple");   // returns true\n * trie.search("app");     // returns false\n * trie.startsWith("app"); // returns true\n * trie.insert("app");\n * trie.search("app");     // returns true\n *\n *\n * Note:\n *\n *\n * You may assume that all inputs are consist of lowercase letters a-z.\n * All inputs are guaranteed to be non-empty strings.\n *\n *\n */\nfunction TrieNode(val) {\n  this.val = val;\n  this.children = [];\n  this.isWord = false;\n}\n\nfunction computeIndex(c) {\n  return c.charCodeAt(0) - "a".charCodeAt(0);\n}\n/**\n * Initialize your data structure here.\n */\nvar Trie = function () {\n  this.root = new TrieNode(null);\n};\n\n/**\n * Inserts a word into the trie.\n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function (word) {\n  let ws = this.root;\n  for (let i = 0; i < word.length; i++) {\n    const c = word[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) {\n      ws.children[current] = new TrieNode(c);\n    }\n    ws = ws.children[current];\n  }\n  ws.isWord = true;\n};\n\n/**\n * Returns if the word is in the trie.\n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function (word) {\n  let ws = this.root;\n  for (let i = 0; i < word.length; i++) {\n    const c = word[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) return false;\n    ws = ws.children[current];\n  }\n  return ws.isWord;\n};\n\n/**\n * Returns if there is any word in the trie that starts with the given prefix.\n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function (prefix) {\n  let ws = this.root;\n  for (let i = 0; i < prefix.length; i++) {\n    const c = prefix[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) return false;\n    ws = ws.children[current];\n  }\n  return true;\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */\n'}]},"minimum-size-subarray-sum":{id:"209",name:"minimum-size-subarray-sum",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"}],keyPoints:[{text:"\u6ed1\u52a8\u7a97\u53e3\u7b80\u5316\u64cd\u4f5c(\u6ed1\u7a97\u53e3\u9002\u5408\u7528\u4e8e\u6c42\u89e3\u8fd9\u79cd\u8981\u6c42`\u8fde\u7eed`\u7684\u9898\u76ee)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=209 lang=javascript\n *\n * [209] Minimum Size Subarray Sum\n *\n */\n/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function (s, nums) {\n  if (nums.length === 0) return 0;\n  const slideWindow = [];\n  let acc = 0;\n  let min = null;\n\n  for (let i = 0; i < nums.length + 1; i++) {\n    const num = nums[i];\n\n    while (acc >= s) {\n      if (min === null || slideWindow.length < min) {\n        min = slideWindow.length;\n      }\n      acc = acc - slideWindow.shift();\n    }\n\n    slideWindow.push(num);\n\n    acc = slideWindow.reduce((a, b) => a + b, 0);\n  }\n\n  return min || 0;\n};\n"},{language:"js",text:"\nvar minSubArrayLen = function (s, nums) {\n  if (nums.length === 0) return 0;\n  const slideWindow = [];\n  let acc = 0;\n  let min = null;\n\n  for (let i = 0; i < nums.length + 1; i++) {\n    const num = nums[i];\n\n    while (acc > s) {\n      acc = acc - slideWindow.shift();\n    }\n    if (acc === s) {\n      if (min === null || slideWindow.length < min) {\n        min = slideWindow.length;\n      }\n      slideWindow.shift();\n    }\n\n    slideWindow.push(num);\n\n    acc = slideWindow.reduce((a, b) => a + b, 0);\n  }\n\n  return min || 0;\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        l = total = 0\n        ans = len(nums) + 1\n        for r in range(len(nums)):\n            total += nums[r]\n            while total >= s:\n                ans = min(ans, r - l + 1)\n                total -= nums[l]\n                l += 1\n        return  0 if ans == len(nums) + 1 else ans\n"}]},"add-and-search-word-data-structure-design":{id:"211",name:"add-and-search-word-data-structure-design",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811\uff08\u4e5f\u53eb\u5b57\u5178\u6811\uff09\uff0c\u82f1\u6587\u540dTrie\uff08\u8bfb\u4f5ctree\u6216\u8005try\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md",code:[{language:"py",text:'\ndef search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for i, w in enumerate(word):\n            if w == \'.\':\n                wizards = []\n                for k in curr.keys():\n                    if k == \'#\':\n                        continue\n                    wizards.append(self.search(word[:i] + k + word[i + 1:]))\n                return any(wizards)\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\ndef search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for i, w in enumerate(word):\n            if w == \'.\':\n                wizards = []\n                for k in curr.keys():\n                    if k == \'#\':\n                        continue\n                    wizards.append(self.search(word[:i] + k + word[i + 1:]))\n                return any(wizards)\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\nclass WordDictionary:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.trie = Trie()\n\n    def addWord(self, word: str) -> None:\n        """\n        Adds a word into the data structure.\n        """\n        self.trie.insert(word)\n\n    def search(self, word: str) -> bool:\n        """\n        Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter.\n        """\n        return self.trie.search(word)\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)\n'}]},"word-search-ii":{id:"212",name:"word-search-ii",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"},{text:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/DFS.md",color:"geekblue"},{text:"\u5c0f\u5c9b\u4e13\u9898",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/island.md",color:"purple"},{text:"\u526a\u679d",link:null,color:"gold"}],keyPoints:[{text:"\u524d\u7f00\u6811\uff08\u4e5f\u53eb\u5b57\u5178\u6811\uff09\uff0c\u82f1\u6587\u540dTrie\uff08\u8bfb\u4f5ctree\u6216\u8005try\uff09",link:null,color:"blue"},{text:"DFS",link:null,color:"blue"},{text:"\u526a\u679d\u7684\u6280\u5de7",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/212.word-search-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/212.word-search-ii.md",code:[{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def startsWith(self, prefix):\n        """\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        """\n\n        curr = self.Trie\n        for w in prefix:\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return True\n'},{language:"py",text:'\nclass Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        m = len(board)\n        if m == 0:\n            return []\n        n = len(board[0])\n        trie = Trie()\n        seen = None\n        res = set()\n        for word in words:\n            trie.insert(word)\n\n        def dfs(s, i, j):\n            if (i, j) in seen or i < 0 or i >= m or j < 0 or j >= n or not trie.startsWith(s):\n                return\n            s += board[i][j]\n            seen[(i, j)] = True\n\n            if s in words:\n                res.add(s)\n            dfs(s, i + 1, j)\n            dfs(s, i - 1, j)\n            dfs(s, i, j + 1)\n            dfs(s, i, j - 1)\n\n            del seen[(i, j)]\n\n        for i in range(m):\n            for j in range(n):\n                seen = dict()\n                dfs("", i, j)\n        return list(res)\n'}]},"kth-largest-element-in-an-array":{id:"215",name:"kth-largest-element-in-an-array",pre:[{text:"\u5806",link:null,color:"green"},{text:"Quick Select",link:null,color:"lime"}],keyPoints:[{text:"\u5206\u67901.\u76f4\u63a5\u6392\u5e8f\u5f88\u7b80\u53552.\u5806\uff08Heap\uff09\u4e3b\u8981\u662f\u8981\u7ef4\u62a4\u4e00\u4e2aK\u5927\u5c0f\u7684\u5c0f\u9876\u5806\uff0c\u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u6700\u540e\u5806\u9876\u5143\u7d20\u5373\u662f\u6240\u6c42\u30023.QuickSelect,\u5173\u952e\u662f\u662f\u53d6pivot\uff0c\u5bf9\u6570\u7ec4\u533a\u95f4\u505apartition\uff0c\u6bd4\u8f83pivot\u7684\u4f4d\u7f6e\uff0c\u7c7b\u4f3c\u4e8c\u5206\uff0c\u53d6pivot\u5de6\u8fb9\u6216\u53f3\u8fb9\u7ee7\u7eed\u9012\u5f52\u67e5\u627e\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md",code:[{language:"java",text:"\nclass KthLargestElementSort {\n public int findKthlargest2(int[] nums, int k) {\n    Arrays.sort(nums);\n    return nums[nums.length - k];\n  }\n}\n"},{language:"java",text:"\nclass KthLargestElementHeap {\n  public int findKthLargest(int[] nums, int k) {\n      PriorityQueue<Integer> pq = new PriorityQueue<>();\n      for (int num : nums) {\n        pq.offer(num);\n        if (pq.size() > k) {\n          pq.poll();\n        }\n      }\n      return pq.poll();\n  }\n}\n"},{language:"java",text:"\nclass KthLargestElementQuickSelect {\n    static Random random = new Random();\n    public int findKthLargest3(int[] nums, int k) {\n      int len = nums.length;\n      return select(nums, 0, len - 1, len - k);\n    }\n    \n    private int select(int[] nums, int left, int right, int k) {\n      if (left == right) return nums[left];\n      // random select pivotIndex between left and right\n      int pivotIndex = left + random.nextInt(right - left);\n      // do partition, move smaller than pivot number into pivot left\n      int pos = partition(nums, left, right, pivotIndex);\n      if (pos == k) {\n        return nums[pos];\n      } else if (pos > k) {\n        return select(nums, left, pos - 1, k);\n      } else {\n        return select(nums, pos + 1, right, k);\n      }\n    }\n    \n    private int partition(int[] nums, int left, int right, int pivotIndex) {\n      int pivot = nums[pivotIndex];\n      // move pivot to end\n      swap(nums, right, pivotIndex);\n      int pos = left;\n      // move smaller num to pivot left\n      for (int i = left; i <= right; i++) {\n        if (nums[i] < pivot) {\n          swap(nums, pos++, i);\n        }\n      }\n      // move pivot to original place\n      swap(nums, right, pos);\n      return pos;\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n      int tmp = nums[i];\n      nums[i] = nums[j];\n      nums[j] = tmp;\n    }\n}\n"}]},"contains-duplicate-ii":{id:"219",name:"contains-duplicate-ii",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/219.contains-duplicate-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/219.contains-duplicate-ii.md",code:[{language:"java",text:"\nclass Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i=0;i<nums.length;i++)\n        {\n            if(map.get(nums[i]) != null && (i-map.get(nums[i])) <= k)\n            {\n                return true;\n            }\n            map.put(nums[i], i);\n        }\n        return false;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function (nums, k) {\n  const visited = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (visited[num] !== undefined && i - visited[num] <= k) {\n      return true;\n    }\n    visited[num] = i;\n  }\n  return false;\n};\n"},{language:"py",text:"\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        d = {}\n        for index, num in enumerate(nums):\n            if num in d and index - d[num] <= k:\n                return True\n            d[num] = index\n        return False\n"}]},"contains-duplicate-iii":{id:"220",name:"contains-duplicate-iii",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u6876\u6392\u5e8f\u601d\u60f3\u7684\u5e94\u7528",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/220.contains-duplicate-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/220.contains-duplicate-iii.md",code:[{language:"cpp",text:"\nclass Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n        if(t<0) return false;\n        //t+1\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u8981+ 1LL\n        long long mod = t + 1LL;\n        unordered_map<long long,long long> buck;\n        for(int i=0;i<nums.size();i++)\n        {\n            long long nth = nums[i] / mod;\n            //\u53ef\u80fdnums[i]\u4e3a\u8d1f\u6570\uff0c\u6bd4\u5982-4 / 5 \u4ee5\u53ca -4 / 5\u90fd\u7b49\u4e8e0\uff0c\u6240\u4ee5\u8d1f\u6570\u8981\u5411\u4e0b\u79fb\u52a8\u4e00\u4f4d\n            if(nums[i] < 0) nth--;\n            //\u8fd9\u91cc\u8981\u7528find \u4e0d\u80fd\u76f4\u63a5[],\u56e0\u4e3a\u53ef\u80fd\u672c\u8eab\u5b58\u50a8\u7684\u6570\u5b57\u5c31\u4e3a0\n            if(buck.find(nth)!=buck.end())\n                return true;\n            else if(buck.find(nth-1)!=buck.end() && abs(nums[i] - buck[nth-1]) <= t)\n                return true;\n            else if(buck.find(nth+1)!=buck.end() && abs(nums[i] - buck[nth+1]) <= t)\n                return true;\n            buck[nth] = nums[i];\n            if(i >= k)\n            {\n                buck.erase(nums[i - k] / mod);\n            }\n        }\n        return false;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= t and j - i  <= k:\n                    return True\n        return False\n"},{language:"py",text:"\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        for i in range(len(nums)):\n            for j in range(i + 1, min(len(nums), i + k + 1)):\n                if abs(nums[i] - nums[j]) <= t:\n                    return True\n        return False\n"},{language:"py",text:"\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        bucket = dict()\n        if t < 0: return False\n        for i in range(len(nums)):\n            nth = nums[i] // (t + 1)\n            if nth in bucket:\n                return True\n            if nth - 1 in bucket and abs(nums[i] - bucket[nth - 1]) <= t:\n                return True\n            if nth + 1 in bucket and abs(nums[i] - bucket[nth + 1]) <= t:\n                return True\n            bucket[nth] = nums[i]\n            if i >= k: bucket.pop(nums[i - k] // (t + 1))\n        return False\n"}]},"maximal-square":{id:"221",name:"maximal-square",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"DP",link:null,color:"blue"},{text:"\u9012\u5f52\u516c\u5f0f\u53ef\u4ee5\u5229\u7528dp[i",link:null,color:"blue"},{text:"1][j]\u548cdp[i][j",link:null,color:"blue"},{text:"1]\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u91cd\u65b0\u8ba1\u7b97",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u4f4e\u5230O(n),n\u4e3a\u5217\u6570",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/221.maximal-square.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/221.maximal-square.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=221 lang=javascript\n *\n * [221] Maximal Square\n */\n/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function (matrix) {\n  if (matrix.length === 0) return 0;\n  const dp = [];\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  let max = Number.MIN_VALUE;\n\n  for (let i = 0; i < rows + 1; i++) {\n    if (i === 0) {\n      dp[i] = Array(cols + 1).fill(0);\n    } else {\n      dp[i] = [0];\n    }\n  }\n\n  for (let i = 1; i < rows + 1; i++) {\n    for (let j = 1; j < cols + 1; j++) {\n      if (matrix[i - 1][j - 1] === "1") {\n        dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1;\n        max = Math.max(max, dp[i][j]);\n      } else {\n        dp[i][j] = 0;\n      }\n    }\n  }\n\n  return max * max;\n};\n'},{language:"py",text:'\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        res = 0\n        m = len(matrix)\n        if m == 0:\n            return 0\n        n = len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 if matrix[i - 1][j - 1] == "1" else 0\n                res = max(res, dp[i][j])\n        return res ** 2\n'}]},"invert-binary-tree":{id:"226",name:"invert-binary-tree",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u9012\u5f52\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6811\u5f88\u9ad8\uff0c\u5efa\u8bae\u4f7f\u7528\u6808\u6765\u4ee3\u66ff\u9012\u5f52",link:null,color:"blue"},{text:"\u8fd9\u9053\u9898\u76ee\u5bf9\u987a\u5e8f\u6ca1\u8981\u6c42\u7684\uff0c\u56e0\u6b64\u961f\u5217\u6570\u7ec4\u64cd\u4f5c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u65e0\u4efb\u4f55\u533a\u522b",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/226.invert-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/226.invert-binary-tree.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (!root) return root;\n  // \u9012\u5f52\n  //   const left = root.left;\n  //   const right = root.right;\n  //   root.right = invertTree(left);\n  //   root.left = invertTree(right);\n  // \u6211\u4eec\u7528stack\u6765\u6a21\u62df\u9012\u5f52\n  // \u672c\u8d28\u4e0a\u9012\u5f52\u662f\u5229\u7528\u4e86\u6267\u884c\u6808\uff0c\u6267\u884c\u6808\u4e5f\u662f\u4e00\u79cd\u6808\n  // \u5176\u5b9e\u8fd9\u91cc\u4f7f\u7528\u961f\u5217\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u8fd9\u91cc\u987a\u5e8f\u4e0d\u91cd\u8981\n\n  const stack = [root];\n  let current = null;\n  while ((current = stack.shift())) {\n    const left = current.left;\n    const right = current.right;\n    current.right = left;\n    current.left = right;\n    if (left) {\n      stack.push(left);\n    }\n    if (right) {\n      stack.push(right);\n    }\n  }\n  return root;\n};\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        stack = [root]\n        while stack:\n            node = stack.pop(0)\n            node.left, node.right = node.right, node.left\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return root\n"}]},"basic-calculator-ii":{id:"227",name:"basic-calculator-ii",pre:[{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u533a\u5206\u4e00\u76ee\u548c\u4e8c\u76ee\u8fd0\u7b97\u7b26\uff0c\u5e76\u4f7f\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u8bb0\u5f55pre_flag\uff0c\u5373\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u64cd\u4f5c\u7b26",link:null,color:"blue"},{text:"\u4f7f\u7528\u54e8\u5175\u7b80\u5316\u64cd\u4f5c\u3002\u4e00\u4e2a\u662fs\u7684$\uff0c\u53e6\u4e00\u4e2a\u662fpre_flag\u7684+",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/227.basic-calculator-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/227.basic-calculator-ii.md",code:[{language:"py",text:"\n1 + 2\n"},{language:"py",text:"\n+ 1 + 2\n# \u53ef\u770b\u6210\n(+1)(+2)\n"},{language:"py",text:"\n(-1)(+2)(+3)(-4)\n"},{language:"py",text:"\n(5) / (2)\n"},{language:"py",text:"\n(3) * (4)\n"},{language:"py",text:"\nclass Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        s += '$'\n        pre_flag = '+'\n        num = 0\n\n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c == ' ': continue\n            else:\n                if pre_flag == '+':\n                    stack.append(num)\n                elif pre_flag == '-':\n                    stack.append(-num)\n                elif pre_flag == '*':\n                    stack.append(stack.pop() * num)\n                elif pre_flag == '/':\n                    stack.append(int(stack.pop() / num))\n                pre_flag = c\n                num = 0\n        return sum(stack)\n\n"},{language:"py",text:"\nclass Solution:\n    def calculate(self, s: str) -> int:\n        def dfs(s, start):\n            stack = []\n            pre_flag = '+'\n            num = 0\n            i = start\n            while i < len(s):\n                c = s[i]\n                if  c == ' ':\n                    i += 1\n                    continue\n                elif c == '(':\n                    i, num = dfs(s, i+1)\n                elif c.isdigit():\n                    num = num * 10 + int(c)\n                else:\n                    if pre_flag == '+':\n                        stack.append(num)\n                    elif pre_flag == '-':\n                        stack.append(-num)\n                    if c == ')': break\n                    pre_flag = c\n                    num = 0\n                i += 1\n            return i, sum(stack)\n        s += '$'\n        return dfs(s, 0)[1]\n\n"},{language:"py",text:"\nif c == ')':\n    if pre_flag == '+':\n        stack.append(num)\n    elif pre_flag == '-':\n        stack.append(-num)\n    break\n"}]},"majority-element-ii":{id:"229",name:"majority-element-ii",pre:[{text:"\u6469\u5c14\u6295\u7968\u6cd5",link:null,color:"orange"}],keyPoints:[{text:"\u6469\u5c14\u6295\u7968\u6cd5",link:null,color:"blue"},{text:"\u4e24\u4e2acounter",link:null,color:"blue"},{text:"\u6700\u540e\u5f97\u5230\u7684\u53ea\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u6709\u53ef\u80fd\u4e0d\u6ee1\u8db3\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1/3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/229.majority-element-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/229.majority-element-ii.md",code:[{language:"java",text:"\n/*\n * @lc app=leetcode id=229 lang=java\n *\n * [229] Majority Element II\n */\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (nums == null || nums.length == 0)\n            return res;\n        int n1 = nums[0], n2 = nums[0], cnt1 = 0, cnt2 = 0, len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (nums[i] == n1)\n                cnt1++;\n            else if (nums[i] == n2)\n                cnt2++;\n            else if (cnt1 == 0) {\n                n1 = nums[i];\n                cnt1 = 1;\n            } else if (cnt2 == 0) {\n                n2 = nums[i];\n                cnt2 = 1;\n            } else {\n                cnt1--;\n                cnt2--;\n            }\n        }\n        cnt1 = 0;\n        cnt2 = 0;\n        for (int i = 0; i < len; i++) {\n            if (nums[i] == n1)\n                cnt1++;\n            else if (nums[i] == n2)\n                cnt2++;\n        }\n        if (cnt1 > len / 3)\n            res.add(n1);\n        if (cnt2 > len / 3 && n1 != n2)\n            res.add(n2);\n        return res;\n    }\n}\n\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=229 lang=javascript\n *\n * [229] Majority Element II\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function (nums) {\n  const res = [];\n  const len = nums.length;\n  let n1 = null,\n    n2 = null,\n    cnt1 = 0,\n    cnt2 = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (n1 === nums[i]) {\n      cnt1++;\n    } else if (n2 === nums[i]) {\n      cnt2++;\n    } else if (cnt1 === 0) {\n      n1 = nums[i];\n      cnt1++;\n    } else if (cnt2 === 0) {\n      n2 = nums[i];\n      cnt2++;\n    } else {\n      cnt1--;\n      cnt2--;\n    }\n  }\n\n  cnt1 = 0;\n  cnt2 = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (n1 === nums[i]) {\n      cnt1++;\n    } else if (n2 === nums[i]) {\n      cnt2++;\n    }\n  }\n\n  if (cnt1 > (len / 3) >>> 0) {\n    res.push(n1);\n  }\n  if (cnt2 > (len / 3) >>> 0) {\n    res.push(n2);\n  }\n\n  return res;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        int c1 = 0, c2 = 0, v1 = 0, v2 = 1;\n        for (int n : nums) {\n            if (v1 == n) ++c1;\n            else if (v2 == n) ++c2;\n            else if (!c1) v1 = n, ++c1;\n            else if (!c2) v2 = n, ++c2;\n            else --c1, --c2;\n        }\n        c1 = c2 = 0;\n        for (int n : nums) {\n            if (v1 == n) ++c1;\n            if (v2 == n) ++c2;\n        }\n        vector<int> v;\n        if (c1 > nums.size() / 3) v.push_back(v1);\n        if (c2 > nums.size() / 3) v.push_back(v2);\n        return v;\n    }\n};\n"}]},"kth-smallest-element-in-a-bst":{id:"230",name:"kth-smallest-element-in-a-bst",pre:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"red"}],keyPoints:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nprivate int count = 1;\nprivate int res;\n\npublic int KthSmallest (TreeNode root, int k) {\n    inorder(root, k);\n    return res;\n}\n\npublic void inorder (TreeNode root, int k) {\n    if (root == null) return;\n\n    inorder(root.left, k);\n\n    if (count++ == k) {\n        res = root.val;\n        return;\n    }\n\n    inorder(root.right, k);\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=230 lang=javascript\n *\n * [230] Kth Smallest Element in a BST\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function (root, k) {\n  const stack = [root];\n  let cur = root;\n  let i = 0;\n\n  function insertAllLefts(cur) {\n    while (cur && cur.left) {\n      const l = cur.left;\n      stack.push(l);\n      cur = l;\n    }\n  }\n  insertAllLefts(cur);\n\n  while ((cur = stack.pop())) {\n    i++;\n    if (i === k) return cur.val;\n    const r = cur.right;\n\n    if (r) {\n      stack.push(r);\n      insertAllLefts(r);\n    }\n  }\n\n  return -1;\n};\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction nodeCount(node) {\n  if (node === null) return 0;\n\n  const l = nodeCount(node.left);\n  const r = nodeCount(node.right);\n\n  return 1 + l + r;\n}\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function (root, k) {\n  const c = nodeCount(root.left);\n  if (c === k - 1) return root.val;\n  else if (c < k - 1) return kthSmallest(root.right, k - c - 1);\n  return kthSmallest(root.left, k);\n};\n"}]},"implement-queue-using-stacks":{id:"232",name:"implement-queue-using-stacks",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u5728push\u7684\u65f6\u5019\u5229\u7528\u8f85\u52a9\u6808(\u53cc\u6808)",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/232.implement-queue-using-stacks.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/232.implement-queue-using-stacks.md",code:[{language:"java",text:"\nclass MyQueue {\n    Stack<Integer> pushStack = new Stack<> ();\n    Stack<Integer> popStack = new Stack<> ();\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        while (!popStack.isEmpty()) {\n            pushStack.push(popStack.pop());\n        }\n        pushStack.push(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        while (!pushStack.isEmpty()) {\n            popStack.push(pushStack.pop());\n        }\n        return popStack.pop();\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        while (!pushStack.isEmpty()) {\n            popStack.push(pushStack.pop());\n        }\n        return popStack.peek();\n    }\n\n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return pushStack.isEmpty() && popStack.isEmpty();\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=232 lang=javascript\n *\n * [232] Implement Queue using Stacks\n */\n/**\n * Initialize your data structure here.\n */\nvar MyQueue = function () {\n  // tag: queue stack array\n  this.stack = [];\n  this.helperStack = [];\n};\n\n/**\n * Push element x to the back of queue.\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n  let cur = null;\n  while ((cur = this.stack.pop())) {\n    this.helperStack.push(cur);\n  }\n  this.helperStack.push(x);\n\n  while ((cur = this.helperStack.pop())) {\n    this.stack.push(cur);\n  }\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n  return this.stack.pop();\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n  return this.stack[this.stack.length - 1];\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n  return this.stack.length === 0;\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n"},{language:"py",text:'\nclass MyQueue:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.stack = []\n        self.help_stack = []\n\n    def push(self, x: int) -> None:\n        """\n        Push element x to the back of queue.\n        """\n        while self.stack:\n            self.help_stack.append(self.stack.pop())\n        self.help_stack.append(x)\n        while self.help_stack:\n            self.stack.append(self.help_stack.pop())\n\n    def pop(self) -> int:\n        """\n        Removes the element from in front of queue and returns that element.\n        """\n        return self.stack.pop()\n\n    def peek(self) -> int:\n        """\n        Get the front element.\n        """\n        return self.stack[-1]\n\n    def empty(self) -> bool:\n        """\n        Returns whether the queue is empty.\n        """\n        return not bool(self.stack)\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()\n'}]},"lowest-common-ancestor-of-a-binary-tree":{id:"236",name:"lowest-common-ancestor-of-a-binary-tree",pre:[{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u7528\u9012\u5f52\u7684\u601d\u8def\u53bb\u601d\u8003\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md",code:[{language:"js",text:"\n// \u5982\u679c\u6211\u4eec\u627e\u5230\u4e86p\uff0c\u76f4\u63a5\u8fdb\u884c\u8fd4\u56de\uff0c\u90a3\u5982\u679c\u4e0b\u9762\u5c31\u662fq\u5462\uff1f \u5176\u5b9e\u8fd9\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u591a\u8003\u8651\u4e00\u4e0b\nif (!root || root === p || root === q) return root;\nconst left = lowestCommonAncestor(root.left, p, q); // \u53bb\u5de6\u8fb9\u627e\uff0c\u6211\u4eec\u671f\u671b\u8fd4\u56de\u627e\u5230\u7684\u8282\u70b9\nconst right = lowestCommonAncestor(root.right, p, q); // \u53bb\u53f3\u8fb9\u627e\uff0c\u6211\u4eec\u671f\u671b\u8fd4\u56de\u627e\u5230\u7684\u8282\u70b9\nif (!left) return right; // \u5de6\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u53f3\u5b50\u6811\nif (!right) return left; // \u53f3\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\nreturn root; // \u5de6\u53f3\u5b50\u6811\u5206\u522b\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deroot\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  if (!root || root === p || root === q) return root;\n  const left = lowestCommonAncestor(root.left, p, q);\n  const right = lowestCommonAncestor(root.right, p, q);\n  if (!left) return right; // \u5de6\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u53f3\u5b50\u6811\n  if (!right) return left; // \u53f3\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\n  return root; // \u5de6\u53f3\u5b50\u6811\u5206\u522b\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deroot\n};\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root or root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n\n        if not left:\n            return right\n        if not right:\n            return left\n        else:\n            return root\n\n"}]},"product-of-array-except-self":{id:"238",name:"product-of-array-except-self",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u4e24\u6b21\u904d\u5386\uff0c\u4e00\u6b21\u6b63\u5411\uff0c\u4e00\u6b21\u53cd\u5411\u3002",link:null,color:"blue"},{text:"\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\uff0c\u7b2ci\u9879\u4ee3\u8868\u524di\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u62eci\uff09\u7684\u4e58\u79ef",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/238.product-of-array-except-self.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/238.product-of-array-except-self.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  const ret = [];\n\n  for (let i = 0, temp = 1; i < nums.length; i++) {\n    ret[i] = temp;\n    temp *= nums[i];\n  }\n  // \u6b64\u65f6ret[i]\u5b58\u653e\u7684\u662f\u524di\u4e2a\u5143\u7d20\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u5982\u679c\u6ca1\u6709\u4e0a\u9762\u7684\u5faa\u73af\u7684\u8bdd\uff0c\n  // ret\u7ecf\u8fc7\u4e0b\u9762\u7684\u5faa\u73af\u4f1a\u53d8\u6210ret[i]\u5b58\u653e\u7684\u662f\u540ei\u4e2a\u5143\u7d20\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u6211\u4eec\u7684\u76ee\u6807\u662fret[i]\u5b58\u653e\u7684\u6240\u6709\u6570\u5b57\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u5faa\u73af\u4ea7\u751f\u7684ret[i]\u57fa\u7840\u4e0a\u8fd0\u7b97\u5373\u53ef\n  for (let i = nums.length - 1, temp = 1; i >= 0; i--) {\n    ret[i] *= temp;\n    temp *= nums[i];\n  }\n  return ret;\n};\n"}]},"sliding-window-maximum":{id:"239",name:"sliding-window-maximum",pre:[{text:"\u961f\u5217",link:null,color:"volcano"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u53cc\u7aef\u961f\u5217\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/239.sliding-window-maximum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/239.sliding-window-maximum.md",code:[{language:"js",text:"\nvar maxSlidingWindow = function (nums, k) {\n  // bad \u65f6\u95f4\u590d\u6742\u5ea6O(n * k)\n  if (nums.length === 0 || k === 0) return [];\n  let slideWindow = [];\n  const ret = [];\n  for (let i = 0; i < nums.length - k + 1; i++) {\n    for (let j = 0; j < k; j++) {\n      slideWindow.push(nums[i + j]);\n    }\n    ret.push(Math.max(...slideWindow));\n    slideWindow = [];\n  }\n  return ret;\n};\n"},{language:"js",text:"\nvar maxSlidingWindow = function (nums, k) {\n  // \u53cc\u7aef\u961f\u5217\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6, \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n  const deque = []; // \u5b58\u653e\u5728\u63a5\u4e0b\u6765\u7684\u6ed1\u52a8\u7a97\u53e3\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\u7684\u6570\n  const ret = [];\n  for (let i = 0; i < nums.length; i++) {\n    // \u6e05\u7a7a\u5931\u6548\u5143\u7d20\n    while (deque[0] < i - k + 1) {\n      deque.shift();\n    }\n\n    while (nums[deque[deque.length - 1]] < nums[i]) {\n      deque.pop();\n    }\n\n    deque.push(i);\n\n    if (i >= k - 1) {\n      ret.push(nums[deque[0]]);\n    }\n  }\n  return ret;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        if k == 0: return []\n        res = []\n        for r in range(k - 1, len(nums)):\n            res.append(max(nums[r - k + 1:r + 1]))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        q = collections.deque() # \u672c\u8d28\u5c31\u662f\u5355\u8c03\u961f\u5217\n        ans = []\n        for i in range(len(nums)):\n            while q and nums[q[-1]] <= nums[i]: q.pop() # \u7ef4\u6301\u5355\u8c03\u6027\n            while q and i - q[0] >= k: q.popleft() # \u79fb\u9664\u5931\u6548\u5143\u7d20\n            q.append(i)\n            if i >= k - 1: ans.append(nums[q[0]])\n        return ans\n"}]},"search-a-2-d-matrix-ii":{id:"240",name:"search-a-2-d-matrix-ii",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u4ece\u89d2\u843d\u5f00\u59cb\u904d\u5386\uff0c\u5229\u7528\u9012\u589e\u7684\u7279\u6027\u7b80\u5316\u65f6\u95f4\u590d\u6742",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=240 lang=javascript\n *\n * [240] Search a 2D Matrix II\n *\n * https://leetcode.com/problems/search-a-2d-matrix-ii/description/\n *\n *\n */\n/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function (matrix, target) {\n  if (!matrix || matrix.length === 0) return false;\n\n  let colIndex = 0;\n  let rowIndex = matrix.length - 1;\n  while (rowIndex > 0 && target < matrix[rowIndex][colIndex]) {\n    rowIndex--;\n  }\n\n  while (colIndex < matrix[0].length) {\n    if (target === matrix[rowIndex][colIndex]) return true;\n    if (target > matrix[rowIndex][colIndex]) {\n      colIndex++;\n    } else if (rowIndex > 0) {\n      rowIndex--;\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n};\n"},{language:"py",text:"\nclass Solution:\n    def searchMatrix(self, matrix, target):\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        i = m - 1\n        j = 0\n\n        while i >= 0 and j < n:\n            if matrix[i][j] == target:\n                return True\n            if matrix[i][j] > target:\n                i -= 1\n            else:\n                j += 1\n        return False\n"}]},"ugly-number":{id:"263",name:"ugly-number",pre:[{text:"\u6570\u5b66",link:null,color:"geekblue"},{text:"\u56e0\u6570\u5206\u89e3",link:null,color:"lime"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"},{text:"\u56e0\u6570\u5206\u89e3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/263.ugly-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/263.ugly-number.md",code:[{language:"java",text:"\nclass Solution {\n    public boolean isUgly(int num) {\n        int [] ugly = {2,3,5};\n        for(int u : ugly)\n        {\n            while(num%u==0 && num%u < num)\n            {\n                num/=u;\n            }\n        }\n        return num == 1;\n    }\n}\n"},{language:"js",text:"\nwhile (num % 2 === 0) num = num / 2;\nwhile (num % 3 === 0) num = num / 3;\nwhile (num % 5 === 0) num = num / 5;\n\nreturn num === 1;\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=263 lang=javascript\n *\n * [263] Ugly Number\n */\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar isUgly = function (num) {\n  // TAG: \u6570\u8bba\n  if (num <= 0) return false;\n  if (num === 1) return true;\n\n  const list = [2, 3, 5];\n\n  if (list.includes(num)) return true;\n\n  for (let i of list) {\n    if (num % i === 0) return isUgly(Math.floor(num / i));\n  }\n  return false;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool isUgly(int num) {\n        int ugly[] = {2,3,5};\n        for(int u : ugly)\n        {\n            while(num%u==0 && num%u < num)\n            {\n                num/=u;\n            }\n        }\n        return num == 1;\n    }\n};\n"},{language:"py",text:"\n# \u975e\u9012\u5f52\u5199\u6cd5\nclass Solution:\n    def isUgly(self, num: int) -> bool:\n        if num <= 0:\n            return False\n        for i in (2, 3, 5):\n            while num % i == 0:\n                num /= i\n        return num == 1\n"}]},"perfect-squares":{id:"279",name:"perfect-squares",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5982\u679c\u7528\u9012\u5f52+\u7f13\u5b58\uff0c\u7f13\u5b58\u7684\u8bbe\u8ba1\u5f88\u91cd\u8981\u6211\u7684\u505a\u6cd5\u662fkey\u5c31\u662fn\uff0cvalue\u662f\u4ee5n\u4e3a\u8d77\u70b9\uff0c\u5230\u8fbe\u5e95\u7aef\u7684\u6df1\u5ea6\u3002\u4e0b\u6b21\u53d6\u51fa\u7f13\u5b58\u7684\u65f6\u5019\u7528\u5f53\u524d\u7684level+\u5b58\u7684\u6df1\u5ea6\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684level.",link:null,color:"blue"},{text:"\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7684\u6838\u5fc3\u70b9\u8fd8\u662f\u9009\u548c\u4e0d\u9009\u7684\u95ee\u9898```jsfor(leti=1;i<=n;i++){for(letj=1;j*j<=i;j++){//\u4e0d\u9009\uff08dp[i]\uff09\u8fd8\u662f\u9009\uff08dp[i",link:null,color:"blue"},{text:"j*j]\uff09dp[i]=Math.min(dp[i],dp[i",link:null,color:"blue"},{text:"j*j]+1);}}```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/279.perfect-squares.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/279.perfect-squares.md",code:[{language:"js",text:"\nconst mapper = {};\n\nfunction d(n, level) {\n  if (n === 0) return level;\n\n  let i = 1;\n  const arr = [];\n\n  while (n - i * i >= 0) {\n    const hit = mapper[n - i * i];\n    if (hit) {\n      arr.push(hit + level);\n    } else {\n      const depth = d(n - i * i, level + 1) - level;\n      mapper[n - i * i] = depth;\n      arr.push(depth + level);\n    }\n    i++;\n  }\n\n  return Math.min(...arr);\n}\n/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function (n) {\n  return d(n, 0);\n};\n"},{language:"js",text:"\nfor (let i = 1; i <= n; i++) {\n  for (let j = 1; j * j <= i; j++) {\n    // \u4e0d\u9009\uff08dp[i]\uff09 \u8fd8\u662f  \u9009\uff08dp[i - j * j]\uff09\n    dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n  }\n}\n"},{language:"js",text:"\n/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function (n) {\n  if (n <= 0) {\n    return 0;\n  }\n\n  const dp = Array(n + 1).fill(Number.MAX_VALUE);\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j * j <= i; j++) {\n      // \u4e0d\u9009\uff08dp[i]\uff09 \u8fd8\u662f  \u9009\uff08dp[i - j * j]\uff09\n      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n    }\n  }\n\n  return dp[n];\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int numSquares(int n) {\n        static vector<int> dp{0};\n        while (dp.size() <= n) {\n            int m = dp.size(), minVal = INT_MAX;\n            for (int i = 1; i * i <= m; ++i) minVal = min(minVal, 1 + dp[m - i * i]);\n            dp.push_back(minVal);\n        }\n        return dp[n];\n    }\n};\n"}]},"move-zeroes":{id:"283",name:"move-zeroes",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u8bfb\u5199\u53cc\u6307\u9488",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"facebook"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/283.move-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/283.move-zeroes.md",code:[{language:"java",text:"\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        // \u53cc\u6307\u9488\n        int i = 0;\n        for(int j=0; j<nums.length; j++)\n        {\n            // \u4e0d\u4e3a0\uff0c\u524d\u79fb\n            if(nums[j] != 0)\n            {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                i++;\n            }\n        }\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function (nums) {\n  let index = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num !== 0) {\n      nums[index++] = num;\n    }\n  }\n\n  for (let i = index; i < nums.length; i++) {\n    nums[index++] = 0;\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        slow = fast = 0\n        while fast < len(nums):\n            if nums[fast] != 0:\n                nums[fast], nums[slow] = nums[slow], nums[fast]\n                slow += 1\n            fast += 1\n'}]},"find-median-from-data-stream":{id:"295",name:"find-median-from-data-stream",pre:[{text:"\u5806",link:null,color:"green"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u7528\u4e24\u4e2a\u5806\uff08\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\uff09\u6765\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u7528\u4f18\u5148\u7ea7\u961f\u5217\u7b80\u5316\u64cd\u4f5c>JavaScript\u4e0d\u50cfJava\uff0cC++\u7b49\u8bed\u8a00\u90fd\u6709`\u4f18\u5148\u7ea7\u961f\u5217`\u4e2d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u5927\u5bb6\u53ef\u4ee5\u4f7f\u7528\u793e\u533a\u7684\u5b9e\u73b0>\u4e2a\u4eba\u8ba4\u4e3a\u6ca1\u6709\u975e\u8981\u7ea0\u7ed3\u4e8e\u4f18\u5148\u7ea7\u961f\u5217\u600e\u4e48\u5b9e\u73b0\uff0c\u81f3\u5c11\u8fd9\u9053\u9898\u4e0d\u662f\u8003\u8fd9\u4e2a\u7684>\u4f18\u5148\u7ea7\u961f\u5217\u7684\u5b9e\u73b0\u4e2a\u4eba\u8ba4\u4e3a\u5df2\u7ecf\u8d85\u8fc7\u4e86\u8fd9\u9053\u9898\u60f3\u8003\u5bdf\u7684\u8303\u7574",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/295.find-median-from-data-stream.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/295.find-median-from-data-stream.md",code:[{language:"js",text:"\nfunction findMedian(a) {\n  return a.length % 2 === 0\n    ? (a[a.length >> 1] + a[a.length >> (1 + 1)]) / 2\n    : a[a.length >> 1];\n}\n"},{language:"js",text:"\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function () {\n  this.maxHeap = [];\n  this.minHeap = [];\n};\n\nfunction minHeapify() {\n  this.minHeap.unshift(null);\n  const a = this.minHeap;\n\n  // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u7528\u4e86\u7c97\u66b4\u7684\u5b9e\u73b0\n  // \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n  // \u5176\u5b9e\u53ef\u4ee5\u964d\u5230O(logn)\uff0c \u5177\u4f53\u7ec6\u8282\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8bb2\u89e3\u548c\u5b9e\u73b0\n  for (let i = a.length - 1; i >> 1 > 0; i--) {\n    // \u81ea\u4e0b\u5f80\u4e0a\u5806\u5316\n    if (a[i] < a[i >> 1]) {\n      // \u5982\u679c\u5b50\u5143\u7d20\u66f4\u5c0f\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\n      const temp = a[i];\n      this.minHeap[i] = a[i >> 1];\n      this.minHeap[i >> 1] = temp;\n    }\n  }\n  this.minHeap.shift(null);\n}\n\nfunction maxHeapify() {\n  this.maxHeap.unshift(null);\n  const a = this.maxHeap;\n\n  // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u7528\u4e86\u7c97\u66b4\u7684\u5b9e\u73b0\n  // \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n  // \u5176\u5b9e\u53ef\u4ee5\u964d\u5230O(logn)\uff0c \u5177\u4f53\u7ec6\u8282\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8bb2\u89e3\u548c\u5b9e\u73b0\n  for (let i = a.length - 1; i >> 1 > 0; i--) {\n    // \u81ea\u4e0b\u5f80\u4e0a\u5806\u5316\n    if (a[i] > a[i >> 1]) {\n      // \u5982\u679c\u5b50\u5143\u7d20\u66f4\u5927\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\n      const temp = a[i];\n      this.maxHeap[i] = a[i >> 1];\n      this.maxHeap[i >> 1] = temp;\n    }\n  }\n  this.maxHeap.shift(null);\n}\n\n/**\n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function (num) {\n  // \u4e3a\u4e86\u5927\u5bb6\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u5197\u4f59\n\n  // \u63d2\u5165\n  if (num >= (this.minHeap[0] || Number.MIN_VALUE)) {\n    this.minHeap.push(num);\n  } else {\n    this.maxHeap.push(num);\n  }\n  // \u8c03\u6574\u4e24\u4e2a\u5806\u7684\u8282\u70b9\u6570\u91cf\u5e73\u8861\n  // \u4f7f\u5f97\u5927\u9876\u5806\u7684\u6570\u91cf\u6700\u591a\u5927\u4e8e\u5c0f\u9876\u5806\u4e00\u4e2a\uff0c \u4e14\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u5c0f\u9876\u5806\u6570\u91cf\n  if (this.maxHeap.length > this.minHeap.length + 1) {\n    // \u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u79fb\u52a8\u5230\u5c0f\u9876\u5806\n    this.minHeap.push(this.maxHeap.shift());\n  }\n\n  if (this.minHeap.length > this.maxHeap.length) {\n    // \u5c0f\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u79fb\u52a8\u5230\u5927\u9876\u5806\n    this.maxHeap.push(this.minHeap.shift());\n  }\n\n  // \u8c03\u6574\u5806\u9876\u5143\u7d20\n  if (this.maxHeap[0] > this.minHeap[0]) {\n    const temp = this.maxHeap[0];\n    this.maxHeap[0] = this.minHeap[0];\n    this.minHeap[0] = temp;\n  }\n\n  // \u5806\u5316\n  maxHeapify.call(this);\n  minHeapify.call(this);\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function () {\n  if ((this.maxHeap.length + this.minHeap.length) % 2 === 0) {\n    return (this.minHeap[0] + this.maxHeap[0]) / 2;\n  } else {\n    return this.maxHeap[0];\n  }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n"},{language:"js",text:"\nthis.heap.unshift(null);\n// ....\nthis.heap.shift(null);\n"},{language:"js",text:"\nvar MedianFinder = function () {\n  this.maxHeap = new PriorityQueue((a, b) => a - b);\n  this.minHeap = new PriorityQueue((a, b) => b - a);\n};\n\n/**\n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function (num) {\n  // \u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u5efa\u7acb\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\n  // \u7ed3\u5408\u4e2d\u4f4d\u6570\u7684\u7279\u70b9\n  // \u8fd9\u4e24\u4e2a\u5806\u9700\u8981\u6ee1\u8db3:\n  // 1. \u5927\u9876\u5806\u5143\u7d20\u90fd\u6bd4\u5c0f\u9876\u5806\u5c0f\uff08\u7531\u4e8e\u5806\u7684\u7279\u70b9\u5176\u5b9e\u53ea\u8981\u6bd4\u8f83\u5806\u9876\u5373\u53ef\uff09\n  // 2. \u5927\u9876\u5806\u5143\u7d20\u4e0d\u5c0f\u4e8e\u5c0f\u9876\u5806\uff0c\u4e14\u6700\u591a\u6bd4\u5c0f\u9876\u5806\u591a\u4e00\u4e2a\u5143\u7d20\n\n  // \u6ee1\u8db3\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u7684\u8bdd\uff0c\u5982\u679c\u60f3\u8981\u627e\u5230\u4e2d\u4f4d\u6570\uff0c\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\n  // \u5982\u679c\u4e24\u4e2a\u5806\u6570\u91cf\u76f8\u7b49\uff08\u672c\u8d28\u662f\u603b\u6570\u4e3a\u5076\u6570\uff09, \u5c31\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u6570\n  // \u5982\u679c\u4e24\u4e2a\u5806\u6570\u91cf\u4e0d\u76f8\u7b49\uff08\u672c\u8d28\u662f\u603b\u6570\u4e3a\u5947\u6570\uff09\uff0c \u5c31\u53d6\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\n\n  // \u95ee\u9898\u5982\u679c\u4fdd\u8bc1\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u7279\u70b9\n\n  // 1. \u4fdd\u8bc1\u7b2c\u4e00\u70b9\n  this.maxHeap.enq(num);\n  // \u7531\u4e8e\u5c0f\u9876\u5806\u7684\u6240\u6709\u6570\u90fd\u6765\u81ea\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\uff08\u6700\u5927\u503c\uff09\n  // \u56e0\u6b64\u53ef\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u70b9\n  this.minHeap.enq(this.maxHeap.deq());\n\n  // 2. \u4fdd\u8bc1\u7b2c\u4e8c\u70b9\n  if (this.maxHeap.size() < this.minHeap.size()) {\n    this.maxHeap.enq(this.minHeap.deq());\n  }\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function () {\n  if (this.maxHeap.size() == this.minHeap.size())\n    return (this.maxHeap.peek() + this.minHeap.peek()) / 2.0;\n  else return this.maxHeap.peek();\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n"},{language:"cpp",text:"\nclass MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    MedianFinder() {\n\n    }\n\n    void addNum(int num) {\n        if (big_queue.empty()) {\n            big_queue.push(num);\n            return;\n        }\n        if (big_queue.size() == small_queue.size()) {\n            if (num <= big_queue.top()) {\n                big_queue.push(num);\n            } else {\n                small_queue.push(num);\n            }\n        } else if (big_queue.size() > small_queue.size()) {\n            if (big_queue.top() > num) {\n                small_queue.push(big_queue.top());\n                big_queue.pop();\n                big_queue.push(num);\n            } else {\n                small_queue.push(num);\n            }\n        } else if (big_queue.size() < small_queue.size()) {\n            if (small_queue.top() > num) {\n                big_queue.push(num);\n            } else {\n                big_queue.push(small_queue.top());\n                small_queue.pop();\n                small_queue.push(num);\n            }\n        }\n    }\n\n    double findMedian() {\n        if (big_queue.size() == small_queue.size()) {\n            return (big_queue.top() + small_queue.top()) * 0.5;\n        }\n        if (big_queue.size() < small_queue.size()) {\n            return small_queue.top();\n        }\n        return big_queue.top();\n    }\n\nprivate:\n    std::priority_queue<int, std::vector<int>, std::greater<int>> small_queue;  // \u6700\u5c0f\u5806\n    std::priority_queue<int> big_queue; // \u6700\u5927\u5806\n};\n"}]},"serialize-and-deserialize-binary-tree":{id:"297",name:"serialize-and-deserialize-binary-tree",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/297.serialize-and-deserialize-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/297.serialize-and-deserialize-binary-tree.md",code:[{language:"js",text:'\nconst serialize = (root) => {\n  const queue = [root];\n  let res = [];\n  while (queue.length) {\n    const node = queue.shift();\n    if (node) {\n      res.push(node.val);\n      queue.push(node.left);\n      queue.push(node.right);\n    } else {\n      res.push("#");\n    }\n  }\n  return res.join(",");\n};\n\nconst deserialize = (data) => {\n  if (data == "#") return null;\n\n  const list = data.split(",");\n\n  const root = new TreeNode(list[0]);\n  const queue = [root];\n  let cursor = 1;\n\n  while (cursor < list.length) {\n    const node = queue.shift();\n\n    const leftVal = list[cursor];\n    const rightVal = list[cursor + 1];\n\n    if (leftVal != "#") {\n      const leftNode = new TreeNode(leftVal);\n      node.left = leftNode;\n      queue.push(leftNode);\n    }\n    if (rightVal != "#") {\n      const rightNode = new TreeNode(rightVal);\n      node.right = rightNode;\n      queue.push(rightNode);\n    }\n    cursor += 2;\n  }\n  return root;\n};\n'},{language:"py",text:"\nclass Codec:\n\n    def serialize(self, root):\n        q = collections.deque([root])\n        ans = ''\n        while q:\n            cur = q.popleft()\n            if cur:\n                ans += str(cur.val) + ','\n                q.append(cur.left)\n                q.append(cur.right)\n            else:\n                # \u9664\u4e86\u8fd9\u91cc\u4e0d\u4e00\u6837\uff0c\u5176\u4ed6\u548c\u666e\u901a\u7684\u4e0d\u8bb0\u5f55\u5c42\u7684 BFS \u6ca1\u533a\u522b\n                ans += 'null,'\n        # \u672b\u5c3e\u4f1a\u591a\u4e00\u4e2a\u9017\u53f7\uff0c\u6211\u4eec\u53bb\u6389\u5b83\u3002\n        return ans[:-1]\n"},{language:"py",text:"\n    def deserialize(self, data):\n        if data == 'null': return None\n        nodes = data.split(',')\n        root = TreeNode(nodes[0])\n        # \u4ece\u4e00\u53f7\u5f00\u59cb\u7f16\u53f7\uff0c\u7f16\u53f7\u4fe1\u606f\u4e00\u8d77\u5165\u961f\n        q = collections.deque([(root, 1)])\n        while q:\n            cur, i = q.popleft()\n            # 2 * i \u662f\u5de6\u8282\u70b9\uff0c\u800c 2 * i \u7f16\u53f7\u5bf9\u5e94\u7684\u5176\u5b9e\u662f\u7d22\u5f15\u4e3a 2 * i - 1 \u7684\u5143\u7d20\uff0c \u53f3\u8282\u70b9\u540c\u7406\u3002\n            if 2 * i - 1 < len(nodes): lv = nodes[2 * i - 1]\n            if 2 * i < len(nodes): rv = nodes[2 * i]\n            if lv != 'null':\n                l = TreeNode(lv)\n                # \u5c06\u5de6\u8282\u70b9\u548c \u5b83\u7684\u7f16\u53f7 2 * i \u5165\u961f\n                q.append((l, 2 * i))\n                cur.left = l\n            if rv != 'null':\n                r = TreeNode(rv)\n                # \u5c06\u53f3\u8282\u70b9\u548c \u5b83\u7684\u7f16\u53f7 2 * i + 1 \u5165\u961f\n                q.append((r, 2 * i + 1))\n                cur.right = r\n\n        return root\n"},{language:"py",text:"\ndef deserialize(self, data):\n    if data == 'null': return None\n    nodes = data.split(',')\n    root = TreeNode(nodes[0])\n    q = collections.deque([root])\n    i = 0\n    while q and i < len(nodes) - 2:\n        cur = q.popleft()\n        lv = nodes[i + 1]\n        rv = nodes[i + 2]\n        i += 2\n        if lv != 'null':\n            l = TreeNode(lv)\n            q.append(l)\n            cur.left = l\n        if rv != 'null':\n            r = TreeNode(rv)\n            q.append(r)\n            cur.right = r\n\n    return root\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n    def serialize(self, root):\n        ans = ''\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node:\n                ans += str(node.val) + ','\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                ans += '#,'\n        print(ans[:-1])\n        return ans[:-1]\n\n\n\n    def deserialize(self, data: str):\n        if data == '#': return None\n        nodes = data.split(',')\n        if not nodes: return None\n        root = TreeNode(nodes[0])\n        queue = [root]\n        # \u5df2\u7ecf\u6709 root \u4e86\uff0c\u56e0\u6b64\u4ece 1 \u5f00\u59cb\n        i = 1\n\n        while i < len(nodes) - 1:\n            node = queue.pop(0)\n            lv = nodes[i]\n            rv = nodes[i + 1]\n            i += 2\n            if lv != '#':\n                l = TreeNode(lv)\n                node.left = l\n                queue.append(l)\n\n            if rv != '#':\n                r = TreeNode(rv)\n                node.right = r\n                queue.append(r)\n        return root\n\n"}]},"remove-invalid-parentheses":{id:"301",name:"remove-invalid-parentheses",pre:[{text:"BFS",link:null,color:"purple"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",link:null,color:"blue"},{text:"\u4f7f\u7528\u961f\u5217\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u4f7f\u7528\u4e00\u4e2avisited\u7684mapper\uff0c\u6765\u907f\u514d\u904d\u5386\u540c\u6837\u7684\u5b57\u7b26\u4e32",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/301.remove-invalid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/301.remove-invalid-parentheses.md",code:[{language:"js",text:"\nvar isValid = function(s) {\n  let openParenthes = 0;\n  for(let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      openParenthes++;\n    } else if (s[i] === ')') {\n      if (openParenthes === 0) return false;\n      openParenthes--;\n    }\n  }\n  return openParenthes === 0;\n};\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar removeInvalidParentheses = function(s) {\n  if (!s || s.length === 0) return [\"\"];\n  const ret = [];\n  const queue = [s];\n  const visited = {};\n  let current = null;\n  let removedParentheses = 0; // \u53ea\u8bb0\u5f55\u6700\u5c0f\u6539\u52a8\n\n  while ((current = queue.shift())) {\n    let hit = isValid(current);\n    if (hit) {\n      if (!removedParentheses) {\n       removedParentheses =  s.length - current.length\n      }\n      if (s.length - current.length > removedParentheses) return ret.length === 0 ? [\"\"] : ret;;\n      ret.unshift(current);\n      continue;\n    }\n    for (let i = 0; i < current.length; i++) {\n      if (current[i] !== ')' && current[i] !== '(') continue;\n      const subString = current.slice(0, i).concat(current.slice(i + 1));\n      if (visited[subString]) continue;\n      visited[subString] = true;\n      queue.push(subString);\n    }\n  }\n\n  return ret.length === 0 ? [\"\"] : ret;\n};\n"}]},"best-time-to-buy-and-sell-stock-with-cooldown":{id:"309",name:"best-time-to-buy-and-sell-stock-with-cooldown",pre:[{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u591a\u72b6\u6001\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md",code:[{language:"js",text:"\nbuy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);\nsell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=309 lang=javascript\n *\n * [309] Best Time to Buy and Sell Stock with Cooldown\n *\n */\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function (prices) {\n  if (prices == null || prices.length <= 1) return 0;\n\n  // \u5b9a\u4e49\u72b6\u6001\u53d8\u91cf\n  const buy = [];\n  const sell = [];\n  // \u5bfb\u5e38\n  buy[0] = -prices[0];\n  buy[1] = Math.max(-prices[0], -prices[1]);\n  sell[0] = 0;\n  sell[1] = Math.max(0, prices[1] - prices[0]);\n  for (let i = 2; i < prices.length; i++) {\n    // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n    // \u7b2ci\u5929\u53ea\u80fd\u662f\u4e70\u6216\u8005cooldown\n    // \u5982\u679c\u4e70\u5229\u6da6\u5c31\u662fsell[i - 2] - prices[i], \u6ce8\u610f\u8fd9\u91cc\u662fi - 2\uff0c\u4e0d\u662f i-1 \uff0c\u56e0\u4e3a\u6709cooldown\u7684\u9650\u5236\n    // cooldown\u5c31\u662fbuy[i -1]\n    buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);\n    // \u7b2ci\u5929\u53ea\u80fd\u662f\u5356\u6216\u8005cooldown\n    // \u5982\u679c\u5356\u5229\u6da6\u5c31\u662fbuy[i  -1] + prices[i]\n    // cooldown\u5c31\u662fsell[i -1]\n    sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);\n  }\n\n  return Math.max(buy[prices.length - 1], sell[prices.length - 1], 0);\n};\n"},{language:"py",text:"\nmax(f(i+1, 0), f(i+1, 1) - prices[i])\n"},{language:"py",text:"\nmax(f(i+1, 1), f(i+1, -1) + prices[i])\n"},{language:"py",text:"\nf(i+1, 0)\n"},{language:"py",text:"\nclass Solution:\n    def maxProfit(self, prices):\n        if not prices:\n            return 0\n        n = len(prices)\n\n        @lru_cache(None)\n        def f(i, state):\n            if i == n - 1:\n                return prices[i] if state == 1 else 0\n\n            if state == -1:\n                return f(i + 1, 0)\n            if state == 0:\n                return max(f(i + 1, 0), -prices[i] + f(i + 1, 1))\n            if state == 1:\n                return max(prices[i] + f(i + 1, -1), f(i + 1, 1))\n\n        return f(0, 0)\n\n"}]},"burst-balloons":{id:"312",name:"burst-balloons",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8fd9\u9053\u9898\u5c5e\u4e8e\u662f\u5207\u5272\u578bdp",link:null,color:"blue"},{text:"\u53cd\u5411\u601d\u8003",link:null,color:"blue"},{text:"\u904d\u5386\u65b9\u5411\u7684\u786e\u5b9a",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/312.burst-balloons.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/312.burst-balloons.md",code:[{language:"js",text:"\nvar maxCoins = function (nums) {\n  let res = Number.MIN_VALUE;\n  backtrack(nums, 0);\n  return res;\n  // \u56de\u6eaf\u6cd5\uff0c\u72b6\u6001\u6811\u5f88\u5927\n  function backtrack(nums, score) {\n    if (nums.length == 0) {\n      res = Math.max(res, score);\n      return;\n    }\n    for (let i = 0, n = nums.length; i < n; i++) {\n      let point =\n        (i - 1 < 0 ? 1 : nums[i - 1]) *\n        nums[i] *\n        (i + 1 >= n ? 1 : nums[i + 1]);\n      let tempNums = [].concat(nums);\n      // \u505a\u9009\u62e9 \u5728 nums \u4e2d\u5220\u9664\u5143\u7d20 nums[i]\n      nums.splice(i, 1);\n      // \u9012\u5f52\u56de\u6eaf\n      backtrack(nums, score + point);\n      // \u64a4\u9500\u9009\u62e9\n      nums = [...tempNums];\n    }\n  }\n};\n"},{language:"js",text:"\nvar maxCoins = function (nums) {\n  let n = nums.length;\n  // \u6dfb\u52a0\u4e24\u4fa7\u7684\u865a\u62df\u6c14\u7403\n  let points = [1, ...nums, 1];\n  let dp = Array.from(Array(n + 2), () => Array(n + 2).fill(0));\n  // \u6700\u540e\u4e00\u884c\u5f00\u59cb\u904d\u5386,\u4ece\u4e0b\u5f80\u4e0a\n  for (let i = n; i >= 0; i--) {\n    // \u4ece\u5de6\u5f80\u53f3\n    for (let j = i + 1; j < n + 2; j++) {\n      for (let k = i + 1; k < j; k++) {\n        dp[i][j] = Math.max(\n          dp[i][j],\n          points[j] * points[k] * points[i] + dp[i][k] + dp[k][j]\n        );\n      }\n    }\n  }\n  return dp[0][n + 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        n = len(nums)\n        points = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n        for i in range(n, -1, -1):\n            for j in range(i + 1, n + 2):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + points[i] * points[k] * points[j])\n        return dp[0][-1]\n"},{language:"py",text:"\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums = [1] + nums + [1]\n\n        @lru_cache(None)\n        def dp(left, right):\n            if left + 1 == right:\n                return 0\n            if left + 2 == right:\n                return nums[left] * nums[left + 1] * nums[left + 2]\n            ans = 0\n            for i in range(left + 1, right):\n                ans = max(ans, nums[i] * nums[left] * nums[right] + dp(left, i) + dp(i, right))\n            return ans\n\n        return dp(0, len(nums) - 1)\n\n"}]},"coin-change":{id:"322",name:"coin-change",pre:[{text:"\u8d2a\u5fc3\u7b97\u6cd5",link:null,color:"magenta"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u5206\u6790\u51fa\u662f\u5178\u578b\u7684\u5b8c\u5168\u80cc\u5305\u95ee\u9898",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u963f\u91cc\u5df4\u5df4\uff08\u76d2\u9a6c\u751f\u9c9c\uff09"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/322.coin-change.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/322.coin-change.md",code:[{language:"js",text:"\nvar coinChange = function (coins, amount) {\n  if (amount === 0) {\n    return 0;\n  }\n  const dp = Array(amount + 1).fill(Number.MAX_VALUE);\n  dp[0] = 0;\n  for (let i = 1; i < dp.length; i++) {\n    for (let j = 0; j < coins.length; j++) {\n      if (i - coins[j] >= 0) {\n        dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n      }\n    }\n  }\n\n  return dp[dp.length - 1] === Number.MAX_VALUE ? -1 : dp[dp.length - 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        if amount < 0:\n            return - 1\n        dp = [[amount + 1 for _ in range(len(coins) + 1)]\n              for _ in range(amount + 1)]\n\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u884c\u4e3a0\uff0c\u5176\u4ed6\u4e3a\u6700\u5927\u503c\uff08\u4e5f\u5c31\u662famount + 1\uff09\n        for j in range(len(coins) + 1):\n            dp[0][j] = 0\n\n        for i in range(1, amount + 1):\n            for j in range(1, len(coins) + 1):\n                # \u6ce8\u610f\uff1adp[i - coins[j - 1]][j] \u542b\u4e49\u662f\u786c\u5e01\u65e0\u9650\u53d6\uff0c dp[i - coins[j - 1]][j - 1] \u7684\u542b\u4e49\u5c31\u53d8\u6210\u4e86\u786c\u5e01\u6700\u591a\u53d6\u4e00\u6b21\n                if i - coins[j - 1] >= 0:\n                    dp[i][j] = min(\n                        dp[i][j - 1], dp[i - coins[j - 1]][j] + 1)\n                else:\n                    dp[i][j] = dp[i][j - 1]\n\n        return -1 if dp[-1][-1] == amount + 1 else dp[-1][-1]\n"},{language:"py",text:"\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n\n        for i in range(1, amount + 1):\n            for j in range(len(coins)):\n                if i >= coins[j]:\n                    dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n\n        return -1 if dp[-1] == amount + 1 else dp[-1]\n"}]},"odd-even-linked-list":{id:"328",name:"odd-even-linked-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u7528\u865a\u62df\u8282\u70b9\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u8bbe\u7f6e\u4e3a`odd&&odd.next&&even&&even.next`,\u4e0d\u5e94\u8be5\u662f`odd&&even`,\u5426\u5219\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u590d\u6742\u4e86\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/328.odd-even-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=328 lang=javascript\n *\n * [328] Odd Even Linked List\n *\n *\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function (head) {\n  if (!head || !head.next) return head;\n\n  const dummyHead1 = {\n    next: head,\n  };\n  const dummyHead2 = {\n    next: head.next,\n  };\n\n  let odd = dummyHead1.next;\n  let even = dummyHead2.next;\n\n  while (odd && odd.next && even && even.next) {\n    const oddNext = odd.next.next;\n    const evenNext = even.next.next;\n\n    odd.next = oddNext;\n    even.next = evenNext;\n\n    odd = oddNext;\n    even = evenNext;\n  }\n\n  odd.next = dummyHead2.next;\n\n  return dummyHead1.next;\n};\n"}]},"patching-array":{id:"330",name:"patching-array",pre:[{text:"\u8d2a\u5fc3",link:null,color:"purple"},{text:"\u524d\u7f00\u548c",link:null,color:"cyan"}],keyPoints:[{text:"\u7ef4\u62a4\u7aef\u70b9\u4fe1\u606f\uff0c\u5e76\u7528\u524d\u7f00\u548c\u66f4\u65b0\u533a\u95f4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/330.patching-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/330.patching-array.md",code:[{language:"py",text:"\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        furthest = i = ans = 0\n        while furthest < n:\n            # \u53ef\u8986\u76d6\u5230\uff0c\u76f4\u63a5\u7528\u524d\u7f00\u548c\u66f4\u65b0\u533a\u95f4\n            if i < len(nums) and nums[i] <= furthest + 1:\n                furthest += nums[i] #  [1, furthest] -> [1, furthest + nums[i]]\n                i += 1\n            else:\n                # \u4e0d\u53ef\u8986\u76d6\u5230\uff0c\u589e\u52a0\u4e00\u4e2a\u6570 furthest + 1\uff0c\u5e76\u7528\u524d\u7f00\u548c\u66f4\u65b0\u533a\u95f4\n                # \u5982\u679c nums[i] > furthest + 1\uff0c\u8bf4\u660e\u6211\u4eec\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e2a\u6570 x\uff0c\u5176\u4e2d 1 <= x <= furthest + 1\uff0c\u4ece\u8d2a\u5fc3\u7684\u89d2\u5ea6\u6211\u4eec\u5e94\u8be5\u9009\u62e9  furthest + 1\uff0c\u8fd9\u5728\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7\n                furthest = 2 * furthest + 1 # [1, furthest] -> [1, furthest + furthest + 1]\n                ans += 1\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        furthest, i, ans = 1, 0, 0\n        # \u7ed3\u675f\u6761\u4ef6\u4e5f\u8981\u76f8\u5e94\u6539\u53d8\n        while furthest <= n:\n            if i < len(nums) and nums[i] <= furthest:\n                furthest += nums[i] #  [1, furthest) -> [1, furthest + nums[i])\n                i += 1\n            else:\n                furthest = 2 * furthest # [1, furthest) -> [1, furthest + furthest)\n                ans += 1\n        return ans\n"}]},"verify-preorder-serialization-of-a-binary-tree":{id:"331",name:"verify-preorder-serialization-of-a-binary-tree",pre:[{text:"\u56fe\u8bba",link:null,color:"gold"}],keyPoints:[{text:"\u4ece\u5165\u5ea6\u548c\u51fa\u5ea6\u7684\u89d2\u5ea6\u601d\u8003",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/331.verify-preorder-serialization-of-a-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/331.verify-preorder-serialization-of-a-binary-tree.md",code:[{language:"py",text:'\n\nclass Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        diff = 0\n\n        for node in preorder.split(","):\n            diff -= 1\n            if diff < -1:\n                return False\n            if node != "#":\n                diff += 2\n        return diff == -1\n\n'}]},"increasing-triplet-subsequence":{id:"334",name:"increasing-triplet-subsequence",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\uff0c\u5206\u522b\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u5c0f\u503c\u3002\u53ea\u8981\u6211\u4eec\u80fd\u591f\u586b\u6ee1\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5c31\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md",code:[{language:"js",text:"\n/*\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function (nums) {\n  if (nums.length < 3) return false;\n  let n1 = Number.MAX_VALUE;\n  let n2 = Number.MAX_VALUE;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] <= n1) {\n      n1 = nums[i];\n    } else if (nums[i] <= n2) {\n      n2 = nums[i];\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n};\n"},{language:"py",text:'\nclass Solution:\n    def increasingTriplet(self, A: List[int]) -> bool:\n        a1 = a2 = float("inf")\n\n        for a in A:\n            if a > a2:\n                return True\n            elif a > a1:\n                a2 = a\n            else:\n                a1 = a\n        return False\n'}]},"self-crossing":{id:"335",name:"self-crossing",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u4e00\u5b9a\u8981\u753b\u56fe\u8f85\u52a9",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u8fd9\u79cd$O(1)$\u7a7a\u95f4\u590d\u6742\u5ea6\u6709\u56fa\u5b9a\u7684\u5957\u8def\u3002\u5e38\u89c1\u7684\u6709\uff1a1.\u76f4\u63a5\u4fee\u6539\u539f\u6570\u7ec42.\u6ed1\u52a8\u7a97\u53e3\uff08\u5f53\u524d\u72b6\u6001\u5e76\u4e0d\u662f\u548c\u4e4b\u524d\u6240\u6709\u72b6\u6001\u6709\u5173\uff0c\u800c\u662f\u4ec5\u548c\u67d0\u51e0\u4e2a\u6709\u5173\uff09\u3002\u6211\u4eec\u91c7\u7528\u7684\u662f\u6ed1\u52a8\u7a97\u53e3\u3002\u4f46\u662f\u96be\u70b9\u5c31\u5728\u4e8e\u6211\u4eec\u600e\u4e48\u77e5\u9053\u5f53\u524d\u72b6\u6001\u548c\u54ea\u51e0\u4e2a\u6709\u5173\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u753b\u56fe\u6216\u8bb8\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6253\u5f00\u601d\u8def\u3002\u53e6\u5916\u9762\u8bd5\u7684\u65f6\u5019\u8bf4\u51fa$O(N)$\u7684\u601d\u8def\u4e5f\u4e0d\u5931\u4e3a\u4e00\u4e2a\u5e2e\u52a9\u4f60\u51b7\u9759\u5206\u6790\u95ee\u9898\u7684\u624b\u6bb5\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/335.self-crossing.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/335.self-crossing.md",code:[{language:"py",text:"\nclass Solution:\n    def isSelfCrossing(self, x: List[int]) -> bool:\n        n = len(x)\n        if n < 4:\n            return False\n        for i in range(3, n):\n            if x[i] >= x[i - 2] and x[i - 1] <= x[i - 3]:\n                return True\n            if x[i - 1] <= x[i - 3] and x[i - 2] <= x[i]:\n                return True\n            if i > 3 and x[i - 1] == x[i - 3] and x[i] + x[i - 4] == x[i - 2]:\n                return True\n            if i > 4 and x[i] + x[i - 4] >= x[i - 2] and x[i - 1] >= x[i - 3] - x[i - 5] \\\n                    and x[i - 1] <= x[i - 3] and x[i - 2] >= x[i - 4] and x[i - 3] >= x[i - 5]:\n                return True\n        return False\n"}]},"house-robber-iii":{id:"337",name:"house-robber-iii",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5206\u6790\uff0c\u662f\u62a2\u8fd8\u662f\u4e0d\u62a2",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/337.house-robber-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/337.house-robber-iii.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n        int[] res = dfs(root);\n        return Math.max(res[0], res[1]);\n    }\n\n    public int[] dp(TreeNode root)\n    {\n        int[] res = new int[2];\n        if(root == null)\n        {\n            return res;\n        }\n\n        int[] left = dfs(root.left);\n        int[] right = dfs(root.right);\n        // 0 \u4ee3\u8868\u4e0d\u5077\uff0c1 \u4ee3\u8868\u5077\n        res[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);\n        res[1] = left[0] + right[0] + root.val;\n        return res;\n    }\n}\n"},{language:"js",text:"\nfunction helper(root) {\n  if (root === null) return [0, 0];\n  // 0: rob 1: notRob\n  const l = helper(root.left);\n  const r = helper(root.right);\n\n  const robed = root.val + l[1] + r[1];\n  const notRobed = Math.max(l[0], l[1]) + Math.max(r[0], r[1]);\n\n  return [robed, notRobed];\n}\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar rob = function (root) {\n  const [robed, notRobed] = helper(root);\n  return Math.max(robed, notRobed);\n};\n"},{language:"cpp",text:"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n        pair<int, int> res = dfs(root);\n        return max(res.first, res.second);\n    }\n\n    pair<int, int> dfs(TreeNode* root)\n    {\n        pair<int, int> res = {0, 0};\n        if(root == NULL)\n        {\n            return res;\n        }\n\n        pair<int, int> left = dfs(root->left);\n        pair<int, int> right = dfs(root->right);\n        // 0 \u4ee3\u8868\u4e0d\u5077\uff0c1 \u4ee3\u8868\u5077\n        res.first = max(left.first, left.second) + max(right.first, right.second);\n        res.second = left.first + right.first + root->val;\n        return res;\n    }\n\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def rob(self, root: TreeNode) -> int:\n        def dfs(node):\n            if not node:\n                return [0, 0]\n            [l_rob, l_not_rob] = dfs(node.left)\n            [r_rob, r_not_rob] = dfs(node.right)\n            return [node.val + l_not_rob + r_not_rob, max([l_rob, l_not_rob]) +  max([r_rob, r_not_rob])]\n        return max(dfs(root))\n\n\n# @lc code=end\n\n"}]},"power-of-four":{id:"342",name:"power-of-four",pre:[{text:"\u6570\u8bba",link:null,color:"green"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"},{text:"2\u7684\u5e42\u6b21\u65b9\u7279\u70b9\uff08\u6570\u5b66\u6027\u8d28\u4ee5\u53ca\u4e8c\u8fdb\u5236\u8868\u793a\uff09",link:null,color:"blue"},{text:"4\u7684\u5e42\u6b21\u65b9\u7279\u70b9\uff08\u6570\u5b66\u6027\u8d28\u4ee5\u53ca\u4e8c\u8fdb\u5236\u8868\u793a\uff09",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"twosigma"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/342.power-of-four.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/342.power-of-four.md",code:[{language:"js",text:"\nwhile (num && num % 4 == 0) {\n  num /= 4;\n}\nreturn num == 1;\n"},{language:"js",text:"\nreturn num > 0 && (num & (num - 1)) === 0 && (num - 1) % 3 === 0;\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=342 lang=javascript\n *\n * [342] Power of Four\n */\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPowerOfFour = function (num) {\n  // tag: \u6570\u8bba\n\n  if (num === 1) return true;\n  if (num < 4) return false;\n\n  if ((num & (num - 1)) !== 0) return false;\n\n  return (num & 0x55555555) === num;\n};\n"},{language:"py",text:"\nclass Solution:\n    def isPowerOfFour(self, num: int) -> bool:\n        if num == 1:\n            return True\n        elif num < 4:\n            return False\n        else:\n            if not num & (num-1) == 0:\n                return False\n            else:\n                return num & 0x55555555 == num\n\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff1a\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u7684\u76f8\u5173\u64cd\u4f5c\u8fdb\u884c\u5224\u65ad\n    def isPowerOfFour(self, num: int) -> bool:\n        binary_num = bin(num)[2:]\n        return binary_num.strip('0') == '1' and len(binary_num) % 2 == 1\n"}]},"integer-break":{id:"343",name:"integer-break",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u6570\u5b66\u62bd\u8c61",link:null,color:"blue"},{text:"\u9012\u5f52\u5206\u6790",link:null,color:"blue"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/343.integer-break.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/343.integer-break.md",code:[{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        if n == 2: return 1\n        res = 0\n        for i in range(1, n):\n            res = max(res, max(i * self.integerBreak(n - i),i * (n - i)))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    @lru_cache()\n    def integerBreak(self, n: int) -> int:\n        if n == 2: return 1\n        res = 0\n        for i in range(1, n):\n            res = max(res, max(i * self.integerBreak(n - i),i * (n - i)))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"}]},"intersection-of-two-arrays":{id:"349",name:"intersection-of-two-arrays",pre:[{text:"hashtable",link:null,color:"lime"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/349.intersection-of-two-arrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/349.intersection-of-two-arrays.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function (nums1, nums2) {\n  const visited = {};\n  const ret = [];\n  for (let i = 0; i < nums1.length; i++) {\n    const num = nums1[i];\n\n    visited[num] = num;\n  }\n\n  for (let i = 0; i < nums2.length; i++) {\n    const num = nums2[i];\n\n    if (visited[num] !== undefined) {\n      ret.push(num);\n      visited[num] = undefined;\n    }\n  }\n\n  return ret;\n};\n"},{language:"py",text:"\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        visited, result = {}, []\n        for num in nums1:\n            visited[num] = num\n        for num in nums2:\n            if num in visited:\n                result.append(num)\n                visited.pop(num)\n        return result\n\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff1a\u5229\u7528 Python \u4e2d\u7684\u96c6\u5408\u8fdb\u884c\u8ba1\u7b97\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return set(nums1) & set(nums2)\n"}]},"water-and-jug-problem":{id:"365",name:"water-and-jug-problem",pre:[{text:"BFS",link:null,color:"purple"},{text:"\u6700\u5927\u516c\u7ea6\u6570",link:null,color:"magenta"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/365.water-and-jug-problem.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/365.water-and-jug-problem.md",code:[{language:"js",text:"\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return {boolean}\n */\nvar canMeasureWater = function (x, y, z) {\n  if (x + y < z) return false;\n\n  if (z === 0) return true;\n\n  if (x === 0) return y === z;\n\n  if (y === 0) return x === z;\n\n  function GCD(a, b) {\n    let min = Math.min(a, b);\n    while (min) {\n      if (a % min === 0 && b % min === 0) return min;\n      min--;\n    }\n    return 1;\n  }\n\n  return z % GCD(x, y) === 0;\n};\n"},{language:"py",text:"\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        if x + y < z:\n            return False\n        queue = [(0, 0)]\n        seen = set((0, 0))\n\n        while(len(queue) > 0):\n            a, b = queue.pop(0)\n            if a ==z or b == z or a + b == z:\n                return True\n            states = set()\n\n            states.add((x, b))\n            states.add((a, y))\n            states.add((0, b))\n            states.add((a, 0))\n            states.add((min(x, b + a), 0 if b < x - a else b - (x - a)))\n            states.add((0 if a + b < y else a - (y - b), min(b + a, y)))\n            for state in states:\n                if state in seen:\n                    continue;\n                queue.append(state)\n                seen.add(state)\n        return False\n"},{language:"py",text:"\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        if x + y < z:\n            return False\n\n        if (z == 0):\n            return True\n\n        if (x == 0):\n            return y == z\n\n        if (y == 0):\n            return x == z\n\n        def GCD(a, b):\n            smaller = min(a, b)\n            while smaller:\n                if a % smaller == 0 and b % smaller == 0:\n                    return smaller\n                smaller -= 1\n\n        return z % GCD(x, y) == 0\n"},{language:"py",text:"\ndef GCD(a, b):\n    if b == 0: return a\n    return GCD(b, a % b)\n"}]},"sum-of-two-integers":{id:"371",name:"sum-of-two-integers",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u5f02\u6216\u662f\u4e00\u79cd\u4e0d\u8fdb\u4f4d\u7684\u52a0\u51cf\u6cd5",link:null,color:"blue"},{text:"\u6c42\u4e0e\u4e4b\u540e\u5de6\u79fb\u4e00\u4f4d\u6765\u53ef\u4ee5\u8868\u793a\u8fdb\u4f4d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/371.sum-of-two-integers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/371.sum-of-two-integers.md",code:[{language:"java",text:"\nclass Solution {\n    public int getSum(int a, int b) {\n        if(a==0) return b;\n        if(b==0) return a;\n\n        while(b!=0)\n        {\n            int carry = a&b;\n            // \u8ba1\u7b97\u65e0\u8fdb\u4f4d\u7684\u7ed3\u679c\n            a = a^b;\n            //\u5c06\u5b58\u5728\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u7f6e1\n            b =carry<<1;\n        }\n        return a;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=371 lang=javascript\n *\n * [371] Sum of Two Integers\n */\n/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function (a, b) {\n  if (a === 0) return b;\n\n  if (b === 0) return a;\n\n  return getSum(a ^ b, (a & b) << 1);\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int getSum(int a, int b) {\n        if(a==0) return b;\n        if(b==0) return a;\n\n        while(b!=0)\n        {\n            // \u9632\u6b62 AddressSanitizer \u5bf9\u6709\u7b26\u53f7\u5de6\u79fb\u7684\u6ea2\u51fa\u4fdd\u62a4\u5904\u7406\n            auto carry = ((unsigned int ) (a & b))<<1;\n            // \u8ba1\u7b97\u65e0\u8fdb\u4f4d\u7684\u7ed3\u679c\n            a = a^b;\n            //\u5c06\u5b58\u5728\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u7f6e1\n            b =carry;\n        }\n        return a;\n    }\n};\n"},{language:"py",text:"\n# python\u6574\u6570\u7c7b\u578b\u4e3aUnifying Long Integers, \u5373\u65e0\u9650\u957f\u6574\u6570\u7c7b\u578b.\n# \u6a21\u62df 32bit \u6709\u7b26\u53f7\u6574\u578b\u52a0\u6cd5\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        a &= 0xFFFFFFFF\n        b &= 0xFFFFFFFF\n        while b:\n            carry = a & b\n            a ^= b\n            b = ((carry) << 1) & 0xFFFFFFFF\n            # print((a, b))\n        return a if a < 0x80000000 else ~(a^0xFFFFFFFF)\n"}]},"kth-smallest-element-in-a-sorted-matrix":{id:"378",name:"kth-smallest-element-in-a-sorted-matrix",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"},{text:"\u5806",link:null,color:"green"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"blue"},{text:"\u6709\u5e8f\u77e9\u9635\u7684\u5957\u8def\uff08\u6587\u7ae0\u672b\u5c3e\u8fd8\u6709\u4e00\u9053\u6709\u5e8f\u77e9\u9635\u7684\u9898\u76ee\uff09",link:null,color:"blue"},{text:"\u5806\uff08\u4f18\u5148\u7ea7\u961f\u5217\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=378 lang=javascript\n *\n * [378] Kth Smallest Element in a Sorted Matrix\n */\nfunction notGreaterCount(matrix, target) {\n  // \u7b49\u4ef7\u4e8e\u5728matrix \u4e2d\u641c\u7d22mid\uff0c\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u5229\u7528\u6709\u5e8f\u7684\u6027\u8d28\u8bb0\u5f55\u6bd4mid\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\n\n  // \u6211\u4eec\u9009\u62e9\u5de6\u4e0b\u89d2\uff0c\u4f5c\u4e3a\u5f00\u59cb\u5143\u7d20\n  let curRow = 0;\n  // \u591a\u5c11\u5217\n  const COL_COUNT = matrix[0].length;\n  // \u6700\u540e\u4e00\u5217\u7684\u7d22\u5f15\n  const LAST_COL = COL_COUNT - 1;\n  let res = 0;\n\n  while (curRow < matrix.length) {\n    // \u6bd4\u8f83\u6700\u540e\u4e00\u5217\u7684\u6570\u636e\u548ctarget\u7684\u5927\u5c0f\n    if (matrix[curRow][LAST_COL] < target) {\n      res += COL_COUNT;\n    } else {\n      let i = COL_COUNT - 1;\n      while (i < COL_COUNT && matrix[curRow][i] > target) {\n        i--;\n      }\n      // \u6ce8\u610f\u8fd9\u91cc\u8981\u52a01\n      res += i + 1;\n    }\n    curRow++;\n  }\n\n  return res;\n}\n/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function (matrix, k) {\n  if (matrix.length < 1) return null;\n  let start = matrix[0][0];\n  let end = matrix[matrix.length - 1][matrix[0].length - 1];\n  while (start < end) {\n    const mid = start + ((end - start) >> 1);\n    const count = notGreaterCount(matrix, mid);\n    if (count < k) start = mid + 1;\n    else end = mid;\n  }\n  // \u8fd4\u56destart,mid, end \u90fd\u4e00\u6837\n  return start;\n};\n"}]},"insert-delete-getrandom-o1":{id:"380",name:"insert-delete-getrandom-o1",pre:[],keyPoints:[{text:"\u6570\u7ec4",link:null,color:"blue"},{text:"\u54c8\u5e0c\u8868",link:null,color:"blue"},{text:"\u6570\u7ec4+\u54c8\u5e0c\u8868",link:null,color:"blue"},{text:"\u57fa\u672c\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md",code:[{language:"py",text:'\nfrom random import random\n\n\nclass RandomizedSet:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.data = dict()\n        self.arr = []\n        self.n = 0\n\n    def insert(self, val: int) -> bool:\n        """\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        """\n        if val in self.data:\n            return False\n        self.data[val] = self.n\n        self.arr.append(val)\n        self.n += 1\n\n        return True\n\n    def remove(self, val: int) -> bool:\n        """\n        Removes a value from the set. Returns true if the set contained the specified element.\n        """\n        if val not in self.data:\n            return False\n        i = self.data[val]\n        # \u66f4\u65b0data\n        self.data[self.arr[-1]] = i\n        self.data.pop(val)\n        # \u66f4\u65b0arr\n        self.arr[i] = self.arr[-1]\n        # \u5220\u9664\u6700\u540e\u4e00\u9879\n        self.arr.pop()\n        self.n -= 1\n\n        return True\n\n    def getRandom(self) -> int:\n        """\n        Get a random element from the set.\n        """\n\n        return self.arr[int(random() * self.n)]\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n'}]},"decode-string":{id:"394",name:"decode-string",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u62ec\u53f7\u5339\u914d",link:null,color:"cyan"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/394.decode-string.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/394.decode-string.md",code:[{language:"py",text:"\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        for c in s:\n            if c == ']':\n                repeatStr = ''\n                repeatCount = ''\n                while stack and stack[-1] != '[':\n                    repeatStr = stack.pop() + repeatStr\n                # pop \u6389 \"[\"\n                stack.pop()\n                while stack and stack[-1].isnumeric():\n                    repeatCount = stack.pop() + repeatCount\n                stack.append(repeatStr * int(repeatCount))\n            else:\n                stack.append(c)\n        return \"\".join(stack)\n"},{language:"py",text:"\nclass Solution:\n\n    def decodeString(self, s: str) -> str:\n        def dfs(start):\n            repeat_str = repeat_count = ''\n            while start < len(s):\n                if s[start].isnumeric():\n                    repeat_count += s[start]\n                elif s[start] == '[':\n                    # \u66f4\u65b0\u6307\u9488\n                    start, t_str = dfs(start + 1)\n                    # repeat_count \u4ec5\u4f5c\u7528\u4e8e t_str\uff0c\u800c\u4e0d\u4f5c\u7528\u4e8e\u5f53\u524d\u7684 repeat_str\n                    repeat_str = repeat_str + t_str * int(repeat_count)\n                    repeat_count = ''\n                elif s[start] == ']':\n                    return start, repeat_str\n                else:\n                    repeat_str += s[start]\n                start += 1\n            return repeat_str\n        return dfs(0)\n"}]},"binary-watch":{id:"401",name:"binary-watch",pre:[{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"red"},{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/401.binary-watch.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/401.binary-watch.md",code:[{language:"py",text:"\n# \u679a\u4e3e\u5c0f\u65f6\nfor a in possible_number(i):\n    # \u5c0f\u65f6\u786e\u5b9a\u4e86\uff0c\u5206\u5c31\u662f num - i\n    for b in possible_number(num - i, True):\n        ans.add(str(a) + \":\" + str(b).rjust(2, '0'))\n"},{language:"py",text:"\nfor i in range(min(4, num + 1)):\n    for a in possible_number(i):\n        for b in possible_number(num - i, True):\n            ans.add(str(a) + \":\" + str(b).rjust(2, '0'))\n"},{language:"py",text:"\nclass Solution:\n    def readBinaryWatch(self, num: int) -> List[str]:\n        def possible_number(count, minute=False):\n            if count == 0: return [0]\n            if minute:\n                return filter(lambda a: a < 60, map(sum, combinations([1, 2, 4, 8, 16, 32], count)))\n            return filter(lambda a: a < 12, map(sum, combinations([1, 2, 4, 8], count)))\n        ans = set()\n        for i in range(min(4, num + 1)):\n            for a in possible_number(i):\n                for b in possible_number(num - i, True):\n                    ans.add(str(a) + \":\" + str(b).rjust(2, '0'))\n        return list(ans)\n"},{language:"py",text:"\nclass Solution:\n    def readBinaryWatch(self, num: int) -> List[str]:\n        return [str(a) + \":\" + str(b).rjust(2, '0') for a in range(12) for b in range(60) if (bin(a)+bin(b)).count('1') == num]\n"}]},"partition-equal-subset-sum":{id:"416",name:"partition-equal-subset-sum",pre:[{text:"DFS",link:null,color:"red"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/416.partition-equal-subset-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/416.partition-equal-subset-sum.md",code:[{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  return dfs(nums, sum, 0);\n};\n\nfunction dfs(nums, target, cur) {\n  if (target < 0 || cur > nums.length) {\n    return false;\n  }\n  return (\n    target === 0 ||\n    dfs(nums, target - nums[cur], cur + 1) ||\n    dfs(nums, target, cur + 1)\n  );\n}\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  nums = nums.sort((a, b) => b - a);\n  if (sum < nums[0]) {\n    return false;\n  }\n  return dfs(nums, sum, sum, 0);\n};\n\nfunction dfs(nums, pickRemain, discardRemain, cur) {\n  if (pickRemain === 0 || discardRemain === 0) {\n    return true;\n  }\n\n  if (pickRemain < 0 || discardRemain < 0 || cur > nums.length) {\n    return false;\n  }\n\n  return (\n    dfs(nums, pickRemain - nums[cur], discardRemain, cur + 1) ||\n    dfs(nums, pickRemain, discardRemain - nums[cur], cur + 1)\n  );\n}\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  } else {\n    sum = sum / 2;\n  }\n\n  const dp = Array.from(nums).map(() =>\n    Array.from({ length: sum + 1 }).fill(false)\n  );\n\n  for (let i = 0; i < nums.length; i++) {\n    dp[i][0] = true;\n  }\n\n  for (let i = 0; i < dp.length - 1; i++) {\n    for (let j = 0; j < dp[0].length; j++) {\n      dp[i + 1][j] =\n        j - nums[i] >= 0 ? dp[i][j] || dp[i][j - nums[i]] : dp[i][j];\n    }\n  }\n\n  return dp[nums.length - 1][sum];\n};\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  const dp = Array.from({ length: sum + 1 }).fill(false);\n  dp[0] = true;\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = sum; j > 0; j--) {\n      dp[j] = dp[j] || (j - nums[i] >= 0 && dp[j - nums[i]]);\n    }\n  }\n\n  return dp[sum];\n};\n"},{language:"js",text:"\n/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function (amount, coins) {\n  const dp = Array.from({ length: amount + 1 }).fill(0);\n  dp[0] = 1;\n  for (let i = 0; i < coins.length; i++) {\n    for (let j = 1; j <= amount; j++) {\n      dp[j] = dp[j] + (j - coins[i] >= 0 ? dp[j - coins[i]] : 0);\n    }\n  }\n  return dp[amount];\n};\n"}]},"longest-repeating-character-replacement":{id:"424",name:"longest-repeating-character-replacement",pre:[],keyPoints:[{text:"\u6700\u957f\u8fde\u7eed1\u6a21\u578b",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/424.longest-repeating-character-replacement.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/424.longest-repeating-character-replacement.md",code:[{language:"py",text:'\n\nclass\xa0Solution:\n\xa0\xa0\xa0\xa0def\xa0characterReplacement(self,\xa0s:\xa0str,\xa0k:\xa0int)\xa0->\xa0int:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0def\xa0fix(c,\xa0k):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa0i\xa0=\xa00\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0j\xa0in\xa0range(len(s)):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0k\xa0-=\xa0s[j]\xa0!=\xa0c\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0while\xa0i\xa0<\xa0j\xa0and\xa0k\xa0<\xa00:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0k\xa0+=\xa0s[i]\xa0!=\xa0c\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0i\xa0+=\xa01\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa0max(ans,\xa0j\xa0-\xa0i\xa0+\xa01)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0ans\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa00\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0i\xa0in\xa0range(26):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa0max(ans,\xa0fix(chr(ord("A")\xa0+\xa0i),\xa0k))\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0ans\n\xa0\n\n'},{language:"py",text:'\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        if not s: return 0\n        counts = [0] * 26\n        i = most_fraq = 0\n        for j in range(len(s)):\n            counts[ord(s[j]) - ord("A")] += 1\n            most_fraq = max(most_fraq, counts[ord(s[j]) - ord("A")])\n            if i < j and j - i + 1 - most_fraq > k:\n                counts[ord(s[i]) - ord("A")] -= 1\n                i += 1\n        return j - i + 1\n'}]},"path-sum-iii":{id:"437",name:"path-sum-iii",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u901a\u8fc7hashmap\uff0c\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u8fd9\u79cd\u8fde\u7eed\u7684\u5143\u7d20\u6c42\u548c\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u5171\u540c\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u9053\u9898\u76ee](./560.subarray",link:null,color:"blue"},{text:"sum",link:null,color:"blue"},{text:"equals",link:null,color:"blue"},{text:"k.md)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/437.path-sum-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/437.path-sum-iii.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n// the number of the paths starting from self\nfunction helper(root, sum) {\n  if (root === null) return 0;\n  const l = helper(root.left, sum - root.val);\n  const r = helper(root.right, sum - root.val);\n\n  return l + r + (root.val === sum ? 1 : 0);\n}\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */\nvar pathSum = function (root, sum) {\n  // \u7a7a\u95f4\u590d\u6742\u5ea6O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u4ecb\u4e8eO(nlogn) \u548c O(n^2)\n  // tag: dfs tree\n  if (root === null) return 0;\n  // the number of the paths starting from self\n  const self = helper(root, sum);\n  // we don't know the answer, so we just pass it down\n  const l = pathSum(root.left, sum);\n  // we don't know the answer, so we just pass it down\n  const r = pathSum(root.right, sum);\n\n  return self + l + r;\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=437 lang=javascript\n *\n * [437] Path Sum III\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction helper(root, acc, target, hashmap) {\n  // see also : https://leetcode.com/problems/subarray-sum-equals-k/\n\n  if (root === null) return 0;\n  let count = 0;\n  acc += root.val;\n  if (acc === target) count++;\n  if (hashmap[acc - target] !== void 0) {\n    count += hashmap[acc - target];\n  }\n  if (hashmap[acc] === void 0) {\n    hashmap[acc] = 1;\n  } else {\n    hashmap[acc] += 1;\n  }\n  const res =\n    count +\n    helper(root.left, acc, target, hashmap) +\n    helper(root.right, acc, target, hashmap);\n\n  // \u8fd9\u91cc\u8981\u6ce8\u610f\u522b\u5fd8\u8bb0\u4e86\n  hashmap[acc] = hashmap[acc] - 1;\n\n  return res;\n}\n\nvar pathSum = function (root, sum) {\n  const hashmap = {};\n  return helper(root, 0, sum, hashmap);\n};\n"}]},"find-all-anagrams-in-a-string":{id:"438",name:"find-all-anagrams-in-a-string",pre:[{text:"Sliding Window",link:null,color:"orange"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/438.find-all-anagrams-in-a-string.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/438.find-all-anagrams-in-a-string.md",code:[{language:"java",text:"\npublic List<Integer> findAnagrams(String s, String p) {\n\n    List<Integer> res = new LinkedList<>();\n    if (s == null || p == null || s.length() < p.length())\n        return res;\n\n    int[] ch = new int[26];\n    //\u7edf\u8ba1p\u4e32\u5b57\u7b26\u4e2a\u6570\n    for (char c : p.toCharArray())\n        ch[c - 'a']++;\n    //\u628a\u7a97\u53e3\u6269\u6210p\u4e32\u7684\u957f\u5ea6\n    int start = 0, end = 0, rest = p.length();\n    for (; end < p.length(); end++) {\n        char temp = s.charAt(end);\n        ch[temp - 'a']--;\n        if (ch[temp - 'a'] >= 0)\n            rest--;\n    }\n\n    if (rest == 0)\n        res.add(0);\n    //\u5f00\u59cb\u4e00\u6b65\u4e00\u6b65\u5411\u53f3\u79fb\u52a8\u7a97\u53e3\u3002\n    while (end < s.length()) {\n        //\u5de6\u8fb9\u7684\u62ff\u51fa\u6765\u4e00\u4e2a\u5e76\u66f4\u65b0\u72b6\u6001\n        char temp = s.charAt(start);\n        if (ch[temp - 'a'] >= 0)\n            rest++;\n        ch[temp - 'a']++;\n        start++;\n        //\u53f3\u8fb9\u7684\u62ff\u8fdb\u6765\u4e00\u4e2a\u5e76\u66f4\u65b0\u72b6\u6001\n        temp = s.charAt(end);\n        ch[temp - 'a']--;\n        if (ch[temp - 'a'] >= 0)\n            rest--;\n        end++;\n        // \u72b6\u6001\u5408\u6cd5\u5c31\u5b58\u5230\u7ed3\u679c\u96c6\u5408\n        if (rest == 0)\n            res.add(start);\n    }\n\n    return res;\n}\n"},{language:"py",text:"\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        target = collections.Counter(p)\n        ans = []\n        for i in range(len(s)):\n            if i >= len(p):\n                target[s[i - len(p)]] += 1\n                if target[s[i - len(p)]] == 0:\n                    del target[s[i - len(p)]]\n            target[s[i]] -= 1\n            if target[s[i]] == 0:\n                del target[s[i]]\n            if len(target) == 0:\n                ans.append(i - len(p) + 1)\n        return ans\n"},{language:"py",text:"\nclass FrequencyDict:\n   def __init__(self, s):\n       self.d = collections.Counter()\n       for char in s:\n           self.increment(char)\n\n   def _del_if_zero(self, char):\n       if self.d[char] == 0:\n           del self.d[char]\n\n   def is_empty(self):\n       return not self.d\n\n   def decrement(self, char):\n       self.d[char] -= 1\n       self._del_if_zero(char)\n\n   def increment(self, char):\n       self.d[char] += 1\n       self._del_if_zero(char)\n\n\nclass Solution:\n   def findAnagrams(self, s: str, p: str) -> List[int]:\n       ans = []\n\n       freq = FrequencyDict(p)\n\n       for char in s[:len(p)]:\n           freq.decrement(char)\n\n       if freq.is_empty():\n           ans.append(0)\n\n       for i in range(len(p), len(s)):\n           start, end = s[i - len(p)], s[i]\n           freq.increment(start)\n           freq.decrement(end)\n           if freq.is_empty():\n               ans.append(i - len(p) + 1)\n\n       return ans\n"}]},"add-two-numbers-ii":{id:"445",name:"add-two-numbers-ii",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u6808\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"carried\u53d8\u91cf\u8bb0\u5f55\u8fdb\u4f4d",link:null,color:"blue"},{text:"\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6\u8bbe\u7f6e\u6210`stack.length>0`\u53ef\u4ee5\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u6ce8\u610f\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u59821+99=100",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/445.add-two-numbers-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/445.add-two-numbers-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=445 lang=javascript\n *\n * [445] Add Two Numbers II\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  const stack1 = [];\n  const stack2 = [];\n  const stack = [];\n\n  let cur1 = l1;\n  let cur2 = l2;\n  let curried = 0;\n\n  while (cur1) {\n    stack1.push(cur1.val);\n    cur1 = cur1.next;\n  }\n\n  while (cur2) {\n    stack2.push(cur2.val);\n    cur2 = cur2.next;\n  }\n\n  let a = null;\n  let b = null;\n\n  while (stack1.length > 0 || stack2.length > 0) {\n    a = Number(stack1.pop()) || 0;\n    b = Number(stack2.pop()) || 0;\n\n    stack.push((a + b + curried) % 10);\n\n    if (a + b + curried >= 10) {\n      curried = 1;\n    } else {\n      curried = 0;\n    }\n  }\n\n  if (curried === 1) {\n    stack.push(1);\n  }\n\n  const dummy = {};\n\n  let current = dummy;\n\n  while (stack.length > 0) {\n    current.next = {\n      val: stack.pop(),\n      next: null,\n    };\n\n    current = current.next;\n  }\n\n  return dummy.next;\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        def listToStack(l: ListNode) -> list:\n            stack, c = [], l\n            while c:\n                stack.append(c.val)\n                c = c.next\n            return stack\n\n        # transfer l1 and l2 into stacks\n        stack1, stack2 = listToStack(l1), listToStack(l2)\n\n        # add stack1 and stack2\n        diff = abs(len(stack1) - len(stack2))\n        stack1 = ([0]*diff + stack1 if len(stack1) < len(stack2) else stack1)\n        stack2 = ([0]*diff + stack2 if len(stack2) < len(stack1) else stack2)\n        stack3 = [x + y for x, y in zip(stack1, stack2)]\n\n        # calculate carry for each item in stack3 and add one to the item before it\n        carry = 0\n        for i, val in enumerate(stack3[::-1]):\n            index = len(stack3) - i - 1\n            carry, stack3[index] = divmod(val + carry, 10)\n            if carry and index == 0:\n                stack3 = [1] + stack3\n            elif carry:\n                stack3[index - 1] += 1\n\n        # transfer stack3 to a linkedList\n        result = ListNode(0)\n        c = result\n        for item in stack3:\n            c.next = ListNode(item)\n            c = c.next\n\n        return result.next\n"}]},"4-sum-ii":{id:"454",name:"4-sum-ii",pre:[{text:"hashTable",link:null,color:"green"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"\u4e24\u4e24\u5206\u7ec4\uff0c\u6c42\u51fa\u4e24\u4e24\u7ed3\u5408\u80fd\u591f\u5f97\u51fa\u7684\u53ef\u80fd\u6570\uff0c\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/454.4-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/454.4-sum-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=454 lang=javascript\n *\n * [454] 4Sum II\n *\n * https://leetcode.com/problems/4sum-ii/description/\n/**\n * @param {number[]} A\n * @param {number[]} B\n * @param {number[]} C\n * @param {number[]} D\n * @return {number}\n */\nvar fourSumCount = function (A, B, C, D) {\n  const sumMapper = {};\n  let res = 0;\n  for (let i = 0; i < A.length; i++) {\n    for (let j = 0; j < B.length; j++) {\n      sumMapper[A[i] + B[j]] = (sumMapper[A[i] + B[j]] || 0) + 1;\n    }\n  }\n\n  for (let i = 0; i < C.length; i++) {\n    for (let j = 0; j < D.length; j++) {\n      res += sumMapper[-(C[i] + D[j])] || 0;\n    }\n  }\n\n  return res;\n};\n"},{language:"py",text:"\nclass Solution:\n    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:\n        mapper = {}\n        res = 0\n        for i in A:\n            for j in B:\n                mapper[i + j] = mapper.get(i + j, 0) + 1\n\n        for i in C:\n            for j in D:\n                res += mapper.get(-1 * (i + j), 0)\n        return res\n"}]},AssignCookies:{id:"455",name:"AssignCookies",pre:[{text:"\u8d2a\u5fc3\u7b97\u6cd5",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/greedy.md",color:"magenta"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u5148\u6392\u5e8f\u518d\u8d2a\u5fc3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/455.AssignCookies.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/455.AssignCookies.md",code:[{language:"js",text:"\n/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */\nconst findContentChildren = function (g, s) {\n    g = g.sort((a, b) => a - b);\n    s = s.sort((a, b) => a - b);\n    let gi = 0; // \u80c3\u53e3\u503c\n    let sj = 0; // \u997c\u5e72\u5c3a\u5bf8\n    let res = 0;\n    while (gi < g.length && sj < s.length) {\n        // \u5f53\u997c\u5e72 sj >= \u80c3\u53e3 gi \u65f6\uff0c\u997c\u5e72\u6ee1\u8db3\u80c3\u53e3\uff0c\u66f4\u65b0\u6ee1\u8db3\u7684\u5b69\u5b50\u6570\u5e76\u79fb\u52a8\u6307\u9488\n        if (s[sj] >= g[gi]) {\n            gi++;\n            sj++;\n            res++;\n        } else {\n            // \u5f53\u997c\u5e72 sj < \u80c3\u53e3 gi \u65f6\uff0c\u997c\u5e72\u4e0d\u80fd\u6ee1\u8db3\u80c3\u53e3\uff0c\u9700\u8981\u6362\u5927\u7684\n            sj++;\n        }\n    }\n    return res;\n};\n"}]},"132-pattern":{id:"456",name:"132-pattern",pre:[{text:"\u5355\u8c03\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/monotone-stack.md",color:"purple"}],keyPoints:[{text:"\u5148\u627e\u523032\u6a21\u5f0f\uff0c\u518d\u627e132\u6a21\u5f0f\u3002",link:null,color:"blue"},{text:"\u56fa\u5b9a2,\u4ece\u53f3\u5f80\u5de6\u904d\u5386,\u4f7f\u7528\u5355\u8c03\u6808\u83b7\u53d6\u6700\u5927\u7684\u5c0f\u4e8e\u5f53\u524d\u6570\u76842\uff0c\u5e76\u5c06\u5f53\u524d\u6570\u4f5c\u4e3a3\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/456.132-pattern.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/456.132-pattern.md",code:[{language:"py",text:'\nclass Solution:\n    def find132pattern(self, A: List[int]) -> bool:\n        stack = []\n        p2 = float("-inf")\n        for a in A[::-1]:\n            # p2 \u4e0d\u4e3a\u521d\u59cb\u503c\u610f\u5473\u7740\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86 32 \u6a21\u5f0f\uff0c\u56e0\u6b64 a < p2 \u65f6\u5019\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86 132 \u6a21\u5f0f\n            if a < p2:\n                return True\n            while stack and a > stack[-1]:\n                p2 = stack.pop()\n            stack.append(a)\n\n        return False\n'}]},"lfu-cache":{id:"460",name:"lfu-cache",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"HashMap",link:null,color:"orange"}],keyPoints:[{text:"\u5206\u6790\u7528\u4e24\u4e2a`Map`\u5206\u522b\u4fdd\u5b58`nodeMap{key,node}`\u548c`freqMap{frequent,DoublyLinkedList}`\u3002\u5b9e\u73b0`get`\u548c`put`\u64cd\u4f5c\u90fd\u662f`O(1)`\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u53ef\u4ee5\u7528Java\u81ea\u5e26\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982HashLinkedHashSet\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u81ea\u5efaNode\uff0cDoublelyLinkedList\u3002\u53ef\u4ee5\u5f88\u5927\u7a0b\u5ea6\u7684\u7f29\u51cf\u4ee3\u7801\u91cf\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/460.lfu-cache.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/460.lfu-cache.md",code:[{language:"java",text:"\npublic class LC460LFUCache {\n  class Node {\n    int key, val, freq;\n    Node prev, next;\n\n    Node(int key, int val) {\n      this.key = key;\n      this.val = val;\n      freq = 1;\n    }\n  }\n\n  class DoubleLinkedList {\n    private Node head;\n    private Node tail;\n    private int size;\n\n    DoubleLinkedList() {\n      head = new Node(0, 0);\n      tail = new Node(0, 0);\n      head.next = tail;\n      tail.prev = head;\n    }\n\n    void add(Node node) {\n      head.next.prev = node;\n      node.next = head.next;\n      node.prev = head;\n      head.next = node;\n      size++;\n    }\n\n    void remove(Node node) {\n      node.prev.next = node.next;\n      node.next.prev = node.prev;\n      size--;\n    }\n\n    // always remove last node if last node exists\n    Node removeLast() {\n      if (size > 0) {\n        Node node = tail.prev;\n        remove(node);\n        return node;\n      } else return null;\n    }\n  }\n\n  // cache capacity\n  private int capacity;\n  // min frequent\n  private int minFreq;\n  Map<Integer, Node> nodeMap;\n  Map<Integer, DoubleLinkedList> freqMap;\n  public LC460LFUCache(int capacity) {\n    this.minFreq = 0;\n    this.capacity = capacity;\n    nodeMap = new HashMap<>();\n    freqMap = new HashMap<>();\n  }\n\n  public int get(int key) {\n    Node node = nodeMap.get(key);\n    if (node == null) return -1;\n    update(node);\n    return node.val;\n  }\n\n  public void put(int key, int value) {\n    if (capacity == 0) return;\n    Node node;\n    if (nodeMap.containsKey(key)) {\n      node = nodeMap.get(key);\n      node.val = value;\n      update(node);\n    } else {\n      node = new Node(key, value);\n      nodeMap.put(key, node);\n      if (nodeMap.size() == capacity) {\n        DoubleLinkedList lastList = freqMap.get(minFreq);\n        nodeMap.remove(lastList.removeLast().key);\n      }\n      minFreq = 1;\n      DoubleLinkedList newList = freqMap.getOrDefault(node.freq, new DoubleLinkedList());\n      newList.add(node);\n      freqMap.put(node.freq, newList);\n    }\n  }\n\n  private void update(Node node) {\n    DoubleLinkedList oldList = freqMap.get(node.freq);\n    oldList.remove(node);\n    if (node.freq == minFreq && oldList.size == 0) minFreq++;\n    node.freq++;\n    DoubleLinkedList newList = freqMap.getOrDefault(node.freq, new DoubleLinkedList());\n    newList.add(node);\n    freqMap.put(node.freq, newList);\n  }\n }\n"}]},"can-i-win":{id:"464",name:"can-i-win",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md "\u52a8\u6001\u89c4\u5212"',color:"red"},{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u56de\u6eaf",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"},{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"linkedin"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/464.can-i-win.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/464.can-i-win.md",code:[{language:"java",text:"\npublic class Solution {\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n\n        if (maxChoosableInteger >= desiredTotal) return true;\n        if ((1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal) return false;\n\n        Boolean[] dp = new Boolean[(1 << maxChoosableInteger) - 1];\n        return dfs(maxChoosableInteger, desiredTotal, 0, dp);\n    }\n\n    private boolean dfs(int maxChoosableInteger, int desiredTotal, int state, Boolean[] dp) {\n        if (dp[state] != null)\n            return dp[state];\n        for (int i = 1; i <= maxChoosableInteger; i++){\n            int tmp = (1 << (i - 1));\n            if ((tmp & state) == 0){\n                if (desiredTotal - i <= 0 || !dfs(maxChoosableInteger, desiredTotal - i, tmp|state, dp)) {\n                    dp[state] = true;\n                    return true;\n                }\n            }\n        }\n        dp[state] = false;\n        return false;\n    }\n}\n"},{language:"js",text:"\nvar canIWin = function (maxChoosableInteger, desiredTotal) {\n  // \u76f4\u63a5\u83b7\u80dc\n  if (maxChoosableInteger >= desiredTotal) return true;\n\n  // \u5168\u90e8\u62ff\u5b8c\u4e5f\u65e0\u6cd5\u5230\u8fbe\n  var sum = (maxChoosableInteger * (maxChoosableInteger + 1)) / 2;\n  if (desiredTotal > sum) return false;\n\n  // \u8bb0\u5fc6\u5316\n  var dp = {};\n\n  /**\n   * @param {number} total \u5269\u4f59\u7684\u6570\u91cf\n   * @param {number} state \u4f7f\u7528\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a\u62bd\u8fc7\u7684\u72b6\u6001\n   */\n  function f(total, state) {\n    // \u6709\u7f13\u5b58\n    if (dp[state] !== undefined) return dp[state];\n\n    for (var i = 1; i <= maxChoosableInteger; i++) {\n      var curr = 1 << i;\n      // \u5df2\u7ecf\u62bd\u8fc7\u8fd9\u4e2a\u6570\n      if (curr & state) continue;\n      // \u76f4\u63a5\u83b7\u80dc\n      if (i >= total) return (dp[state] = true);\n      // \u53ef\u4ee5\u8ba9\u5bf9\u65b9\u8f93\n      if (!f(total - i, state | curr)) return (dp[state] = true);\n    }\n\n    // \u6ca1\u6709\u4efb\u4f55\u8ba9\u5bf9\u65b9\u8f93\u7684\u65b9\u6cd5\n    return (dp[state] = false);\n  }\n\n  return f(desiredTotal, 0);\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\n        int sum = (1+maxChoosableInteger)*maxChoosableInteger/2;\n        if(sum < desiredTotal){\n            return false;\n        }\n        unordered_map<int,int> d;\n        return dfs(maxChoosableInteger,0,desiredTotal,0,d);\n    }\n\n    bool dfs(int n,int s,int t,int S,unordered_map<int,int>& d){\n        if(d[S]) return  d[S];\n        int& ans = d[S];\n\n        if(s >= t){\n            return ans = true;\n        }\n        if(S == (((1 << n)-1) << 1)){\n            return ans = false;\n        }\n\n        for(int m = 1;m <=n;++m){\n            if(S & (1 << m)){\n                continue;\n            }\n            int nextS = S|(1 << m);\n            if(s+m >= t){\n                return ans = true;\n            }\n            bool r1 = dfs(n,s+m,t,nextS,d);\n            if(!r1){\n                return ans = true;\n            }\n        }\n        return ans = false;\n    }\n};\n\n"},{language:"py",text:"\ndef canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n"},{language:"py",text:"\nclass Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        # acc \u8868\u793a\u5f53\u524d\u7d2f\u8ba1\u7684\u6570\u5b57\u548c\n        def dfs(acc):\n            if acc >= desiredTotal:\n                return False\n            for n in range(1, maxChoosableInteger + 1):\n                # \u5bf9\u65b9\u6709\u4e00\u79cd\u60c5\u51b5\u8d62\u4e0d\u4e86\uff0c\u6211\u5c31\u9009\u8fd9\u4e2a\u6570\u5b57\u5c31\u80fd\u8d62\u4e86\uff0c\u8fd4\u56de true\uff0c\u4ee3\u8868\u53ef\u4ee5\u8d62\u3002\n                if not dfs(acc + n):\n                    return True\n            return False\n\n        # \u521d\u59cb\u5316\u96c6\u5408\uff0c\u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u9009\u62e9\u8fc7\u7684\u6570\u3002\n        return dfs(0)\n"},{language:"py",text:"\nclass Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        if desiredTotal <= maxChoosableInteger:\n            return True\n        if sum(range(maxChoosableInteger + 1)) < desiredTotal:\n            return False\n        # picked \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u9009\u62e9\u8fc7\u7684\u6570\u3002\n        # acc \u8868\u793a\u5f53\u524d\u7d2f\u8ba1\u7684\u6570\u5b57\u548c\n        def backtrack(picked, acc):\n            if acc >= desiredTotal:\n                return False\n            if len(picked) == maxChoosableInteger:\n                # \u8bf4\u660e\u5168\u90e8\u90fd\u88ab\u9009\u4e86\uff0c\u6ca1\u5f97\u9009\u4e86\uff0c\u8fd4\u56de False\uff0c \u4ee3\u8868\u8f93\u4e86\u3002\n                return False\n            for n in range(1, maxChoosableInteger + 1):\n                if n not in picked:\n                    picked.add(n)\n                    # \u5bf9\u65b9\u6709\u4e00\u79cd\u60c5\u51b5\u8d62\u4e0d\u4e86\uff0c\u6211\u5c31\u9009\u8fd9\u4e2a\u6570\u5b57\u5c31\u80fd\u8d62\u4e86\uff0c\u8fd4\u56de true\uff0c\u4ee3\u8868\u53ef\u4ee5\u8d62\u3002\n                    if not backtrack(picked, acc + n):\n                        picked.remove(n)\n                        return True\n                    picked.remove(n)\n            return False\n\n        # \u521d\u59cb\u5316\u96c6\u5408\uff0c\u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u9009\u62e9\u8fc7\u7684\u6570\u3002\n        return backtrack(set(), 0)\n"},{language:"py",text:"\n1 << a\n"},{language:"py",text:"\na | b\n"},{language:"py",text:"\nseen = 0b0000000\na = 0b0000001\nb = ob0000010\n\nseen |= a \u540e\uff0c  seen \u4e3a 0b0000001\nseen |= b \u540e\uff0c  seen \u4e3a 0b0000011\n"},{language:"py",text:"\na & b\n"},{language:"py",text:"\nmask = 0b0000010\na & mask == 1 \u8bf4\u660e a \u5728\u7b2c\u4e8c\u4f4d\uff08\u4ece\u4f4e\u5230\u9ad8\uff09\u662f 1\na & mask == 0 \u8bf4\u660e a \u5728\u7b2c\u4e8c\u4f4d\uff08\u4ece\u4f4e\u5230\u9ad8\uff09\u662f 0\n"},{language:"py",text:"\npicked == (1 << (maxChoosableInteger + 1)) - 1\n"},{language:"py",text:"\n\nclass Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        if desiredTotal <= maxChoosableInteger:\n            return True\n        if sum(range(maxChoosableInteger + 1)) < desiredTotal:\n            return False\n\n        @lru_cache(None)\n        def dp(picked, acc):\n            if acc >= desiredTotal:\n                return False\n            if picked == (1 << (maxChoosableInteger + 1)) - 1:\n                return False\n            for n in range(1, maxChoosableInteger + 1):\n                if picked & 1 << n == 0:\n                    if not dp(picked | 1 << n, acc + n):\n                        return True\n            return False\n\n        return dp(0, 0)\n"}]},"concatenated-words":{id:"472",name:"concatenated-words",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u524d\u7f00\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/472.concatenated-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/472.concatenated-words.md",code:[{language:"py",text:"\nclass Trie:\n\n    def __init__(self):\n        self.Trie = {}\n        self.visited = {}\n\n    def insert(self, word):\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr['#'] = 1\n\n    def cntWords(self, word):\n        if not word:\n            return 0\n        if word in self.visited:\n            return self.visited[word]\n        curr = self.Trie\n        res = float('-inf')\n\n        for i, w in enumerate(word):\n            if w not in curr:\n                return res\n            curr = curr[w]\n            if '#' in curr:\n                res = max(res, 1 + self.cntWords(word[i + 1:]))\n        self.visited[word] = res\n        return res\n\n\nclass Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        self.trie = Trie()\n        res = []\n\n        for word in words:\n            self.trie.insert(word)\n        for word in words:\n            if self.trie.cntWords(word) >= 2:\n                res.append(word)\n        return res\n"}]},"sliding-window-median":{id:"480",name:"sliding-window-median",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:"https://github.com/azl397985856/leetcode/blob/master/91/binary-search.md",color:"magenta"}],keyPoints:[{text:"\u6ed1\u52a8\u7a97\u53e3+\u4e8c\u5206",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/480.sliding-window-median.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/480.sliding-window-median.md",code:[{language:"py",text:"\n\nclass Solution:\n    def medianSlidingWindow(self, A: List[int], k: int) -> List[float]:\n        ans = []\n        win = []\n\n        for i, a in enumerate(A):\n            bisect.insort(win, a)\n            if i >= k:\n                win.pop(bisect.bisect_left(win, A[i - k]))\n            if i >= k - 1:\n                if k & 1:\n                    median = win[k // 2]\n                else:\n                    median = (win[k // 2] + win[k // 2 - 1]) / 2\n                ans.append(median)\n        return ans\n\n\n"}]},"smallest-good-base":{id:"483",name:"smallest-good-base",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"},{text:"\u8fdb\u5236\u8f6c\u6362",link:null,color:"purple"}],keyPoints:[{text:"\u5229\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u516c\u5f0f\u53ef\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u4ece\u8fdb\u5236\u8f6c\u6362\u5165\u624b\u53d1\u73b0\u5355\u8c03\u6027\uff0c\u4ece\u800c\u4f7f\u7528\u4e8c\u5206\u89e3\u51b3",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/483.smallest-good-base.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/483.smallest-good-base.md",code:[{language:"py",text:"\nclass Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        n = int(n)\n        # \u4e0a\u9762\u63d0\u5230\u7684 base \u8fdb\u5236\u8f6c\u5341\u8fdb\u5236\u516c\u5f0f\u3002\n        # \u4f7f\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u516c\u5f0f\u53ef\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6\n        def sum_with(base, N):\n            return (1 - base ** N) // (1 - base)\n            # return sum(1 * base ** i for i in range(N))\n        # bin(n) \u4f1a\u8ba1\u7b97\u51fa n \u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c \u5176\u4f1a\u8fd4\u56de\u5f62\u5982 '0b10111' \u7684\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u9700\u8981\u51cf\u53bb 2\u3002\n        for N in range(len(bin(n)) - 2, 0, -1):\n            l = 2\n            r = n - 1\n            while l <= r:\n                mid = (l + r) // 2\n                v = sum_with(mid, N)\n\n                if v < n:\n                    l = mid + 1\n                elif v > n:\n                    r = mid - 1\n                else:\n                    return str(mid)\n\n"}]},"zuma-game":{id:"488",name:"zuma-game",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6a21\u677f",link:null,color:"blue"},{text:"\u53cc\u6307\u9488\u5199\u6cd5",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/488.zuma-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/488.zuma-game.md",code:[{language:"py",text:"\ni = 0\nwhile i < len(board):\n    j = i + 1\n    while j < len(board) and board[i] == board[j]: j += 1\n    # \u5176\u4ed6\u903b\u8f91\n\n    # \u66f4\u65b0\u5de6\u6307\u9488\n    i = j\n"},{language:"py",text:"\nclass Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        def backtrack(board):\n            if not board: return 0\n            i = 0\n            ans = 6\n            while i < len(board):\n                j = i + 1\n                while j < len(board) and board[i] == board[j]: j += 1\n                balls = 3 - (j - i)\n                if counter[board[i]] >= balls:\n                    balls = max(0, balls)\n                    counter[board[i]] -= balls\n                    ans = min(ans, balls + backtrack(board[:i] + board[j:]))\n                    counter[board[i]] += balls\n                i = j\n            return ans\n\n        counter = collections.Counter(hand)\n        ans = backtrack(board)\n        return -1 if ans > 5 else ans\n\n"}]},"reverse-pairs":{id:"493",name:"reverse-pairs",pre:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"},{text:"\u9006\u5e8f\u6570",link:null,color:"volcano"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"blue"},{text:"\u9006\u5e8f\u6570",link:null,color:"blue"},{text:"\u5206\u6cbb",link:null,color:"blue"},{text:"\u8bc6\u522b\u8003\u70b9\uff0c\u5176\u4ed6\u975e\u91cd\u70b9\u53ef\u4ee5\u4f7f\u7528\u8bed\u8a00\u5185\u7f6e\u65b9\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/493.reverse-pairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/493.reverse-pairs.md",code:[{language:"py",text:"\nclass Solution(object):\n    def reversePairs(self, nums):\n        n = len(nums)\n        cnt = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] > 2 * nums[j]:\n                    cnt += 1\n        return cnt\n"},{language:"py",text:"\nl = r = 0\nwhile l < len(left) and r < len(right):\n    if left[l] <= 2 * right[r]:\n        l += 1\n    else:\n        self.cnt += len(left) - l\n        r += 1\n"},{language:"py",text:"\nclass Solution(object):\n    def reversePairs(self, nums):\n        self.cnt = 0\n\n        def mergeSort(lst):\n            L = len(lst)\n            if L <= 1:\n                return lst\n            return mergeTwo(mergeSort(lst[:L//2]), mergeSort(lst[L//2:]))\n\n        def mergeTwo(left, right):\n            l = r = 0\n            while l < len(left) and r < len(right):\n                if left[l] <= 2 * right[r]:\n                    l += 1\n                else:\n                    self.cnt += len(left) - l\n                    r += 1\n            return sorted(left+right)\n\n        mergeSort(nums)\n        return self.cnt\n\n"}]},"target-sum":{id:"494",name:"target-sum",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5bf9\u5143\u7d20\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u7b26\u53f7\uff0c\u662f`+`\u6216\u8005`",link:null,color:"blue"},{text:"`",link:null,color:"blue"},{text:"\u901a\u8fc7\u6570\u5b66\u516c\u5f0f\u63a8\u5bfc\u53ef\u4ee5\u7b80\u5316\u6211\u4eec\u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u8fd9\u9700\u8981\u4e00\u70b9`\u6570\u5b66\u77e5\u8bc6\u548c\u6570\u5b66\u610f\u8bc6`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/494.target-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/494.target-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=494 lang=javascript\n *\n * [494] Target Sum\n *\n */\n// \u8fd9\u4e2a\u662f\u6211\u4eec\u719f\u6089\u7684\u95ee\u9898\u4e86\n// \u6211\u4eec\u8fd9\u91cc\u9700\u8981\u6c42\u89e3\u7684\u662fnums\u91cc\u9762\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u7ec4\u6210target\u7684\u65b9\u5f0f\nvar sumCount = function (nums, target) {\n  // \u8fd9\u91cc\u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u53bb\u5b58\u50a8\u8fd9\u4e9b\u8ba1\u7b97\u7ed3\u679c\n  // \u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u53ef\u4ee5\u6709\u6548\u8282\u7701\u7a7a\u95f4\n  const dp = Array(target + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = target; j >= nums[i]; j--) {\n      dp[j] += dp[j - nums[i]];\n    }\n  }\n  return dp[target];\n};\nconst add = (nums) => nums.reduce((a, b) => (a += b), 0);\n/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function (nums, S) {\n  const sum = add(nums);\n  if (sum < S) return 0;\n  if ((S + sum) % 2 === 1) return 0;\n  return sumCount(nums, (S + sum) >> 1);\n};\n"}]},"base-7":{id:"504",name:"base-7",pre:[],keyPoints:[{text:"\u9664x\u53d6\u4f59\uff0c\u5e76\u9006\u5e8f\u8f93\u51fa",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/504.base-7.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/504.base-7.md",code:[{language:"py",text:'\n\nclass Solution:\n    def convertToBase7(self, num: int) -> str:\n        if num < 0:\n            return "-" + self.convertToBase7(-num)\n        if num < 7:\n            return str(num)\n        return self.convertToBase7(num // 7) + str(num % 7)\n\n'},{language:"py",text:'\nclass Solution:\n    def convertToBase7(self, num: int) -> str:\n        if num == 0:\n            return 0\n        ans = []\n        is_negative = num < 0\n        num = abs(num)\n        while num > 0:\n            num, remain = num // 7, num % 7\n            ans.append(str(remain))\n\n        return "-" + "".join(ans[::-1]) if is_negative else "".join(ans[::-1])\n\n'}]},"find-bottom-left-tree-value":{id:"513",name:"find-bottom-left-tree-value",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/513.find-bottom-left-tree-value.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/513.find-bottom-left-tree-value.md",code:[{language:"java",text:"\nclass Solution {\n    Map<Integer,Integer> map = new HashMap<>();\n    int maxLevel = 0;\n    public int findBottomLeftValue(TreeNode root) {\n        if (root == null) return 0;\n        LinkedList<TreeNode> deque = new LinkedList<>();\n        deque.add(root);\n        int res = 0;\n        while(!deque.isEmpty()) {\n            int size = deque.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = deque.pollFirst();\n                if (i == 0) {\n                    res = node.val;\n                }\n                if (node.left != null)deque.addLast(node.left);\n                if (node.right != null)deque.addLast(node.right);\n            }\n        }\n        return res;\n    }\n}\n"},{language:"java",text:"\nclass Solution {\n    int max = 0;\n    Map<Integer,Integer> map = new HashMap<>();\n    public int findBottomLeftValue(TreeNode root) {\n        if (root == null) return 0;\n        dfs(root,0);\n        return map.get(max);\n    }\n\n    void dfs (TreeNode node,int level){\n        if (node == null){\n            return;\n        }\n        int curLevel = level+1;\n        dfs(node.left,curLevel);\n        if (curLevel > max && !map.containsKey(curLevel)){\n            map.put(curLevel,node.val);\n            max = curLevel;\n        }\n        dfs(node.right,curLevel);\n    }\n\n}\n"},{language:"js",text:"\nvar findBottomLeftValue = function (root) {\n  let curLevel = [root];\n  let res = root.val;\n  while (curLevel.length) {\n    let nextLevel = [];\n    for (let i = 0; i < curLevel.length; i++) {\n      curLevel[i].left && nextLevel.push(curLevel[i].left);\n      curLevel[i].right && nextLevel.push(curLevel[i].right);\n    }\n    res = curLevel[0].val;\n    curLevel = nextLevel;\n  }\n  return res;\n};\n"},{language:"js",text:"\nfunction findBottomLeftValue(root) {\n  let maxDepth = 0;\n  let res = root.val;\n\n  dfs(root.left, 0);\n  dfs(root.right, 0);\n\n  return res;\n\n  function dfs(cur, depth) {\n    if (!cur) {\n      return;\n    }\n    const curDepth = depth + 1;\n    if (curDepth > maxDepth) {\n      maxDepth = curDepth;\n      res = cur.val;\n    }\n    dfs(cur.left, curDepth);\n    dfs(cur.right, curDepth);\n  }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int findBottomLeftValue_bfs(TreeNode* root) {\n        queue<TreeNode*> q;\n        TreeNode* ans = NULL;\n        q.push(root);\n        while (!q.empty()) {\n            ans = q.front();\n            int size = q.size();\n            while (size--) {\n                TreeNode* cur = q.front();\n                q.pop();\n                if (cur->left )\n                    q.push(cur->left);\n                if (cur->right)\n                    q.push(cur->right);\n            }\n        }\n        return ans->val;\n    }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int res;\n    int max_depth = 0;\n    void findBottomLeftValue_core(TreeNode* root, int depth) {\n        if (root->left || root->right) {\n            if (root->left)\n                findBottomLeftValue_core(root->left, depth + 1);\n            if (root->right)\n                findBottomLeftValue_core(root->right, depth + 1);\n        } else {\n            if (depth > max_depth) {\n                res = root->val;\n                max_depth = depth;\n            }\n        }\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        findBottomLeftValue_core(root, 1);\n        return res;\n    }\n};\n\n"},{language:"py",text:"\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        queue = collections.deque()\n        queue.append(root)\n        while queue:\n            length = len(queue)\n            res = queue[0].val\n            for _ in range(length):\n                cur = queue.popleft()\n                if cur.left:\n                    queue.append(cur.left)\n                if cur.right:\n                    queue.append(cur.right)\n        return res\n"},{language:"py",text:"\nclass Solution(object):\n\n    def __init__(self):\n        self.res = 0\n        self.max_level = 0\n\n    def findBottomLeftValue(self, root):\n        self.res = root.val\n        def dfs(root, level):\n            if not root:\n                return\n            if level > self.max_level:\n                self.res = root.val\n                self.max_level = level\n            dfs(root.left, level + 1)\n            dfs(root.right, level + 1)\n        dfs(root, 0)\n\n        return self.res\n"}]},"longest-palindromic-subsequence":{id:"516",name:"longest-palindromic-subsequence",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u201d\u5ef6\u4f38\u201c\uff08extend\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md",code:[{language:"js",text:"\nif (s[i] === s[j]) {\n  dp[i][j] = dp[i + 1][j - 1] + 2;\n} else {\n  dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=516 lang=javascript\n *\n * [516] Longest Palindromic Subsequence\n */\n/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function (s) {\n  // bbbab \u8fd4\u56de4\n  // tag : dp\n  const dp = [];\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    dp[i] = Array(s.length).fill(0);\n    for (let j = i; j < s.length; j++) {\n      if (i - j === 0) dp[i][j] = 1;\n      else if (s[i] === s[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n\n  return dp[0][s.length - 1];\n};\n"}]},"coin-change-2":{id:"518",name:"coin-change-2",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"},{text:"\u80cc\u5305\u95ee\u9898",link:null,color:"red"}],keyPoints:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/518.coin-change-2.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/518.coin-change-2.md",code:[{language:"js",text:"\nif (amount === 0) return 1;\n\nconst dp = [Array(amount + 1).fill(1)];\n\nfor (let i = 1; i < amount + 1; i++) {\n  dp[i] = Array(coins.length + 1).fill(0);\n  for (let j = 1; j < coins.length + 1; j++) {\n    // \u4ece1\u5f00\u59cb\u53ef\u4ee5\u7b80\u5316\u8fd0\u7b97\n    if (i - coins[j - 1] >= 0) {\n      // \u6ce8\u610f\u8fd9\u91cc\u662fcoins[j -1]\u800c\u4e0d\u662fcoins[j]\n      dp[i][j] = dp[i][j - 1] + dp[i - coins[j - 1]][j]; // \u7531\u4e8e\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u786c\u5e01\u6240\u4ee5\u8fd9\u91cc\u662fj\u4e0d\u662fj-1\n    } else {\n      dp[i][j] = dp[i][j - 1];\n    }\n  }\n}\n\nreturn dp[dp.length - 1][coins.length];\n"},{language:"js",text:"\n// \u8fd9\u79cd\u7b54\u6848\u662f\u4e0d\u5bf9\u7684\u3002\n// \u539f\u56e0\u5728\u4e8e\u6bd4\u5982amount = 5, coins = [1,2,5]\n// \u8fd9\u79cd\u7b97\u6cd5\u4f1a\u5c06[1,2,2] [2,1,2] [2, 2, 1] \u7b97\u6210\u4e0d\u540c\u7684\n\nif (amount === 0) return 1;\n\nconst dp = [1].concat(Array(amount).fill(0));\n\nfor (let i = 1; i < amount + 1; i++) {\n  for (let j = 0; j < coins.length; j++) {\n    if (i - coins[j] >= 0) {\n      dp[i] = dp[i] + dp[i - coins[j]];\n    }\n  }\n}\n\nreturn dp[dp.length - 1];\n\n// \u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u5185\u5916\u5faa\u73af\u8c03\u6362\u4e00\u4e0b, \u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u65b9\u4ee3\u7801\u533a\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=518 lang=javascript\n *\n * [518] Coin Change 2\n *\n */\n/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function (amount, coins) {\n  if (amount === 0) return 1;\n\n  const dp = [1].concat(Array(amount).fill(0));\n\n  for (let j = 0; j < coins.length; j++) {\n    for (let i = 1; i < amount + 1; i++) {\n      if (i - coins[j] >= 0) {\n        dp[i] = dp[i] + dp[i - coins[j]];\n      }\n    }\n  }\n\n  return dp[dp.length - 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n\n        for j in range(len(coins)):\n            for i in range(1, amount + 1):\n                if i >= coins[j]:\n                    dp[i] += dp[i - coins[j]]\n\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        dp = [[0 for _ in range(len(coins) + 1)] for _ in range(amount + 1)]\n        for j in range(len(coins) + 1):\n            dp[0][j] = 1\n\n        for i in range(amount + 1):\n            for j in range(1, len(coins) + 1):\n                if i >= coins[j - 1]:\n                    dp[i][j] = dp[i - coins[j - 1]][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return dp[-1][-1]\n"}]},"friend-circles":{id:"547",name:"friend-circles",pre:[{text:"\u5e76\u67e5\u96c6",link:null,color:"volcano"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/547.friend-circles.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/547.friend-circles.md",code:[{language:"py",text:"\nclass UF:\n    parent = {}\n    cnt = 0\n    def __init__(self, M):\n        n = len(M)\n        for i in range(n):\n            self.parent[i] = i\n            self.cnt += 1\n\n    def find(self, x):\n        while x != self.parent[x]:\n            x = self.parent[x]\n        return x\n    def union(self, p, q):\n        if self.connected(p, q): return\n        self.parent[self.find(p)] = self.find(q)\n        self.cnt -= 1\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:\n        n = len(M)\n        uf = UF(M)\n        for i in range(n):\n            for j in range(i):\n                if M[i][j] == 1:\n                    uf.union(i, j)\n        return uf.cnt\n\n"}]},"subarray-sum-equals-k":{id:"560",name:"subarray-sum-equals-k",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u524d\u7f00\u548c",link:null,color:"cyan"}],keyPoints:[{text:"\u524d\u7f00\u548c",link:null,color:"blue"},{text:"\u53ef\u4ee5\u5229\u7528hashmap\u8bb0\u5f55\u548c\u7684\u7d2f\u52a0\u503c\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/560.subarray-sum-equals-k.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/560.subarray-sum-equals-k.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=560 lang=javascript\n *\n * [560] Subarray Sum Equals K\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function (nums, k) {\n  const hashmap = {};\n  let acc = 0;\n  let count = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    acc += nums[i];\n\n    if (acc === k) count++;\n\n    if (hashmap[acc - k] !== void 0) {\n      count += hashmap[acc - k];\n    }\n\n    if (hashmap[acc] === void 0) {\n      hashmap[acc] = 1;\n    } else {\n      hashmap[acc] += 1;\n    }\n  }\n\n  return count;\n};\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        cnt, n =  0, len(nums)\n        for i in range(n):\n            sum = 0\n            for j in range(i, n):\n                sum += nums[j]\n                if (sum == k): cnt += 1\n        return cnt\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n      cnt, n =  0, len(nums)\n      pre = [0] * (n + 1)\n      for i in range(1, n + 1):\n          pre[i] = pre[i - 1] + nums[i - 1]\n      for i in range(1, n + 1):\n          for j in range(i, n + 1):\n              if (pre[j] - pre[i - 1] == k): cnt += 1\n      return cnt\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        d = {}\n        acc = count = 0\n        for num in nums:\n            acc += num\n            if acc == k:\n                count += 1\n            if acc - k in d:\n                count += d[acc-k]\n            if acc in d:\n                d[acc] += 1\n            else:\n                d[acc] = 1\n        return count\n"}]},"distribute-candies":{id:"575",name:"distribute-candies",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u662f\u4e00\u9053\u903b\u8f91\u9898\u76ee\uff0c\u56e0\u6b64\u5982\u679c\u903b\u8f91\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4ee3\u7801\u662f\u81ea\u7136\u800c\u7136\u7684",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/575.distribute-candies.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/575.distribute-candies.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=575 lang=javascript\n *\n * [575] Distribute Candies\n */\n/**\n * @param {number[]} candies\n * @return {number}\n */\nvar distributeCandies = function (candies) {\n  const count = new Set(candies);\n  return Math.min(count.size, candies.length >> 1);\n};\n"},{language:"py",text:"\nclass Solution:\n    def distributeCandies(self, candies: List[int]) -> int:\n        return min(len(set(candies)), len(candies) >> 1)\n"}]},"find-duplicate-file-in-system":{id:"609",name:"find-duplicate-file-in-system",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"hashtable",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md",code:[{language:"js",text:'\n/**\n * @param {string[]} paths\n * @return {string[][]}\n */\nvar findDuplicate = function(paths) {\n  const hashmap = {};\n\n  for (let path of paths) {\n    const [folder, ...files] = path.split(" ");\n    for (let file of files) {\n      const lpi = file.indexOf("(");\n      const rpi = file.lastIndexOf(")");\n      const filename = file.slice(0, lpi);\n      const content = file.slice(lpi, rpi);\n      const fullname = `${folder}/${filename}`;\n      if (!hashmap[content]) hashmap[content] = [];\n      hashmap[content].push(fullname);\n    }\n  }\n\n  return Object.values(hashmap).filter(q => q.length >= 2);\n};\n'}]},"valid-triangle-number":{id:"611",name:"valid-triangle-number",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"},{text:"\u4e09\u89d2\u5f62\u8fb9\u7684\u5173\u7cfb",link:null,color:"green"}],keyPoints:[{text:"\u4e09\u89d2\u5f62\u8fb9\u7684\u5173\u7cfb",link:null,color:"blue"},{text:"\u4e09\u5c42\u5faa\u73af\u786e\u5b9a\u4e09\u4e2a\u7ebf\u6bb5",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/611.valid-triangle-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/611.valid-triangle-number.md",code:[{language:"py",text:"\nclass Solution:\n    def is_triangle(self, a, b, c):\n        if a == 0 or b == 0 or c == 0: return False\n        if a + b > c and a + c > b and b + c > a: return True\n        return False\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if self.is_triangle(nums[i], nums[j], nums[k]): ans += 1\n\n        return ans\n"},{language:"py",text:"\n    def is_triangle(self, a, b, c):\n        if a == 0 or b == 0 or c == 0: return False\n        # a + c > b \u548c  b + c > a \u662f\u65e0\u6548\u7684\u5224\u65ad\uff0c\u56e0\u4e3a\u6052\u6210\u7acb\n        if a + b > c and a + c > b and b + c > a: return True\n        return False\n"},{language:"py",text:"\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        k = j + 1\n        while k < n and num[i] + nums[j] > nums[k]:\n            k += 1\n        ans += k - j - 1\n"},{language:"py",text:"\nfor i in range(n - 2):\n    k = i + 2\n    for j in range(i + 1, n - 1):\n        while k < n and nums[i] + nums[j] > nums[k]:\n            k += 1\n        ans += k - j - 1\n"},{language:"py",text:"\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        nums.sort()\n        for i in range(n - 2):\n            if nums[i] == 0: continue\n            k = i + 2\n            for j in range(i + 1, n - 1):\n                while k < n and nums[i] + nums[j] > nums[k]:\n                    k += 1\n                ans += k - j - 1\n        return ans\n"}]},"non-decreasing-array":{id:"665",name:"non-decreasing-array",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u8d2a\u5fc3",link:null,color:"purple"}],keyPoints:[{text:"\u8003\u8651\u5404\u79cd\u8fb9\u754c\u60c5\u51b5\uff0c\u8d2a\u5fc3\u6539\u53d8\u6570\u7ec4\u7684\u503c",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/665.non-decreasing-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/665.non-decreasing-array.md",code:[{language:"py",text:"\nclass Solution:\n    def checkPossibility(self, A: List[int]) -> bool:\n        count = 0\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                if count == 1: return False\n                count += 1\n        return True\n"},{language:"py",text:"\n\nclass Solution(object):\n    def checkPossibility(self, A):\n        N = len(A)\n        count = 0\n        for i in range(1, N):\n            if A[i] < A[i - 1]:\n                count += 1\n                if count > 1:\n                    return False\n                # [4,2,3]  [4,2,1]   [1,2,1,2]  [1,1,1,] []\n                if i >= 2 and A[i] < A[i - 2]:\n                    A[i] = A[i - 1]\n\n        return True\n\n"}]},"number-of-longest-increasing-subsequence":{id:"673",name:"number-of-longest-increasing-subsequence",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"[\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898](https://lucifer.ren/blog/2020/06/20/LIS/)",link:null,color:"blue"},{text:"dp[j][1]=dp[i][1]\u5bb9\u6613\u5fd8\u8bb0",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/673.number-of-longest-increasing-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/673.number-of-longest-increasing-subsequence.md",code:[{language:"py",text:"\nfor i in range(n):\n    for j in range(i + 1, n):\n        if nums[j] > nums[i]:\n            # ...\n"},{language:"py",text:"\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        # dp[i][0] ->  LIS\n        # dp[i][1] -> NumberOfLIS\n        dp = [[1, 1] for _ in range(n)]\n        longest = 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[j] > nums[i]:\n                    if dp[i][0] + 1 > dp[j][0]:\n                        dp[j][0] = dp[i][0] + 1\n                        # \u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u5bb9\u6613\u5fd8\u8bb0\uff0c\u5bfc\u81f4\u51fa\u9519\n                        dp[j][1] = dp[i][1]\n                        longest = max(longest, dp[j][0])\n                    elif dp[i][0] + 1 == dp[j][0]:\n                        dp[j][1] += dp[i][1]\n        return sum(dp[i][1] for i in range(n) if dp[i][0] == longest)\n\n"}]},"24-game":{id:"679",name:"24-game",pre:[{text:"\u56de\u6eaf",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md "\u56de\u6eaf"',color:"green"},{text:"\u6570\u5b57\u7cbe\u5ea6\u95ee\u9898",link:null,color:"geekblue"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u4f7f\u7528\u9012\u5f52\u5c06\u95ee\u9898\u5206\u89e3\u6210\u89c4\u6a21\u66f4\u5c0f\u7684\u540c\u6837\u95ee\u9898",link:null,color:"blue"},{text:"\u7cbe\u5ea6\u63a7\u5236\uff0c\u5373\u5982\u679c\u8bef\u5dee\u4e0d\u8d85\u8fc7\u67d0\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\u5c31\u8ba4\u4e3a\u4e8c\u8005\u662f\u76f8\u7b49\u7684",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/679.24-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/679.24-game.md",code:[{language:"py",text:"\n\nclass\xa0Solution:\n\xa0\xa0\xa0\xa0def\xa0judgePoint24(self,\xa0nums:\xa0List[int])\xa0->\xa0bool:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0len(nums)\xa0==\xa01:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0math.isclose(nums[0],\xa024)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0any(self.judgePoint24([x]\xa0+\xa0rest)\xa0for\xa0a,\xa0b,\xa0*rest\xa0in\xa0permutations(nums)\xa0\nfor\xa0x\xa0in\xa0[a+b,\xa0a-b,\xa0a*b,\xa0b\xa0and\xa0a/b])\n\n"}]},"repeated-string-match":{id:"686",name:"repeated-string-match",pre:[{text:"set",link:null,color:"volcano"}],keyPoints:[{text:"\u7b54\u6848\u662f\u6709\u9650\u7684\uff0c\u641e\u6e05\u695a\u89e3\u7a7a\u95f4\u662f\u5173\u952e",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/686.repeated-string-match.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/686.repeated-string-match.md",code:[{language:"py",text:"\ncnt = 1\nwhile True:\n    if b in a * cnt:\n        return cnt\n    cnt += 1\nreturn -1\n"},{language:"py",text:"\nclass Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n        if not set(b).issubset(set(a)):\n            return -1\n        cnt = 1\n        while len(a * cnt) < 2 * len(a) + len(b):\n            if b in a * cnt:\n                return cnt\n            cnt += 1\n        return -1\n"}]},"best-time-to-buy-and-sell-stock-with-transaction-fee":{id:"714",name:"best-time-to-buy-and-sell-stock-with-transaction-fee",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md",code:[{language:"py",text:"\n\nclass Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        def dp(i):\n            if i == 0:\n                return 0, -prices[0] - fee\n            sell, buy = dp(i - 1)\n            return max(sell, buy + prices[i]), max(buy, sell - prices[i] - fee)\n\n        return dp(len(prices) - 1)[0]\n\n"},{language:"py",text:"\nclass Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        @lru_cache(None)\n        def dp(i, state):\n            if i == len(prices) - 1:\n                return prices[i] - fee if state == 1 else 0\n            if state == 1:\n                return max(dp(i + 1, 1), dp(i + 1, 0) + prices[i] - fee)\n            return max(dp(i + 1, 0), dp(i + 1, 1) - prices[i])\n\n        return dp(0, 0)\n"},{language:"py",text:"\n\nclass Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        n = len(prices)\n        dp = [[0 for i in range(2)]] * n\n        for i in range(n):\n            if i == 0:\n                dp[i][0] = 0\n                dp[i][1] = -1 * prices[i]\n            else:\n                dp[i][0] = max(dp[i - 1][1] + prices[i] - fee, dp[i - 1][0])\n                dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n\n        return dp[-1][0]\n\n"},{language:"py",text:"\nclass Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        n = len(prices)\n        # [\u624b\u91cc\u6ca1\u80a1\u7968, \u624b\u91cc\u6709\u80a1\u7968]\n        dp = [0, 0]\n        for i in range(n):\n            if i == 0:\n                dp[0] = 0\n                dp[1] = -1 * prices[i] - fee\n            else:\n                dp[0] = max(dp[0], dp[1] + prices[i])\n                dp[1] = max(dp[1], dp[0] - prices[i] - fee)\n\n        return dp[0]\n"}]},"range-module":{id:"715",name:"range-module",pre:[{text:"\u533a\u95f4\u67e5\u627e\u95ee\u9898",link:null,color:"gold"},{text:"\u4e8c\u5206\u67e5\u627e",link:'https://github.com/azl397985856/leetcode/blob/master/91/binary-search.md "\u4e8c\u5206\u67e5\u627e"',color:"magenta"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e\u7684\u7075\u6d3b\u4f7f\u7528\uff08\u6700\u5de6\u63d2\u5165\u548c\u6700\u53f3\u63d2\u5165\uff09",link:null,color:"blue"},{text:"\u5c06\u533a\u95f4\u4e00\u7ef4\u5316\u5904\u7406",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/715.range-module.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/715.range-module.md",code:[{language:"py",text:"\nclass RangeModule(object):\n    def __init__(self):\n        # [(1,2),(3,6),(8,12)]\n        self.ranges = []\n    def overlap(self, left, right):\n        i, j = 0, len(self.ranges) - 1\n        while i < len(self.ranges) and self.ranges[i][1] < left:\n            i += 1\n        while j >= 0 and self.ranges[j][0] > right:\n            j -= 1\n        return i, j\n\n    def addRange(self, left, right):\n        i, j = self.overlap(left, right)\n        if i <= j:\n            left = min(left, self.ranges[i][0])\n            right = max(right, self.ranges[j][1])\n        self.ranges[i:j+1] = [(left, right)]\n    def queryRange(self, left, right):\n        i = bisect.bisect_right(self.ranges, (left, float('inf'))) - 1\n        return self.ranges and self.ranges[i][0] <= left and right <= self.ranges[i][1]\n\n    def removeRange(self, left, right):\n        i, j = self.overlap(left, right)\n        merge = []\n        for k in xrange(i, j+1):\n            if self.ranges[k][0] < left:\n                merge.append((self.ranges[k][0], left))\n            if right < self.ranges[k][1]:\n                merge.append((right, self.ranges[k][1]))\n        self.ranges[i:j+1] = merge\n"},{language:"py",text:"\nclass RangeModule(object):\n    def __init__(self):\n        # [1,2,3,5,8,12]\n        self.ranges = []\n\n    def overlap(self, left, right, is_odd):\n        i = bisect_left(self.ranges, left)\n        j = bisect_right(self.ranges, right)\n        merge = []\n        if i & 1 == int(is_odd):\n            merge.append(left)\n        if j & 1 == int(is_odd):\n            merge.append(right)\n        # \u4fee\u6539 ranges \u7684 [i:j-1] \u90e8\u5206\n        self.ranges[i:j] = merge\n\n    def addRange(self, left, right):\n        # [1,2,3,5,8,12]\uff0c \u4ee3\u5165 left = 3, right = 5\uff0c\u6b64\u65f6\u9700\u8981\u4fdd\u6301\u4e0d\u53d8\uff0c \u5c31\u4e0d\u96be\u77e5\u9053\u5e94\u8be5\u7528 bisect_left \u8fd8\u662f bisect_right\n        return self.overlap(left, right, False)\n\n    def removeRange(self, left, right):\n        # [1,2,3,5,8,12]\uff0c \u4ee3\u5165 left = 3, right = 5\uff0c\u6b64\u65f6\u9700\u8981\u4e3a [1,2,8,12]\uff0c \u5c31\u4e0d\u96be\u77e5\u9053\u5e94\u8be5\u7528 bisect_left \u8fd8\u662f bisect_right\n        return self.overlap(left, right, True)\n\n    def queryRange(self, left, right):\n        # [1,2,3,5,8,12]\uff0c \u4ee3\u5165 left = 3, right = 5\uff0c\u6b64\u65f6\u9700\u8981\u8fd4\u56de true\uff0c \u5c31\u4e0d\u96be\u77e5\u9053\u5e94\u8be5\u7528 bisect_left \u8fd8\u662f bisect_right\n        i = bisect_right(self.ranges, left)\n        j = bisect_left(self.ranges, right)\n        return i & 1 == 1 and i == j  # \u90fd\u5728\u4e00\u4e2a\u533a\u95f4\u5185\n\n"}]},"maximum-length-of-repeated-subarray":{id:"718",name:"maximum-length-of-repeated-subarray",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"dp\u5efa\u6a21\u5957\u8def",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md",code:[{language:"py",text:"\nclass Solution:\n    def findLength(self, A, B):\n        m, n = len(A), len(B)\n        ans = 0\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if A[i - 1] == B[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                    ans = max(ans, dp[i][j])\n        return ans\n"}]},"accounts-merge":{id:"721",name:"accounts-merge",pre:[{text:"\u5e76\u67e5\u96c6",link:null,color:"volcano"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/721.accounts-merge.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/721.accounts-merge.md",code:[{language:"py",text:"\nclass UF:\n    def __init__(self):\n        self.parent = {}\n\n    def find(self, x):\n        self.parent.setdefault(x, x)\n        while x != self.parent[x]:\n            x = self.parent[x]\n        return x\n    def union(self, p, q):\n        self.parent[self.find(p)] = self.find(q)\n\n\nclass Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        uf = UF()\n        email_to_name = {}\n        res = collections.defaultdict(list)\n        for account in accounts:\n            for i in range(1, len(account)):\n                email_to_name[account[i]] = account[0]\n                if i < len(account) - 1:uf.union(account[i], account[i + 1])\n        for email in email_to_name:\n            res[uf.find(email)].append(email)\n\n        return [[email_to_name[value[0]]] + sorted(value) for value in res.values()]\n"}]},"reach-a-number":{id:"754",name:"reach-a-number",pre:[{text:"\u6570\u5b66",link:null,color:"geekblue"}],keyPoints:[{text:"\u5bf9\u5143\u7d20\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u7b26\u53f7\uff0c\u662f`+`\u6216\u8005`",link:null,color:"blue"},{text:"`",link:null,color:"blue"},{text:"\u901a\u8fc7\u6570\u5b66\u516c\u5f0f\u63a8\u5bfc\u53ef\u4ee5\u7b80\u5316\u6211\u4eec\u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u8fd9\u9700\u8981\u4e00\u70b9`\u6570\u5b66\u77e5\u8bc6\u548c\u6570\u5b66\u610f\u8bc6`",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/754.reach-a-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/754.reach-a-number.md",code:[{language:"py",text:"\nclass Solution(object):\n    def reachNumber(self, target):\n        target = abs(target)\n        steps = 0\n        while target > 0:\n            steps += 1\n            target -= steps\n        if target & 1 == 0: return steps\n        steps += 1\n        if (target - steps) & 1 == 0: return steps\n        return steps + 1\n\n\n"}]},"max-chunks-to-make-sorted-ii":{id:"768",name:"max-chunks-to-make-sorted-ii",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u8ba1\u6570",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/768.max-chunks-to-make-sorted-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/768.max-chunks-to-make-sorted-ii.md",code:[{language:"java",text:"\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        LinkedList<Integer> stack = new LinkedList<Integer>();\n        for (int num : arr) {\n            // \u9047\u5230\u4e00\u4e2a\u6bd4\u6808\u9876\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u524d\u9762\u7684\u5757\u4e0d\u5e94\u8be5\u6709\u6bd4 a \u5c0f\u7684\n            // \u800c\u6808\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5757\uff0c\u5e76\u4e14\u6808\u7684\u5b58\u7684\u662f\u5757\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6808\u4e2d\u6bd4 a \u5c0f\u7684\u503c\u90fd\u9700\u8981 pop \u51fa\u6765\n            if (!stack.isEmpty() && num < stack.getLast()) {\n                // \u6211\u4eec\u9700\u8981\u5c06\u878d\u5408\u540e\u7684\u533a\u5757\u7684\u6700\u5927\u503c\u91cd\u65b0\u653e\u56de\u6808\n                // \u800c stack \u662f\u9012\u589e\u7684\uff0c\u56e0\u6b64 stack[-1] \u662f\u6700\u5927\u7684\n                int cur = stack.removeLast();\n                // \u7ef4\u6301\u6808\u7684\u5355\u8c03\u9012\u589e\n                while (!stack.isEmpty() && num < stack.getLast()) {\n                    stack.removeLast();\n                }\n                stack.addLast(cur);\n            } else {\n                stack.addLast(num);\n            }\n        }\n        // \u6808\u5b58\u7684\u662f\u5757\u4fe1\u606f\uff0c\u56e0\u6b64\u6808\u7684\u5927\u5c0f\u5c31\u662f\u5757\u7684\u6570\u91cf\n        return stack.size();\n    }\n}\n"},{language:"js",text:"\nvar maxChunksToSorted = function (arr) {\n  const stack = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    a = arr[i];\n    if (stack.length > 0 && stack[stack.length - 1] > a) {\n      const cur = stack[stack.length - 1];\n      while (stack && stack[stack.length - 1] > a) stack.pop();\n      stack.push(cur);\n    } else {\n      stack.push(a);\n    }\n  }\n  return stack.length;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n        stack<int> stack;\n        for(int i =0;i<arr.size();i++){\n            // \u9047\u5230\u4e00\u4e2a\u6bd4\u6808\u9876\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u524d\u9762\u7684\u5757\u4e0d\u5e94\u8be5\u6709\u6bd4 a \u5c0f\u7684\n            // \u800c\u6808\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5757\uff0c\u5e76\u4e14\u6808\u7684\u5b58\u7684\u662f\u5757\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6808\u4e2d\u6bd4 a \u5c0f\u7684\u503c\u90fd\u9700\u8981 pop \u51fa\u6765\n            if(!stack.empty()&&stack.top()>arr[i]){\n                // \u6211\u4eec\u9700\u8981\u5c06\u878d\u5408\u540e\u7684\u533a\u5757\u7684\u6700\u5927\u503c\u91cd\u65b0\u653e\u56de\u6808\n                // \u800c stack \u662f\u9012\u589e\u7684\uff0c\u56e0\u6b64 stack[-1] \u662f\u6700\u5927\u7684\n                int cur = stack.top();\n                // \u7ef4\u6301\u6808\u7684\u5355\u8c03\u9012\u589e\n                while(!stack.empty()&&stack.top()>arr[i]){\n                    sstackta.pop();\n                }\n\n                stack.push(cur);\n            }else{\n\n                stack.push(arr[i]);\n            }\n        }\n        // \u6808\u5b58\u7684\u662f\u5757\u4fe1\u606f\uff0c\u56e0\u6b64\u6808\u7684\u5927\u5c0f\u5c31\u662f\u5757\u7684\u6570\u91cf\n        return stack.size();\n    }\n};\n"},{language:"py",text:"\nclass Solution(object):\n    def maxChunksToSorted(self, arr):\n        count_a = collections.defaultdict(int)\n        count_b = collections.defaultdict(int)\n        ans = 0\n\n        for a, b in zip(arr, sorted(arr)):\n            count_a[a] += 1\n            count_b[b] += 1\n            if count_a == count_b: ans += 1\n\n        return ans\n\n"},{language:"py",text:"\nclass Solution(object):\n    class Solution(object):\n    def maxChunksToSorted(self, arr):\n        count = collections.defaultdict(int)\n        non_zero_cnt = 0\n        ans = 0\n\n        for a, b in zip(arr, sorted(arr)):\n            if count[a] == -1: non_zero_cnt -= 1\n            if count[a] == 0: non_zero_cnt += 1\n            count[a] += 1\n            if count[b] == 1: non_zero_cnt -= 1\n            if count[b] == 0: non_zero_cnt += 1\n            count[b] -= 1\n            if non_zero_cnt == 0: ans += 1\n\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def maxChunksToSorted(self, A: [int]) -> int:\n        stack = []\n        for a in A:\n            # \u9047\u5230\u4e00\u4e2a\u6bd4\u6808\u9876\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u524d\u9762\u7684\u5757\u4e0d\u5e94\u8be5\u6709\u6bd4 a \u5c0f\u7684\n            # \u800c\u6808\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5757\uff0c\u5e76\u4e14\u6808\u7684\u5b58\u7684\u662f\u5757\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6808\u4e2d\u6bd4 a \u5c0f\u7684\u503c\u90fd\u9700\u8981 pop \u51fa\u6765\n            if stack and stack[-1] > a:\n                # \u6211\u4eec\u9700\u8981\u5c06\u878d\u5408\u540e\u7684\u533a\u5757\u7684\u6700\u5927\u503c\u91cd\u65b0\u653e\u56de\u6808\n                # \u800c stack \u662f\u9012\u589e\u7684\uff0c\u56e0\u6b64 stack[-1] \u662f\u6700\u5927\u7684\n                cur = stack[-1]\n                # \u7ef4\u6301\u6808\u7684\u5355\u8c03\u9012\u589e\n                while stack and stack[-1] > a: stack.pop()\n                stack.append(cur)\n            else:\n                stack.append(a)\n        # \u6808\u5b58\u7684\u662f\u5757\u4fe1\u606f\uff0c\u56e0\u6b64\u6808\u7684\u5927\u5c0f\u5c31\u662f\u5757\u7684\u6570\u91cf\n        return len(stack)\n\n\n"}]},"is-graph-bipartite":{id:"785",name:"is-graph-bipartite",pre:[{text:"\u56fe\u7684\u904d\u5386",link:null,color:"geekblue"},{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u56fe\u7684\u5efa\u7acb\u548c\u904d\u5386",link:null,color:"blue"},{text:"colors\u6570\u7ec4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/785.is-graph-bipartite.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/785.is-graph-bipartite.md",code:[{language:"py",text:"\nclass Solution:\n    def dfs(self, grid, colors, i, color, N):\n        colors[i] = color\n        for j in range(N):\n            if grid[i][j] == 1:\n                if colors[j] == color:\n                    return False\n                if colors[j] == 0 and not self.dfs(grid, colors, j, -1 * color, N):\n                    return False\n        return True\n\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        N = len(graph)\n        grid = [[0] * N for _ in range(N)]\n        colors = [0] * N\n        for i in range(N):\n            for j in graph[i]:\n                grid[i][j] = 1\n        for i in range(N):\n            if colors[i] == 0 and not self.dfs(grid, colors, i, 1, N):\n                return False\n        return True\n"}]},"domino-and-tromino-tiling":{id:"790",name:"domino-and-tromino-tiling",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bc6\u522b\u6700\u4f18\u5b50\u7ed3\u6784",link:null,color:"blue"},{text:"\u5bf9\u4e00\u5757\u74f7\u7816\u80fd\u62fc\u6210\u7684\u56fe\u5f62\u8fdb\u884c\u5206\u89e3\uff0c\u5e76\u5bf9\u6bcf\u4e00\u79cd\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/790.domino-and-tromino-tiling.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/790.domino-and-tromino-tiling.md",code:[{language:"py",text:"\n\nclass Solution:\n    def numTilings(self, N: int) -> int:\n        dp = [0] * (N + 3)\n        # f(3) = 2 * f(2) + f(0) = 2 + f(0) = 1 -> f(0) = -1\n        # f(4) = 2 * f(3) + f(1) = 2 + f(1) = 2 -> f(1) = 0\n        dp[0] = -1\n        dp[1] = 0\n        dp[2] = 1\n        # f(n) = f(n-1) + f(n-2) + 2 * T(n-1)\n        # 2 * T(n-1) = 2 * f(n-3) + 2 * T(n-2)\n        # f(n) = f(n-1) + 2 * f(n-3) + f(n-2) + 2T(n-2) = f(n-1) + f(n-3) + f(n-3) + f(n-2) + 2T(n-2) = f(n-1) + f(n-3) + f(n-1) = 2 * f(n-1) + f(n-3)\n        for i in range(3, N + 3):\n            dp[i] = 2 * dp[i-1] + dp[i-3]\n        return dp[-1] % (10 ** 9 + 7)\n\n"}]},"champagne-tower":{id:"799",name:"champagne-tower",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u6768\u8f89\u4e09\u89d2",link:null,color:"green"}],keyPoints:[{text:"\u4e0d\u5fc5\u6a21\u62df\u591a\u6b65\uff0c\u800c\u662f\u53ea\u6a21\u62df\u4e00\u6b21\u5373\u53ef",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/799.champagne-tower.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/799.champagne-tower.md",code:[{language:"py",text:"\n\nclass Solution:\n    def champagneTower(self, poured, R, C):\n        # \u8fd9\u79cd\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u4e00\u534a\u7a7a\u95f4\u662f\u6d6a\u8d39\u7684\n        A = [[0] * (R+1) for _ in range(R+1)]\n        A[0][0] = poured\n        # \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u6a21\u62df\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\n        for i in range(R + 1):\n            for j in range(i+1):\n                overflow = (A[i][j] - 1.0) / 2.0\n                # \u4e0d\u5fc5\u6a21\u62df\u591a\u6b65\uff0c\u800c\u662f\u53ea\u6a21\u62df\u4e00\u6b21\u5373\u53ef\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u65e0\u9700\u6ea2\u51fa\u5230\u4e0b\u4e00\u5c42\u4e4b\u540e\uff0c\u4e0b\u4e00\u5c42\u7684\u676f\u5b50\u5bb9\u91cf\u5927\u4e8e 1\uff0c\u56e0\u4e3a\u6211\u4eec\u540e\u9762\u5904\u7406\u5373\u53ef\uff0c\u8fd9\u548c\u76f4\u89c9\u4e0a\u6216\u8bb8\u6709\u6240\u4e0d\u4e00\u6837\u3002\u4f53\u73b0\u5728\u4ee3\u7801\u4e0a\u53ea\u9700\u8981 if \u5373\u53ef\uff0c\u65e0\u9700 while\n                if overflow > 0 and i < R and j <= C:\n                    A[i+1][j] += overflow\n                    if j+1<=C: A[i+1][j+1] += overflow\n\n        return min(1, A[R][C]) # \u6700\u540e\u7684\u7ed3\u679c\u5982\u679c\u5927\u4e8e 1\uff0c\u8bf4\u660e\u6d41\u5230\u5730\u677f\u4e0a\u4e86\uff0c\u9700\u8981\u548c 1 \u53d6\u6700\u5c0f\u503c\u3002\n\n"}]},"minimum-swaps-to-make-sequences-increasing":{id:"801",name:"minimum-swaps-to-make-sequences-increasing",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u4e00\uff1a\u65e0\u9700\u8003\u8651\u5168\u90e8\u6574\u4f53\uff0c\u800c\u53ea\u9700\u8981\u8003\u8651\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u5373\u53ef\u8fd9\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u95ee\u9898\u7684\u5173\u952e\u6761\u4ef6\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c**\u6700\u5c0f**\u7684\u5b50\u95ee\u9898\u5c31\u662f\u5f53\u524d\u9879\u548c\u524d\u4e00\u9879\u7ec4\u6210\u7684\u5c40\u90e8\uff0c**\u65e0\u6cd5**\u518d\u5c0f\u4e86\uff0c**\u6ca1\u6709\u5fc5\u8981**\u518d\u5927\u4e86\u3002\u4e3a\u4ec0\u4e48\u53ea\u5173\u5fc3\u4e24\u4e2a\u6570\u5b57\u5373\u53ef\uff1f\u56e0\u4e3a\u8981\u4f7f\u5f97\u6574\u4e2a\u6570\u7ec4\u9012\u589e\uff0c**\u5047\u8bbe**\u524d\u9762\u7684i",link:null,color:"blue"},{text:"2\u9879\u5df2\u7ecf\u6ee1\u8db3\u9012\u589e\u4e86\uff0c\u90a3\u4e48\u73b0\u5728**\u91c7\u53d6\u67d0\u79cd\u65b9\u5f0f**\u4f7f\u5f97\u6ee1\u8db3A[i]>A[i",link:null,color:"blue"},{text:"1]\u5373\u53ef(B\u4e5f\u662f\u540c\u7406)\u3002>\u56e0\u4e3aA[i",link:null,color:"blue"},{text:"1]>A[i",link:null,color:"blue"},{text:"2]\u5df2\u7ecf\u6210\u7acb\uff0c\u56e0\u6b64\u5982\u679cA[i]>A[i",link:null,color:"blue"},{text:"1]\uff0c\u90a3\u4e48\u6574\u4f53\u5c31\u9012\u589e\u4e86\u3002\u8fd9\u63d0\u793a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u5b8c\u6210\u3002\u5982\u679c\u4e0a\u9762\u7684\u8fd9\u4e9b\u6ca1\u6709\u542c\u61c2\uff0c\u5219\u5f88\u6709\u53ef\u80fd\u5bf9\u52a8\u6001\u89c4\u5212\u4e0d\u719f\u6089\uff0c\u5efa\u8bae\u5148\u770b\u4e0b\u57fa\u7840\u77e5\u8bc6\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/801.minimum-swaps-to-make-sequences-increasing.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/801.minimum-swaps-to-make-sequences-increasing.md",code:[{language:"py",text:"\n\nclass Solution:\n    def minSwap(self, A: List[int], B: List[int]) -> int:\n        n = len(A)\n        swap = [n] * n\n        no_swap = [n] * n\n        swap[0] = 1\n        no_swap[0] = 0\n\n        for i in range(1, len(A)):\n            q1 = A[i-1] < A[i] and B[i-1] < B[i]\n            q2 = A[i-1] < B[i] and B[i-1] < A[i]\n            if q1 and q2:\n                no_swap[i] = min(swap[i-1], no_swap[i-1]) # \u90fd\u4e0d\u6362\u6216\u8005\u6362i-1\n                swap[i] = min(swap[i-1], no_swap[i-1]) + 1 # \u90fd\u6362 \u6216\u8005 \u6362 i\n            if q1 and not q2:\n                swap[i] = swap[i-1] + 1 # \u90fd\u6362\n                no_swap[i] = no_swap[i-1] # \u90fd\u4e0d\u6362\n            if not q1 and q2:\n                swap[i] = no_swap[i-1] + 1 # \u6362 i\n                no_swap[i] = swap[i-1] # \u6362 i - 1\n\n        return min(swap[n-1], no_swap[n-1])\n"},{language:"py",text:"\nif q1:\n    no_swap[i] = no_swap[i-1] # \u90fd\u4e0d\u6362\n    swap[i] = swap[i-1] + 1 # \u90fd\u6362\nif q2:\n    swap[i] = min(swap[i], no_swap[i-1] + 1) # \u6362 i\n    no_swap[i] =  min(no_swap[i], swap[i-1]) # \u6362 i - 1\n"},{language:"py",text:"\nclass Solution:\n    def minSwap(self, A: List[int], B: List[int]) -> int:\n        n = len(A)\n        swap = [n] * n\n        no_swap = [n] * n\n        swap[0] = 1\n        no_swap[0] = 0\n\n        for i in range(1, len(A)):\n            # \u5982\u679c\u4ea4\u6362\u4e4b\u524d\u6709\u5e8f\uff0c\u5219\u53ef\u4ee5\u4e0d\u4ea4\u6362\n            if A[i-1] < A[i] and B[i-1] < B[i]:\n                no_swap[i] = no_swap[i-1]\n                swap[i] = swap[i-1] + 1\n            # \u5426\u5219\u81f3\u5c11\u9700\u8981\u4ea4\u6362\u4e00\u6b21\uff08\u4ea4\u6362\u5f53\u524d\u9879\u6216\u8005\u524d\u4e00\u9879\uff09\n            if A[i-1] < B[i] and B[i-1] < A[i]:\n                swap[i] = min(swap[i], no_swap[i-1] + 1) # i \u6362\n                no_swap[i] =  min(no_swap[i], swap[i-1]) # i - 1 \u6362\n\n        return min(swap[n-1], no_swap[n-1])\n"}]},"split-array-with-same-average":{id:"805",name:"split-array-with-same-average",pre:[{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u89e3\u9898\u6a21\u677f",link:null,color:"blue"},{text:"\u4e24\u4e2a\u526a\u679d",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/805.split-array-with-same-average.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/805.split-array-with-same-average.md",code:[{language:"py",text:"\ndef splitArraySameAverage(self, A: List[int]) -> bool:\n        n = len(A)\n        avg = sum(A) / n\n\n        for i in range(1, n // 2 + 1):\n            for combination in combinations(A, i):\n                if abs(sum(combination) - avg * i) < 1e-6:\n                    return True\n        return False\n"},{language:"py",text:"\ndef splitArraySameAverage(self, A: List[int]) -> bool:\n        n = len(A)\n        avg = sum(A) / n\n\n        for i in range(1, n // 2 + 1):\n            for s in combinationSum(A, i):\n                if abs(s - avg * i) < 1e-6:\n                    return True\n        return False\n"},{language:"py",text:"\n\nclass\xa0Solution:\n\xa0\xa0\xa0\xa0def\xa0combinationSum(self,\xa0candidates:\xa0List[int],\xa0count:\xa0int)\xa0->\xa0List[List[int]]:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0size\xa0=\xa0len(candidates)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0size\xa0==\xa00:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0[]\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0#\xa0\u8fd8\u662f\u5148\u6392\u5e8f\uff0c\u4e3b\u8981\u662f\u65b9\u4fbf\u53bb\u91cd\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0candidates.sort()\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa0[]\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0self._find_path(candidates,\xa0ans,\xa00,\xa0count,\xa00,\xa0size)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0ans\n\xa0\n\xa0\xa0\xa0\xa0def\xa0_find_path(self,\xa0candidates,\xa0ans,\xa0path_sum,\xa0count,\xa0begin,\xa0size):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0count\xa0==\xa00:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans.append(path_sum)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0i\xa0in\xa0range(begin,\xa0size):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0#\xa0\u526a\u679d\u4e00\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684 i > begin \u8fd9\u4e2a\u6761\u4ef6\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0i\xa0>\xa0begin\xa0and\xa0candidates[i]\xa0==\xa0candidates[i\xa0-\xa01]:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0continue\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0self._find_path(candidates,\xa0ans,\xa0path_sum\xa0+\xa0candidates[i],\xa0count\xa0-\xa01,\xa0i\xa0+\xa01,\xa0size)\n\xa0\n\xa0\xa0\xa0\xa0def\xa0splitArraySameAverage(self,\xa0A:\xa0List[int])\xa0->\xa0bool:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0n\xa0=\xa0len(A)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0avg\xa0=\xa0sum(A)\xa0/\xa0n\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0i\xa0in\xa0range(1,\xa0n\xa0//\xa02\xa0+\xa01):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0#\xa0\u526a\u679d\u4e8c\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0abs(i\xa0*\xa0avg\xa0-\xa0int(i\xa0*\xa0avg))\xa0>\xa01e-6:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0continue\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0s\xa0in\xa0self.combinationSum(A,\xa0i):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0abs(s\xa0-\xa0avg\xa0*\xa0i)\xa0<\xa01e-6:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0True\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0False\n\n"}]},"ambiguous-coordinates":{id:"816",name:"ambiguous-coordinates",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"red"}],keyPoints:[{text:"\u7b1b\u5361\u5c14\u79ef\u4f18\u5316",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/816.ambiguous-coordinates.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/816.ambiguous-coordinates.md",code:[{language:"py",text:"\nclass Solution:\n\n    def subset(self, s: str):\n        ans = []\n        for i in range(1, len(s)):\n            ans.append(s[:i] + \".\" + s[i:])\n        ans.append(s)\n        return ans\n\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n        ans = []\n        s = s[1:-1]\n        for i in range(1, len(s)):\n            x = self.subset(s[:i])\n            y = self.subset(s[i:])\n            for i in x:\n                for j in y:\n                    ans.append('(' + i + ', ' + j + ')')\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    # \"123\" => [\"1.23\", \"12.3\", \"123\"]\n    def subset(self, s: str):\n        ans = []\n\n        #  \u5e26\u5c0f\u6570\u70b9\u7684\n        for i in range(1, len(s)):\n            # \u4e0d\u5141\u8bb8 00.111\uff0c 0.0\uff0c01.1\uff0c1.0\n            if s[0] == '0' and i > 1:\n                continue\n            if s[-1] == '0':\n                continue\n            ans.append(s[:i] + \".\" + s[i:])\n        # \u4e0d\u5e26\u5c0f\u6570\u70b9\u7684\uff08\u4e0d\u5141\u8bb8 001\uff09\n        if s == '0' or not s.startswith('0'):\n            ans.append(s)\n        return ans\n\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n        ans = []\n        s = s[1:-1]\n        for i in range(1, len(s)):\n            x = self.subset(s[:i])\n            y = self.subset(s[i:])\n            for i in x:\n                for j in y:\n                    ans.append('(' + i + ', ' + j + ')')\n        return ans\n\n"}]},"short-encoding-of-words":{id:"820",name:"short-encoding-of-words",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811",link:null,color:"blue"},{text:"\u53bb\u91cd",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/820.short-encoding-of-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/820.short-encoding-of-words.md",code:[{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            curr = curr[w]\n        # len(curr) == 1 means we meet \'#\'\n        # when we search \'em\'(which reversed from \'me\')\n        # the result is len(curr) > 1\n        # cause the curr look like { \'#\': 1, i: {...}}\n        return len(curr) == 1\nclass Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        trie = Trie()\n        cnt = 0\n        words = set(words)\n        for word in words:\n            trie.insert(word[::-1])\n        for word in words:\n            if trie.search(word[::-1]):\n                cnt += len(word) + 1\n        return cnt\n\n'}]},"shortest-distance-to-a-character":{id:"821",name:"shortest-distance-to-a-character",pre:[{text:"\u6570\u7ec4\u7684\u904d\u5386(\u6b63\u5411\u904d\u5386\u548c\u53cd\u5411\u904d\u5386)",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/821.shortest-distance-to-a-character.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/821.shortest-distance-to-a-character.md",code:[{language:"java",text:"\nclass Solution {\n    public int[] shortestToChar(String S, char C) {\n        int N = S.length();\n        int[] ans = new int[N];\n        int prev = -10000;\n\n        for (int i = 0; i < N; ++i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = i - prev;\n        }\n\n        prev = 20000;\n        for (int i = N-1; i >= 0; --i) {\n            if (S.charAt(i) == C) prev = i;\n            ans[i] = Math.min(ans[i], prev - i);\n        }\n\n        return ans;\n    }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n   vector<int> shortestToChar(string S, char C) {\n       vector<int> ans(S.size(), 0);\n       int prev = -10000;\n       for(int i = 0; i < S.size(); i ++){\n           if(S[i] == C) prev = i;\n           ans[i] = i - prev;\n       }\n       prev = 20000;\n       for(int i = S.size() - 1; i >= 0; i --){\n           if(S[i] == C) prev = i;\n           ans[i] = min(ans[i], prev - i);\n       }\n       return ans;\n   }\n};\n"},{language:"py",text:"\nclass Solution:\n    def shortestToChar(self, S: str, C: str) -> List[int]:\n        ans = []\n\n        for i in range(len(S)):\n            # \u4ece i \u5411\u5de6\u5411\u53f3\u6269\u5c55\n            l = r = i\n            # \u5411\u5de6\u627e\u5230\u7b2c\u4e00\u4e2a C\n            while l > -1:\n                if S[l] == C: break\n                l -= 1\n            # \u5411\u5de6\u627e\u5230\u7b2c\u4e00\u4e2a C\n            while r < len(S):\n                if S[r] == C: break\n                r += 1\n            # \u5982\u679c\u81f3\u6b7b\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8d4b\u503c\u4e00\u4e2a\u65e0\u9650\u5927\u7684\u6570\u5b57\uff0c\u7531\u4e8e\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u662f [1, 10000]\uff0c\u56e0\u6b64 -10000 \u6216\u8005  10000\u5c31\u591f\u4e86\u3002\n            if l == -1: l = -10000\n            if r == len(S): r = 10000\n            # \u9009\u8f83\u8fd1\u7684\u5373\u53ef\n            ans.append(min(r - i, i - l))\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def shortestToChar(self, S: str, C: str) -> List[int]:\n        ans = [10000] * len(S)\n        stack = []\n        for i in range(len(S)):\n            while stack and S[i] == C:\n                ans[stack.pop()] = i - stack[-1]\n            if S[i] != C:stack.append(i)\n            else: ans[i] = 0\n        for i in range(len(S) - 1, -1, -1):\n            while stack and S[i] == C:\n                ans[stack.pop()] = min(ans[stack[-1]], stack[-1] - i)\n            if S[i] != C:stack.append(i)\n            else: ans[i] = 0\n\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def shortestToChar(self, S: str, C: str) -> List[int]:\n        pre = -10000\n        ans = []\n\n        for i in range(len(S)):\n            if S[i] == C: pre = i\n            ans.append(i - pre)\n        pre = 20000\n        for i in range(len(S) - 1, -1, -1):\n            if S[i] == C: pre = i\n            ans[i] = min(ans[i], pre - i)\n        return ans\n"}]},"similar-string-groups":{id:"839",name:"similar-string-groups",pre:[{text:"\u5e76\u67e5\u96c6",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/union-find.md",color:"volcano"}],keyPoints:[{text:"\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u4f3c\u7684\u51fd\u6570is_similar\u6ca1\u6709\u5fc5\u987b\u771f\u5b9e\u4ea4\u6362\u5e76\u5224\u65ad\uff0c\u800c\u662f\u5224\u65ad\u4e0d\u76f8\u7b49\u5b57\u7b26\u662f\u5426\u7b49\u4e8e2",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/839.similar-string-groups.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/839.similar-string-groups.md",code:[{language:"py",text:"\nuf = UF(n)\nfor i in range(n):\n      for j in range(i + 1, n):\n           if strs[i] == strs[j] or is_similar(list(strs[i]), list(strs[j])):\n              uf.union(i, j)\nreturn uf.cnt\n"},{language:"py",text:"\ndef is_similar(A, B):\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            A[i], A[j] = A[j], A[i]\n            if A == B: return True\n            A[i], A[j] = A[j], A[i]\n    return False\n"},{language:"py",text:"\n\n\nclass UF:\n  def __init__(self, M):\n      self.parent = {}\n      self.cnt = 0\n      # \u521d\u59cb\u5316 parent\uff0csize \u548c cnt\n      for i in range(M):\n          self.parent[i] = i\n          self.cnt += 1\n\n  def find(self, x):\n      if x != self.parent[x]:\n          self.parent[x] = self.find(self.parent[x])\n          return self.parent[x]\n      return x\n  def union(self, p, q):\n      if self.connected(p, q): return\n      leader_p = self.find(p)\n      leader_q = self.find(q)\n      self.parent[leader_p] = leader_q\n      self.cnt -= 1\n  def connected(self, p, q):\n      return self.find(p) == self.find(q)\n\nclass Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        n = len(strs)\n        uf = UF(n)\n        def is_similar(A, B):\n            n = len(A)\n            diff = 0\n            for i in range(n):\n                if A[i] != B[i]: diff += 1\n            return diff == 2\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if strs[i] == strs[j] or is_similar(list(strs[i]), list(strs[j])):\n                    uf.union(i, j)\n        return uf.cnt\n\n"}]},"length-of-longest-fibonacci-subsequence":{id:"873",name:"length-of-longest-fibonacci-subsequence",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u4f7f\u7528\u96c6\u5408\u5b58\u50a8\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\uff0c\u7136\u540e\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u4e24\u4e24\u7ec4\u5408\u5e76\uff0c\u53bb\u96c6\u5408\u4e2d\u4e0d\u65ad\u5ef6\u4f38\u6590\u6ce2\u90a3\u5951\u6570\u5217",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/873.length-of-longest-fibonacci-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/873.length-of-longest-fibonacci-subsequence.md",code:[{language:"py",text:"\n\nclass Solution:\n    def lenLongestFibSubseq(self, A: List[int]) -> int:\n        s = set(A)\n        ans = 0\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                a, b = A[j], A[i] + A[j]\n                t = 2\n                while b in s:\n                    a, b = b, a + b\n                    t += 1\n                ans = max(ans, t)\n        return 0 if ans < 3 else ans\n\n"}]},"walking-robot-simulation":{id:"874",name:"walking-robot-simulation",pre:[{text:"hashtable",link:null,color:"lime"}],keyPoints:[{text:"\u7406\u89e3\u9898\u610f\uff0c\u8fd9\u9053\u9898\u5bb9\u6613\u7406\u89e3\u9519\u9898\u610f\uff0c\u6c42\u89e3\u4e3a`\u6700\u7ec8\u4f4d\u7f6e\u8ddd\u79bb\u539f\u70b9\u7684\u8ddd\u79bb`",link:null,color:"blue"},{text:"\u5efa\u7acb\u5750\u6807\u7cfb",link:null,color:"blue"},{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/874.walking-robot-simulation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/874.walking-robot-simulation.md",code:[{language:"py",text:"\nclass Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        pos = [0, 0]\n        deg = 90\n        ans = 0\n        obstaclesSet = set(map(tuple, obstacles))\n\n        for command in commands:\n            if command == -1:\n                deg = (deg + 270) % 360\n            elif command == -2:\n                deg = (deg + 90) % 360\n            else:\n                if deg == 0:\n                    i = 0\n                    while i < command and not (pos[0] + 1, pos[1]) in obstaclesSet:\n                        pos[0] += 1\n                        i += 1\n                if deg == 90:\n                    i = 0\n                    while i < command and not (pos[0], pos[1] + 1) in obstaclesSet:\n                        pos[1] += 1\n                        i += 1\n                if deg == 180:\n                    i = 0\n                    while i < command and not (pos[0] - 1, pos[1]) in obstaclesSet:\n                        pos[0] -= 1\n                        i += 1\n                if deg == 270:\n                    i = 0\n                    while i < command and not (pos[0], pos[1] - 1) in obstaclesSet:\n                        pos[1] -= 1\n                        i += 1\n                ans = max(ans, pos[0] ** 2 + pos[1] ** 2)\n        return ans\n"}]},"koko-eating-bananas":{id:"875",name:"koko-eating-bananas",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:"../91/binary-search.md",color:"magenta"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e\u6a21\u677f",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/875.koko-eating-bananas.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/875.koko-eating-bananas.md",code:[{language:"java",text:"\npublic int binarySearch(int[] nums, int target) {\n    // \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n    int left = 0;\n    int right = nums.length - 1;\n\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target)\n            return mid;\n        else if (nums[mid] < target)\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        else if (nums[mid] > target)\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n            right = mid - 1;\n    }\n    return -1;\n}\n"},{language:"java",text:"\npublic int binarySearchLeft(int[] nums, int target) {\n\t// \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n    int left = 0;\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u6536\u7f29\u53f3\u8fb9\u754c\n            right = mid - 1;\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n    if (left >= nums.length || nums[left] != target)\n        return -1;\n    return left;\n}\n"},{language:"java",text:"\npublic int binarySearchRight(int[] nums, int target) {\n\t// \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n    int left = 0\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u6536\u7f29\u5de6\u8fb9\u754c\n            left = mid + 1;\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n    if (right < 0 || nums[right] != target)\n        return -1;\n    return right;\n}\n"},{language:"js",text:"\nfunction canEatAllBananas(piles, H, mid) {\n  let h = 0;\n  for (let pile of piles) {\n    h += Math.ceil(pile / mid);\n  }\n\n  return h <= H;\n}\n/**\n * @param {number[]} piles\n * @param {number} H\n * @return {number}\n */\nvar minEatingSpeed = function (piles, H) {\n  let lo = 1,\n    hi = Math.max(...piles);\n  // [l, r) \uff0c \u5de6\u95ed\u53f3\u5f00\u7684\u597d\u5904\u662f\u5982\u679c\u80fd\u627e\u5230\uff0c\u90a3\u4e48\u8fd4\u56de l \u548c r \u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u6700\u7ec8 l \u7b49\u4e8e r\u3002\n  while (lo <= hi) {\n    let mid = lo + ((hi - lo) >> 1);\n    if (canEatAllBananas(piles, H, mid)) {\n      hi = mid - 1;\n    } else {\n      lo = mid + 1;\n    }\n  }\n\n  return lo; //  \u4e0d\u80fd\u9009\u62e9hi\n};\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, piles, k):\n        def possible(mid):\n            t = 0\n            for pile in piles:\n                t += (pile + mid - 1) // mid\n            return t <= k\n\n        l, r = 1, max(piles)\n\n        while l <= r:\n            mid = (l + r) // 2\n            if possible(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n\n"}]},"stone-game":{id:"877",name:"stone-game",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u53ef\u4ee5\u7528DP\uff08\u52a8\u6001\u89c4\u5212\uff09",link:null,color:"blue"},{text:"\u53ef\u4ee5\u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u53bb\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/877.stone-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/877.stone-game.md",code:[{language:"js",text:"\n/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n  return true;\n};\n"}]},"possible-bipartition":{id:"886",name:"possible-bipartition",pre:[{text:"\u56fe\u7684\u904d\u5386",link:null,color:"geekblue"},{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u5206\u56fe",link:null,color:"blue"},{text:"\u67d3\u8272\u6cd5",link:null,color:"blue"},{text:"\u56fe\u7684\u5efa\u7acb\u548c\u904d\u5386",link:null,color:"blue"},{text:"colors\u6570\u7ec4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/886.possible-bipartition.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/886.possible-bipartition.md",code:[{language:"py",text:"\n        graph = [[0] * N for i in range(N)]\n        for a, b in dislikes:\n            graph[a - 1][b - 1] = 1\n            graph[b - 1][a - 1] = 1\n"},{language:"py",text:"\n# \u5176\u4e2dj \u8868\u793a\u5f53\u524d\u662f\u7b2c\u51e0\u4e2a\u4eba\uff0cN\u8868\u793a\u603b\u4eba\u6570\u3002 dfs\u7684\u529f\u80fd\u5c31\u662f\u6839\u636ecolors\u548cgraph\u5206\u914d\u7ec4\uff0ctrue\u8868\u793a\u53ef\u4ee5\u5206\uff0cfalse\u8868\u793a\u4e0d\u53ef\u4ee5\uff0c\u5177\u4f53\u4ee3\u7801\u89c1\u4ee3\u7801\u533a\u3002\nif colors[j] == 0 and not self.dfs(graph, colors, j, -1 * color, N)\n"},{language:"py",text:"\nclass Solution:\n    def dfs(self, graph, colors, i, color, N):\n        colors[i] = color\n        for j in range(N):\n            # dislike eachother\n            if graph[i][j] == 1:\n                if colors[j] == color:\n                    return False\n                if colors[j] == 0 and not self.dfs(graph, colors, j, -1 * color, N):\n                    return False\n        return True\n\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:\n        graph = [[0] * N for i in range(N)]\n        colors = [0] * N\n        for a, b in dislikes:\n            graph[a - 1][b - 1] = 1\n            graph[b - 1][a - 1] = 1\n        for i in range(N):\n            if colors[i] == 0 and not self.dfs(graph, colors, i, 1, N):\n                return False\n        return True\n\n"}]},"super-egg-drop":{id:"887",name:"super-egg-drop",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md "\u52a8\u6001\u89c4\u5212"',color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/887.super-egg-drop.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/887.super-egg-drop.md",code:[{language:"js",text:"\nvar superEggDrop = function (K, N) {\n  // \u4e0d\u9009\u62e9dp[K][M]\u7684\u539f\u56e0\u662fdp[M][K]\u53ef\u4ee5\u7b80\u5316\u64cd\u4f5c\n  const dp = Array(N + 1)\n    .fill(0)\n    .map((_) => Array(K + 1).fill(0));\n\n  let m = 0;\n  while (dp[m][K] < N) {\n    m++;\n    for (let k = 1; k <= K; ++k) dp[m][k] = dp[m - 1][k - 1] + 1 + dp[m - 1][k];\n  }\n  return m;\n};\n"},{language:"py",text:"\ndef superEggDrop(K, N):\n    ans = N\n    # \u66b4\u529b\u679a\u4e3e\u4ece\u7b2c i \u5c42\u5f00\u59cb\u6254\n    for i in range(1, N + 1):\n        ans = min(ans, max(self.superEggDrop(K - 1, i - 1) + 1, self.superEggDrop(K,  N - i) + 1))\n    return ans\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        if K == 1: return N\n        if N == 0 or N == 1: return N\n        ans = N\n        # \u66b4\u529b\u679a\u4e3e\u4ece\u7b2c i \u5c42\u5f00\u59cb\u6254\n        for i in range(1, N + 1):\n            ans = min(ans, max(self.superEggDrop(K - 1, i - 1) + 1, self.superEggDrop(K,  N - i) + 1))\n        return ans\n"},{language:"py",text:"\n\nclass Solution:\n    @lru_cache()\n    def superEggDrop(self, K: int, N: int) -> int:\n        if K == 1: return N\n        if N == 0 or N == 1: return N\n        ans = N\n        # \u66b4\u529b\u679a\u4e3e\u4ece\u7b2c i \u5c42\u5f00\u59cb\u6254\n        for i in range(1, N + 1):\n            ans = min(ans, max(self.superEggDrop(K - 1, i - 1) + 1, self.superEggDrop(K,  N - i) + 1))\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        for i in range(K + 1):\n            for j in range(N + 1):\n                if i == 1:\n                    dp[i][j] = j\n                if j == 1 or j == 0:\n                    dp[i][j] == j\n                dp[i][j] = j\n                for k in range(1, j + 1):\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][k - 1] + 1, dp[i][j - k] + 1))\n        return dp[K][N]\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        dp = [[0] * (K + 1) for _ in range(N + 1)]\n\n        for i in range(N + 1):\n            for j in range( K + 1):\n                if j == 1:\n                    dp[i][j] = i\n                if i == 1 or i == 0:\n                    dp[i][j] == i\n                dp[i][j] = i\n                for k in range(1, i + 1):\n                    dp[i][j] = min(dp[i][j], max(dp[k - 1][j - 1] + 1, dp[i - k][j] + 1))\n        return dp[N][K]\n        dp = [[0] * (N + 1) for _ in range(K + 1)]\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        def f(m, k):\n            if k == 0 or m == 0: return 0\n            return f(m - 1, k - 1) + 1 +  f(m - 1, k)\n        m = 0\n        while f(m, K) < N:\n            m += 1\n        return m\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        dp = [[0] * (K + 1) for _ in range(N + 1)]\n        m = 0\n        while dp[m][K] < N:\n            m += 1\n            for i in range(1, K + 1):\n                dp[m][i] = dp[m - 1][i - 1] + 1 + dp[m - 1][i]\n        return m\n"},{language:"py",text:"\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        dp = [[0] * (K + 1) for _ in range(N + 1)]\n        m = 0\n        while dp[m][K] < N:\n            m += 1\n            for i in range(1, K + 1):\n                dp[m][i] = dp[m - 1][i - 1] + 1 + dp[m - 1][i]\n        return m\n"}]},"maximum-frequency-stack":{id:"895",name:"maximum-frequency-stack",pre:[{text:"\u8bbe\u8ba1\u9898",link:null,color:"magenta"},{text:"\u6808",link:null,color:"red"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u6808\u7684\u57fa\u672c\u6027\u8d28",link:null,color:"blue"},{text:"hashtable\u7684\u57fa\u672c\u6027\u8d28",link:null,color:"blue"},{text:"fraq_stack\u7684\u8bbe\u8ba1\u3002fraq_stack\u4e2d\u5f53\u524d\u9891\u7387\u7684\u6808\u8981\u4fdd\u5b58\u6240\u6709\u5927\u4e8e\u7b49\u4e8e\u5176\u9891\u7387\u7684\u6570\u5b57",link:null,color:"blue"},{text:"push\u548cpop\u7684\u65f6\u5019\u540c\u65f6\u66f4\u65b0fraq\uff0cmax_fraq\u548cfraq_stack\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/895.maximum-frequency-stack.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/895.maximum-frequency-stack.md",code:[{language:"py",text:"\nclass FreqStack:\n\n    def __init__(self):\n        self.fraq = collections.defaultdict(lambda: 0)\n        self.fraq_stack = collections.defaultdict(list)\n        self.max_fraq = 0\n\n    def push(self, x: int) -> None:\n        self.fraq[x] += 1\n        if self.fraq[x] > self.max_fraq:\n            self.max_fraq = self.fraq[x]\n        self.fraq_stack[self.fraq[x]].append(x)\n\n    def pop(self) -> int:\n        ans = self.fraq_stack[self.max_fraq].pop()\n        self.fraq[ans] -= 1\n        if not self.fraq_stack[self.max_fraq]:\n            self.max_fraq -= 1\n        return ans\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()\n"}]},"bitwise-ors-of-subarrays":{id:"898",name:"bitwise-ors-of-subarrays",pre:[{text:"\u3010\u897f\u6cd5\u5e26\u4f60\u5b66\u7b97\u6cd5\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",link:"https://lucifer.ren/blog/2020/09/27/atMostK/",color:"gold"}],keyPoints:[{text:"\u5b50\u6570\u7ec4\u662f\u8fde\u7eed\u7684\uff0c\u6709\u5f88\u591a\u6027\u8d28\u53ef\u4ee5\u5229\u7528",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/898.bitwise-ors-of-subarrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/898.bitwise-ors-of-subarrays.md",code:[{language:"py",text:"\n\nclass Solution(object):\n    def subarrayBitwiseORs(self, A):\n        pres = set([0])\n        ans = set()\n        for a in A:\n            nxt = set()\n            for pre in pres:\n                nxt.add(a | pre)\n                nxt.add(a)\n            pres = nxt\n            ans |= nxt\n        return len(ans)\n\n\n"}]},"rle-iterator":{id:"900",name:"rle-iterator",pre:[{text:"\u54c8\u592b\u66fc\u7f16\u7801\u548c\u6e38\u7a0b\u7f16\u7801",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/900.rle-iterator.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/900.rle-iterator.md",code:[{language:"js",text:"\n/**\n * @param {number[]} A\n */\nvar RLEIterator = function(A) {\n    this.A = A;\n    this.current = 0;\n};\n\n\n/** \n * @param {number} n\n * @return {number}\n */\nRLEIterator.prototype.next = function(n) {\n    const A = this.A;\n    while(this.current < A.length && A[this.current] < n){\n        n = n - A[this.current];\n        this.current += 2;\n    }\n    \n    if(this.current >= A.length){\n        return -1;\n    }\n    \n    A[this.current] = A[this.current] - n; // \u66f4\u65b0Count\n    return A[this.current + 1]; // \u8fd4\u56deelement\n};\n\n/** \n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */\n"}]},"online-election":{id:"911",name:"online-election",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:'https://github.com/azl397985856/leetcode/blob/master/91/binary-search.md "\u4e8c\u5206\u67e5\u627e"',color:"magenta"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55times\u4e2d\u6bcf\u4e00\u4e2a\u65f6\u523b\u7684\u4f18\u80dc\u4fe1\u606f",link:null,color:"blue"},{text:"\u6700\u5de6\u63d2\u5165\u6a21\u677f",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/911.online-election.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/911.online-election.md",code:[{language:"py",text:"\n\nclass TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        vote_count = collections.defaultdict(int) # \u54c8\u5e0c\u8868\u7edf\u8ba1\u6bcf\u4e2a\u4eba\u7684\u7968\u6570\u4fe1\u606f\n        max_voted_person = -1\n        max_voted_count = 0\n        winner = []\n        # zip([1,2,3], [4,5,6]) \u4f1a\u8fd4\u56de [[1,4], [2,5], [3,6]]\n        for p, t in zip(persons, times):\n            vote_count[p] += 1\n            if vote_count[p] >= max_voted_count:\n                max_voted_count = vote_count[p]\n                max_voted_person = p\n            # \u66f4\u65b0 winner\n            winner.append(max_voted_person)\n"},{language:"py",text:"\nq(int t) -> int\n"},{language:"py",text:"\ntimes =  [2,4,5,6]\nwinner = [1,2,1,1]\n"},{language:"py",text:"\nclass TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        vote_count = collections.defaultdict(int)\n        max_voted_person = -1\n        max_voted_count = 0\n        winner = []\n        for p, t in zip(persons, times):\n            vote_count[p] += 1\n            if vote_count[p] >= max_voted_count:\n                max_voted_count = vote_count[p]\n                max_voted_person = p\n            winner.append(max_voted_person)\n        self.winner = winner\n        self.times = times\n\n    def q(self, t: int) -> int:\n        winner = self.winner\n        # times \u662f\u4e0d\u91cd\u590d\u7684\uff0c\u4e5f\u5c31\u662f\u4e25\u683c\u9012\u589e\u7684\uff0c\u7c7b\u4f3c [2,4,5,6]\uff0c\u8fd9\u662f\u5173\u952e\n        # eg:\n        # times  [2,4,5,6]\n        # winner [1,2,1,1]\n        i = bisect.bisect_left(self.times, t)\n        if i != len(self.times) and self.times[i] == t:\n            return winner[i]\n        return winner[i - 1]\n"}]},"sort-an-array":{id:"912",name:"sort-an-array",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u6392\u5e8f\u7b97\u6cd5",link:null,color:"blue"},{text:"\u6ce8\u610f\u9898\u76ee\u7684\u9650\u5236\u6761\u4ef6\u4ece\u800c\u9009\u62e9\u5408\u9002\u7684\u7b97\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/912.sort-an-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/912.sort-an-array.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    const counts = Array(50000 * 2 + 1).fill(0);\n    const res = [];\n    for(const num of nums) counts[50000 + num] += 1;\n    for(let i in counts)  {\n        while(counts[i]--) {\n            res.push(i - 50000)\n        }\n    }\n    return res;\n};\n"},{language:"js",text:"\nfunction swap(nums, a, b) {\n    const temp = nums[a];\n    nums[a] = nums[b];\n    nums[b] = temp;\n}\n\nfunction helper(nums, start, end) {\n    if (start >= end) return;\n    const pivotIndex = start + ((end - start) >>> 1)\n    const pivot = nums[pivotIndex]\n    let i = start;\n    let j = end;\n    while (i <= j) {\n        while (nums[i] < pivot) i++;\n        while (nums[j] > pivot) j--;\n        if (i <= j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n    helper(nums, start, j);\n    helper(nums, i, end);\n}\n\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    helper(nums, 0, nums.length - 1);\n    return nums;\n};\n"}]},"beautiful-array":{id:"932",name:"beautiful-array",pre:[{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5229\u7528\u6027\u8d28**\u5947\u6570+\u5076\u6570=\u5947\u6570**",link:null,color:"blue"},{text:"\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u89e3",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/932.beautiful-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/932.beautiful-array.md",code:[{language:"py",text:"\n\nclass Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        @lru_cache(None)\n        def dp(n):\n            if n == 1:\n                return [1]\n            ans = []\n            # [1,n] \u4e2d\u5947\u6570\u6bd4\u5076\u6570\u591a1\u6216\u4e00\u6837\n            for a in dp(n - n // 2):\n                ans += [a * 2 - 1]\n            for b in dp(n // 2):\n                ans += [b * 2]\n            return ans\n\n        return dp(N)\n\n"}]},"knight-dialer":{id:"935",name:"knight-dialer",pre:[{text:"DFS",link:null,color:"red"},{text:"\u8bb0\u5fc6\u5316\u641c\u7d22",link:null,color:"lime"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/935.knight-dialer.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/935.knight-dialer.md",code:[{language:"py",text:"\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        cnt = 0\n        jump = [[4, 6], [6, 8], [7, 9], [4, 8], [\n            0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4]]\n        visited = dict()\n\n        def helper(i, n):\n            if (i, n) in visited: return visited[(i, n)]\n            if n == 1:\n                return 1\n            cnt = 0\n            for j in jump[i]:\n                cnt += helper(j, n - 1)\n            visited[(i, n)] = cnt\n            return cnt\n        for i in range(10):\n            cnt += helper(i, N)\n        return cnt % (10**9 + 7)\n"},{language:"py",text:"\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        a0 = a1 = a2 = a3 = a4 = a5 = a6 = a7 = a8 = a9 = 1\n        for _ in range(N - 1):\n            a0, a1, a2, a3, a4, a5, a6, a7, a8, a9 = a4 + a6, a6 + a8, a7 + \\\n                a9, a4 + a8, a0 + a3 + a9, 0, a0 + a1 + a7, a2 + a6, a1 + a3, a2 + a4\n        return (a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9) % (10**9 + 7)\n"}]},"most-stones-removed-with-same-row-or-column":{id:"947",name:"most-stones-removed-with-same-row-or-column",pre:[{text:"\u5e76\u67e5\u96c6",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/union-find.md",color:"volcano"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/947.most-stones-removed-with-same-row-or-column.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/947.most-stones-removed-with-same-row-or-column.md",code:[{language:"java",text:"\npublic int removeStones(int[][] stones) {\n        Set visit = new HashSet();\n        int count = 0;\n        int offset = 10000;\n        HashMap <Integer,List<int []>>map = new HashMap();\n\n        // \u6784\u9020\u56fe \u6bcf\u4e00\u9879\u662f\u4e00\u4e2a\u8282\u70b9\n        for (int i = 0; i < stones.length; i++) {\n            int [] node = stones[i];\n            List<int []> list =   map.getOrDefault(node[0]-offset,new ArrayList<>());\n            list.add(node);\n            map.put(node[0]-offset,list);\n\n            List<int []> list1 = map.getOrDefault(node[1],new ArrayList<>());\n            list1.add(node);\n            map.put(node[1],list1);\n        }\n        // \u5bfb\u627e\u8054\u901a\u5206\u91cf\n        for (int i = 0; i < stones.length; i++) {\n            int [] node = stones[i];\n            if (!visit.contains((node))){\n                visit.add((node));\n                dfs(node,visit,map);\n                count++;\n            }\n        }\n        return stones.length-count;\n    }\n\n    // \u904d\u5386\u8282\u70b9\n    public void dfs(int[]node, Set set,HashMap <Integer,List<int []>>map){\n        int offset = 10000;\n        List<int []> list =   map.getOrDefault(node[0]-offset,new ArrayList<>());\n        for (int i = 0; i < list.size(); i++) {\n            int[] item = list.get(i);\n            if (!set.contains((item))){\n                set.add((item));\n                dfs(item,set,map);\n            }\n        }\n        List<int []> list2 =   map.getOrDefault(node[1],new ArrayList<>());\n        for (int i = 0; i < list2.size(); i++) {\n            int[] item = list2.get(i);\n            if (!set.contains((item))){\n                set.add((item));\n                dfs(item,set,map);\n            }\n        }\n    }\n"},{language:"py",text:"\nn = len(stones)\n# \u6807\u51c6\u5e76\u67e5\u96c6\u6a21\u677f\nuf = UF(n)\n# \u4e24\u4e2a for \u5faa\u73af\u4f5c\u7528\u662f\u5c06\u6240\u6709\u77f3\u5b50\u4e24\u4e24\u5408\u5e76\nfor i in range(n):\n    for j in range(i + 1, n):\n        # \u5982\u679c\u884c\u6216\u8005\u5217\u76f8\u540c\uff0c\u5c06\u5176\u8054\u901a\u6210\u4e00\u4e2a\u5b50\u56fe\n        if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]: uf.union(i, j)\nreturn n - uf.cnt\n"},{language:"py",text:"\nn = len(stones)\nuf = UF(0)\nfor i in range(n):\n    uf.union(stones[i][0] + 10001, stones[i][1])\nreturn n - uf.cnt\n"},{language:"py",text:"\nclass UF:\n    def __init__(self, M):\n        self.parent = {}\n        self.cnt = 0\n        # \u521d\u59cb\u5316 parent\uff0csize \u548c cnt\n        for i in range(M):\n            self.parent[i] = i\n            self.cnt += 1\n\n    def find(self, x):\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n        return x\n    def union(self, p, q):\n        if self.connected(p, q): return\n        leader_p = self.find(p)\n        leader_q = self.find(q)\n        self.parent[leader_p] = leader_q\n        self.cnt -= 1\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        uf = UF(n)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]: uf.union(i, j)\n        return n - uf.cnt\n\n"},{language:"py",text:"\nclass UF:\n    def __init__(self, M):\n        self.parent = {}\n        self.cnt = 0\n\n    def find(self, x):\n        if x not in self.parent:\n            self.cnt += 1\n            self.parent[x] = x\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n        return x\n    def union(self, p, q):\n        if self.connected(p, q): return\n        leader_p = self.find(p)\n        leader_q = self.find(q)\n        self.parent[leader_p] = leader_q\n        self.cnt -= 1\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        uf = UF(0)\n        for i in range(n):\n            uf.union(stones[i][0] + 10001, stones[i][1])\n        return n - uf.cnt\n"}]},"regions-cut-by-slashes":{id:"959",name:"regions-cut-by-slashes",pre:[{text:"BFS",link:null,color:"purple"},{text:"DFS",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/DFS.md "DFS"',color:"red"},{text:"\u5e76\u67e5\u96c6",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/union-find.md "\u5e76\u67e5\u96c6"',color:"volcano"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/959.regions-cut-by-slashes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/959.regions-cut-by-slashes.md",code:[{language:"py",text:"\n\ndef get_pos(row, col):\n    return row * n + col\n"},{language:"py",text:"\n\ndef get_pos(row, col, i):\n    return row * n + col + i\n"},{language:"py",text:"\n\n\nclass UF:\n  def __init__(self, M):\n      self.parent = {}\n      self.cnt = 0\n      # \u521d\u59cb\u5316 parent\uff0csize \u548c cnt\n      for i in range(M):\n          self.parent[i] = i\n          self.cnt += 1\n\n  def find(self, x):\n      if x != self.parent[x]:\n          self.parent[x] = self.find(self.parent[x])\n          return self.parent[x]\n      return x\n  def union(self, p, q):\n      if self.connected(p, q): return\n      leader_p = self.find(p)\n      leader_q = self.find(q)\n      self.parent[leader_p] = leader_q\n      self.cnt -= 1\n  def connected(self, p, q):\n      return self.find(p) == self.find(q)\n\nclass Solution:\n    def regionsBySlashes(self, grid):\n        n = len(grid)\n        N = n * n * 4\n        uf = UF(N)\n        def get_pos(row, col, i):\n            return (row * n + col) * 4 + i\n        for row in range(n):\n            for col in range(n):\n                v = grid[row][col]\n                if row > 0:\n                    uf.union(get_pos(row - 1, col, 2), get_pos(row, col, 1))\n                if col > 0:\n                    uf.union(get_pos(row, col - 1, 3), get_pos(row, col, 0))\n                if v == '/':\n                    uf.union(get_pos(row, col, 0), get_pos(row, col, 1))\n                    uf.union(get_pos(row, col, 2), get_pos(row, col, 3))\n                if v == '\\\\':\n                    uf.union(get_pos(row, col, 1), get_pos(row, col, 3))\n                    uf.union(get_pos(row, col, 0), get_pos(row, col, 2))\n                if v == ' ':\n                    uf.union(get_pos(row, col, 0), get_pos(row, col, 1))\n                    uf.union(get_pos(row, col, 1), get_pos(row, col, 2))\n                    uf.union(get_pos(row, col, 2), get_pos(row, col, 3))\n\n        return uf.cnt\n"},{language:"py",text:"\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        m, n = len(grid), len(grid[0])\n        new_grid = [[0 for _ in range(3 * n)] for _ in range(3 * m)]\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '/':\n                    new_grid[3 * i][3 * j + 2] = 1\n                    new_grid[3 * i + 1][3 * j + 1] = 1\n                    new_grid[3 * i + 2][3 * j] = 1\n                if grid[i][j] == '\\\\':\n                    new_grid[3 * i][3 * j] = 1\n                    new_grid[3 * i + 1][3 * j + 1] = 1\n                    new_grid[3 * i + 2][3 * j + 2] = 1\n        def dfs(i, j):\n            if 0 <= i < 3 * m and 0 <= j < 3 * n and new_grid[i][j] == 0:\n                new_grid[i][j] = 1\n                dfs(i + 1, j)\n                dfs(i - 1, j)\n                dfs(i, j + 1)\n                dfs(i, j - 1)\n        for i in range(3 * m):\n            for j in range(3 * n):\n                if new_grid[i][j] == 0:\n                    ans += 1\n                    dfs(i, j)\n        return ans\n"}]},"odd-even-jump":{id:"975",name:"odd-even-jump",pre:[{text:"\u5355\u8c03\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/monotone-stack.md",color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/975.odd-even-jump.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/975.odd-even-jump.md",code:[{language:"py",text:"\nn = len(A)\nnext_higher, next_lower = [-1] * n, [-1] * n\n\nstack = []\nfor i, a in enumerate(A):\n    while stack and A[stack[-1]] <= A[i]:\n        next_higher[stack.pop()] = i\n    stack.append(i)\nstack = []\nfor i, a in enumerate(A):\n    while stack and A[stack[-1]] >= A[i]:\n        next_lower[stack.pop()] = i\n    stack.append(i)\n"},{language:"py",text:"\nA = sorted([a, i] for i, a in enumerate(A))\n\n"},{language:"py",text:"\nclass Solution:\n    def oddEvenJumps(self, A):\n        n = len(A)\n        next_higher, next_lower = [0] * n, [0] * n\n        A = sorted([a, i] for i, a in enumerate(A))\n\n        stack = []\n        for _, i in A:\n            # it means stack[-1]'s next bigger(or equal) is i\n            while stack and stack[-1] < i:\n                next_higher[stack.pop()] = i\n            stack.append(i)\n\n        stack = []\n        for _, i in A[::-1]:\n            # it means stack[-1]'s next smaller(or equal) is i\n            while stack and stack[-1] < i:\n                next_lower[stack.pop()] = i\n            stack.append(i)\n\n        # ...\n"},{language:"py",text:"\nclass Solution:\n    def oddEvenJumps(self, A):\n        n = len(A)\n        next_higher, next_lower = [0] * n, [0] * n\n\n        stack = []\n        for _, i in sorted([a, i] for i, a in enumerate(A)):\n            # it means stack[-1]'s next bigger(or equal) is i\n            while stack and stack[-1] < i:\n                next_higher[stack.pop()] = i\n            stack.append(i)\n\n        stack = []\n        for _, i in sorted([-a, i] for i, a in enumerate(A)):\n            # it means stack[-1]'s next smaller(or equal) is i\n            while stack and stack[-1] < i:\n                next_lower[stack.pop()] = i\n            stack.append(i)\n\n        higher, lower = [False] * n, [False] * n\n        higher[-1] = lower[-1] = True\n        ans = 1\n        for i in range(n - 2, -1, -1):\n            higher[i] = lower[next_higher[i]]\n            lower[i] = higher[next_lower[i]]\n            ans += higher[i]\n        return ans\n\n"},{language:"py",text:"\nans = 1\nfor i in range(n - 2, -1, -1):\n    higher[i] = lower[next_higher[i]]\n    lower[i] = higher[next_lower[i]]\n    ans += higher[i] or lower[i]\nreturn ans\n"}]},"longest-turbulent-subarray":{id:"978",name:"longest-turbulent-subarray",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/978.longest-turbulent-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/978.longest-turbulent-subarray.md",code:[{language:"py",text:"\nclass Solution:\n    def maxTurbulenceSize(self, A: List[int]) -> int:\n        ans = 1\n        i = 0\n        for j in range(2, len(A)):\n            if (A[j] == A[j - 1]):\n                i = j\n            elif (A[j] - A[j - 1]) ^ (A[j - 1] - A[j - 2]) >= 0:\n                i = j - 1\n            ans = max(ans, j - i + 1)\n        return ans\n\n"}]},"vertical-order-traversal-of-a-binary-tree":{id:"987",name:"vertical-order-traversal-of-a-binary-tree",pre:[{text:"DFS",link:null,color:"red"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/987.vertical-order-traversal-of-a-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/987.vertical-order-traversal-of-a-binary-tree.md",code:[{language:"js",text:"\n{\n    1: [1,3,4]\n    -1: [5]\n}\n\n"},{language:"js",text:"\n{\n    1: {\n        -2,[1,3,4]\n        -3,[5]\n\n    },\n    -1: {\n        -3: [6]\n    }\n}\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar verticalTraversal = function (root) {\n  if (!root) return [];\n\n  // \u5750\u6807\u96c6\u5408\u4ee5 x \u5750\u6807\u5206\u7ec4\n  const pos = {};\n  // dfs \u904d\u5386\u8282\u70b9\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5750\u6807\n  dfs(root, 0, 0);\n\n  // \u5f97\u5230\u6240\u6709\u8282\u70b9\u5750\u6807\u540e\uff0c\u5148\u6309 x \u5750\u6807\u5347\u5e8f\u6392\u5e8f\n  let sorted = Object.keys(pos)\n    .sort((a, b) => +a - +b)\n    .map((key) => pos[key]);\n\n  // \u518d\u7ed9 x \u5750\u6807\u76f8\u540c\u7684\u6bcf\u7ec4\u8282\u70b9\u5750\u6807\u5206\u522b\u6392\u5e8f\n  sorted = sorted.map((g) => {\n    g.sort((a, b) => {\n      // y \u5750\u6807\u76f8\u540c\u7684\uff0c\u6309\u8282\u70b9\u503c\u5347\u5e8f\u6392\n      if (a[0] === b[0]) return a[1] - b[1];\n      // \u5426\u5219\uff0c\u6309 y \u5750\u6807\u964d\u5e8f\u6392\n      else return b[0] - a[0];\n    });\n    // \u628a y \u5750\u6807\u53bb\u6389\uff0c\u8fd4\u56de\u8282\u70b9\u503c\n    return g.map((el) => el[1]);\n  });\n\n  return sorted;\n\n  // *********************************\n  function dfs(root, x, y) {\n    if (!root) return;\n\n    x in pos || (pos[x] = []);\n    // \u4fdd\u5b58\u5750\u6807\u6570\u636e\uff0c\u683c\u5f0f\u662f: [y, val]\n    pos[x].push([y, root.val]);\n\n    dfs(root.left, x - 1, y - 1);\n    dfs(root.right, x + 1, y - 1);\n  }\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    struct node\n    {\n        int val;\n        int x;\n        int y;\n        node(int v,int X,int Y):val(v),x(X),y(Y){};\n    };\n    static bool cmp(node a,node b)\n    {\n        if(a.x^b.x)\n            return a.x<b.x;\n        if(a.y^b.y)\n            return a.y<b.y;\n        return a.val<b.val;\n    }\n    vector<node> a;\n    int minx=1000,maxx=-1000;\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        dfs(root,0,0);\n        sort(a.begin(),a.end(),cmp);\n        vector<vector<int>>ans(maxx-minx+1);\n        for(auto xx:a)\n        {\n            ans[xx.x-minx].push_back(xx.val);\n        }\n        return ans;\n    }\n    void dfs(TreeNode* root,int x,int y)\n    {\n        if(root==nullptr)\n            return;\n        if(x<minx)\n            minx=x;\n        if(x>maxx)\n            maxx=x;\n        a.push_back(node(root->val,x,y));\n        dfs(root->left,x-1,y+1);\n        dfs(root->right,x+1,y+1);\n    }\n};\n"},{language:"py",text:"\nclass Solution(object):\n    def verticalTraversal(self, root):\n        seen = collections.defaultdict(\n            lambda: collections.defaultdict(list))\n\n        def dfs(root, x=0, y=0):\n            if not root:\n                return\n            seen[x][y].append(root.val)\n            dfs(root.left, x-1, y+1)\n            dfs(root.right, x+1, y+1)\n\n        dfs(root)\n        ans = []\n        # x \u6392\u5e8f\u3001\n        for x in sorted(seen):\n            level = []\n            # y \u6392\u5e8f\n            for y in sorted(seen[x]):\n                # \u503c\u6392\u5e8f\n                level += sorted(v for v in seen[x][y])\n            ans.append(level)\n\n        return ans\n"}]},"minimum-number-of-k-consecutive-bit-flips":{id:"995",name:"minimum-number-of-k-consecutive-bit-flips",pre:[{text:"\u8fde\u7eed\u5b50\u6570\u7ec4\u4f18\u5316",link:null,color:"lime"}],keyPoints:[{text:"\u8fde\u7eed\u5b50\u6570\u7ec4\u4f18\u5316\u6280\u5de7",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md",code:[{language:"py",text:"\nclass Solution:\n    def minKBitFlips(self, A, K):\n        N = len(A)\n        ans = 0\n        for i in range(N - K + 1):\n            if A[i] == 1:\n                continue\n            for j in range(K):\n                A[i + j] ^= 1\n            ans += 1\n        for i in range(N):\n            if A[i] == 0:\n                return -1\n        return ans\n"},{language:"py",text:"\n\nclass Solution:\n    def minKBitFlips(self, A: List[int], K: int) -> int:\n        n = len(A)\n        diff = [0] * (n + 1)\n        ans, cur = 0, 0\n        for i in range(n):\n            cur += diff[i]\n            if cur % 2 == A[i]:\n                if i + K > n:\n                    return -1\n                ans += 1\n                cur += 1\n                diff[i + K] -= 1\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def minKBitFlips(self, A, K):\n        N = len(A)\n        q = collections.deque()\n        ans = 0\n        for i in range(N):\n            if q and i >= q[0] + K:\n                q.popleft()\n            if len(q) % 2 == A[i]:\n                if i + K > N:\n                    return -1\n                q.append(i)\n                ans += 1\n        return ans\n"},{language:"py",text:"\n\nclass Solution:\n    def minKBitFlips(self, A, K):\n        flips = ans = 0\n        for i in range(len(A)):\n            if i >= K and A[i - K] - 2 == 0:\n                flips -= 1\n            if (flips % 2) == A[i]:\n                if i + K > len(A):\n                    return -1\n                A[i] = 2\n                flips += 1\n                ans += 1\n        return ans\n\n"}]},"max-consecutive-ones-iii":{id:"1004",name:"max-consecutive-ones-iii",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1004.max-consecutive-ones-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1004.max-consecutive-ones-iii.md",code:[{language:"py",text:"\nclass Solution:\n    def longestOnes(self, A: List[int], K: int) -> int:\n        i = ans = 0\n\n        for j in range(len(A)):\n            K -= A[j] == 0\n            while K < 0:\n                K += A[i] == 0\n                i += 1\n            ans = max(ans, j - i + 1)\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def longestOnes(self, A: List[int], K: int) -> int:\n        i = 0\n\n        for j in range(len(A)):\n            K -= 1 - A[j]\n            if K < 0:\n                K += 1 - A[i]\n                i += 1\n        return j - i + 1\n"}]},"capacity-to-ship-packages-within-d-days-cn":{id:"1011",name:"capacity-to-ship-packages-within-d-days-cn",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"\u80fd\u591f\u8bc6\u522b\u51fa\u662f\u7ed9\u5b9a\u7684\u6709\u9650\u5e8f\u5217\u67e5\u627e\u4e00\u4e2a\u6570\u5b57\uff08\u4e8c\u5206\u67e5\u627e\uff09\uff0c\u8981\u6c42\u4f60\u5bf9\u4e8c\u5206\u67e5\u627e\u4ee5\u53ca\u53d8\u4f53\u5341\u5206\u719f\u6089",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days-cn.md",code:[{language:"js",text:"\n/**\n * @param {number[]} weights\n * @param {number} D\n * @return {number}\n */\nvar shipWithinDays = function(weights, D) {\n  let high = weights.reduce((acc, cur) => acc + cur)\n  let low = 0\n\n  while(low < high) {\n    let mid = Math.floor((high + low) / 2)\n    if (canShip(mid)) {\n      high = mid\n    } else {\n      low = mid + 1\n    }\n  }\n\n  return low\n\n  function canShip(opacity) {\n    let remain = opacity\n    let count = 1\n    for (let weight of weights) {\n      if (weight > opacity) {\n        return false\n      }\n      remain -= weight\n      if (remain < 0) {\n        count++\n        remain = opacity - weight\n      }\n      if (count > D) {\n        return false\n      }\n    }\n    return count <= D\n  }\n};\n"},{language:"py",text:"\ndef canShip(opacity):\n    # \u6307\u5b9a\u8239\u7684\u5bb9\u91cf\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u8fd0\u5b8c\n    lo = 0\n    hi = total\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if canShip(mid):\n            hi = mid\n        else:\n            lo = mid + 1\n\n    return lo\n"},{language:"py",text:"\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        lo = 0\n        hi = 0\n\n        def canShip(opacity):\n            days = 1\n            remain = opacity\n            for weight in weights:\n                if weight > opacity:\n                    return False\n                remain -= weight\n                if remain < 0:\n                    days += 1\n                    remain = opacity - weight\n            return days <= D\n\n        for weight in weights:\n            hi += weight\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if canShip(mid):\n                hi = mid\n            else:\n                lo = mid + 1\n\n        return lo\n"}]},"capacity-to-ship-packages-within-d-days":{id:"1011",name:"capacity-to-ship-packages-within-d-days",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"\u80fd\u529b\u68c0\u6d4b\u4e8c\u5206",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days.md",code:[{language:"js",text:"\n/**\n * @param {number[]} weights\n * @param {number} D\n * @return {number}\n */\nvar shipWithinDays = function (weights, D) {\n  let high = weights.reduce((acc, cur) => acc + cur);\n  let low = 0;\n\n  while (low < high) {\n    let mid = Math.floor((high + low) / 2);\n    if (canShip(mid)) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n\n  return low;\n\n  function canShip(opacity) {\n    let remain = opacity;\n    let count = 1;\n    for (let weight of weights) {\n      if (weight > opacity) {\n        return false;\n      }\n      remain -= weight;\n      if (remain < 0) {\n        count++;\n        remain = opacity - weight;\n      }\n      if (count > D) {\n        return false;\n      }\n    }\n    return count <= D;\n  }\n};\n"},{language:"py",text:"\ndef canShip(opacity):\n    # \u6307\u5b9a\u8239\u7684\u5bb9\u91cf\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u8fd0\u5b8c\n    lo = 0\n    hi = total # total \u5176\u5b9e\u5c31\u662f sum(weights)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if canShip(mid):\n            hi = mid - 1\n        else:\n            lo = mid + 1\n\n    return lo\n"},{language:"py",text:"\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        def possible(mid):\n            days = 1\n            cur = 0\n            for w in weights:\n                if w > mid:\n                    return False\n                if cur + w > mid:\n                    cur = 0\n                    days += 1\n                cur += w\n            return days <= D\n\n        l, r = 1, sum(weights)\n\n        while l <= r:\n            mid = (l + r) // 2\n            if possible(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n\n"}]},"best-sightseeing-pair":{id:"1014",name:"best-sightseeing-pair",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"dp\u7a7a\u95f4\u4f18\u5316",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1014.best-sightseeing-pair.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1014.best-sightseeing-pair.md",code:[{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        res = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                res = max(res, A[i] + A[j] + i - j)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        dp = [float('-inf')] * (n + 1)\n        res = 0\n        for i in range(n):\n            dp[i + 1] = max(dp[i], A[i] + i)\n            res = max(res, dp[i] + A[i] - i)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        pre = A[0] + 0\n        res = 0\n        for i in range(1, n):\n            res = max(res, pre + A[i] - i)\n            pre = max(pre, A[i] + i)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        pre = A[0] + 0\n        res = 0\n        for i in range(1, n):\n            # res = max(res, pre + A[i] - i)\n            # pre = max(pre, A[i] + i)\n            res = res if res > pre + A[i] - i else pre + A[i] - i\n            pre = pre if pre > A[i] + i else A[i] + i\n        return res\n"}]},"smallest-integer-divisible-by-k":{id:"1015",name:"smallest-integer-divisible-by-k",pre:[{text:"\u5faa\u73af\u8282",link:null,color:"purple"}],keyPoints:[{text:"\u6570\u5b66\uff08\u65e0\u9650\u5faa\u73af\u4e0e\u5faa\u73af\u8282\uff09",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md",code:[{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1015 lang=python3\n#\n# [1015] \u53ef\u88ab K \u6574\u9664\u7684\u6700\u5c0f\u6574\u6570\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def smallestRepunitDivByK(self, K: int) -> int:\n        if K % 10 in [2, 4, 5, 6, 8]:\n            return - 1\n        seen = set()\n        mod = 0\n        for i in range(1, K + 1):\n            mod = (mod * 10 + 1) % K\n            if mod in seen:\n                return -1\n            if mod == 0:\n                return ix\n            seen.add(mod)\n"}]},"next-greater-node-in-linked-list":{id:"1019",name:"next-greater-node-in-linked-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u5355\u8c03\u6808\uff08\u5355\u8c03\u9012\u51cf\u6808\uff09",link:null,color:"blue"},{text:"\u5355\u8c03\u6808\u7684\u4ee3\u7801\u6a21\u677f",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md",code:[{language:"py",text:"\ndef monoStack(list):\n    st = []\n    for v in list:\n        while len(st) > 0 and v > st[-1]:\n            st.pop()\n        st.append(v)\n    return st\nmonoStack([5, 4, 2, 1, 3]) # output: [5, 4, 3]\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n     def nextLargerNodes(self, head):\n        res, st = [], []\n        while head:\n            while len(st) > 0 and head.val > st[-1][1]:\n                res[st.pop()[0]] = head.val\n            st.append((len(res), head.val))\n            res.append(0)\n            head = head.next\n        return res\n"}]},"number-of-enclaves":{id:"1020",name:"number-of-enclaves",pre:[{text:"DFS",link:null,color:"red"},{text:"hashset",link:null,color:"gold"}],keyPoints:[{text:"visited\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u65e0\u9650\u5faa\u73af\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1020.number-of-enclaves.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1020.number-of-enclaves.md",code:[{language:"py",text:"\nclass Solution:\n    temp = 0\n    meetEdge = False\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        cnt = 0\n        m = len(A)\n        n = len(A[0])\n        visited = set()\n\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or (i, j) in visited:\n                return\n            visited.add((i, j))\n            if A[i][j] == 1:\n                self.temp += 1\n            else:\n                return\n            if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                self.meetEdge = True\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        for i in range(m):\n            for j in range(n):\n                dfs(i, j)\n                if not self.meetEdge:\n                    cnt += self.temp\n                self.meetEdge = False\n                self.temp = 0\n        return cnt\n\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1020 lang=python3\n#\n# [1020] \u98de\u5730\u7684\u6570\u91cf\n#\n\n# @lc code=start\n\n\nclass Solution:\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        cnt = 0\n        m = len(A)\n        n = len(A[0])\n\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or A[i][j] == 0:\n                return\n            A[i][j] = 0\n\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for j in range(1, n - 1):\n            dfs(0, j)\n            dfs(m - 1, j)\n        for i in range(m):\n            for j in range(n):\n                if A[i][j] == 1:\n                    cnt += 1\n        return cnt\n\n        # @lc code=end\n\n"}]},"camelcase-matching":{id:"1023",name:"camelcase-matching",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5b57\u7b26\u4e32\u5339\u914d",link:null,color:"blue"},{text:"\u5b50\u5e8f\u5217",link:null,color:"blue"},{text:"\u5b50\u4e32",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1023.camelcase-matching.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1023.camelcase-matching.md",code:[{language:"py",text:"\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i = 0\n        j = 0\n        while j < len(t):\n            if i < len(s) and s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n            if i >= len (s):\n                return True\n        return i == len(s)\n"},{language:"py",text:"\nclass Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n        res = []\n        for query in queries:\n            i = 0\n            j = 0\n            while i < len(query):\n                if j < len(pattern) and query[i] == pattern[j]:\n                    i += 1\n                    j += 1\n                elif query[i].islower():\n                    i += 1\n                else:\n                    break\n            if i == len(query) and j == len(pattern):\n                res.append(True)\n            else:\n                res.append(False)\n        return res\n"}]},"maximum-sum-of-two-non-overlapping-subarrays":{id:"1031",name:"maximum-sum-of-two-non-overlapping-subarrays",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u89e3\u67901.\u6ce8\u610f\u56fe\u4e2d\u63cf\u8ff0\u7684\u90fd\u662fA[i",link:null,color:"blue"},{text:"1],\u800c\u4e0d\u662fA[i],\u56e0\u4e3abasecase\u4e3a\u7a7a\u6570\u7ec4,\u800c\u4e0d\u662fA[0];2.\u6c42\u89e3\u56fe\u4e2dASUM\u6570\u7ec4\u7684\u65f6\u5019,\u6ce8\u610f\u5b9a\u4e49\u7684\u662fASUM[i]=sum(A[0:i]),\u56e0\u6b64\u5f53i\u7b49\u4e8e0\u65f6,A[0:0]\u4e3a\u7a7a\u6570\u7ec4,\u5373:ASUM[0]\u4e3a0,\u800cASUM[1]\u624d\u7b49\u4e8eA[0];3.\u6c42\u89e3\u56fe\u4e2dMAXL\u6570\u7ec4\u65f6,\u6ce8\u610fi<L\u65f6,\u6ca1\u6709\u610f\u4e49,\u56e0\u4e3a\u957f\u5ea6\u4e0d\u591f,\u6240\u4ee5\u4ecei=L\u65f6\u624d\u5f00\u59cb\u6c42\u89e3;4.\u6c42\u89e3\u56fe\u4e2dMAXM\u6570\u7ec4\u65f6,\u4e5f\u4e00\u6837,\u8981\u4ecei=M\u65f6\u624d\u5f00\u59cb\u6c42\u89e3;5.\u6c42\u89e3\u56fe\u4e2dSUMM\u6570\u7ec4\u65f6,\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e00\u4e2aL\u5b50\u6570\u7ec4\u548c\u4e00\u4e2aM\u5b50\u6570\u7ec4,\u56e0\u6b64\u957f\u5ea6\u8981\u5927\u4e8e\u7b49\u4e8eL+M\u624d\u6709\u610f\u4e49,\u6240\u4ee5\u8981\u4ecei=L+M\u65f6\u5f00\u59cb\u6c42\u89e3.",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md",code:[{language:"cpp",text:"\nclass Solution {\nprivate:\n    int get(vector<int> &v, int i) {\n        return (i >= 0 && i < v.size()) ? v[i] : 0;\n    }\npublic:\n    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {\n        int N = A.size(), ans = 0;\n        partial_sum(A.begin(), A.end(), A.begin());\n        vector<int> maxLeft(N, 0), maxRight(N, 0);\n        for (int i = L - 1; i < N; ++i) maxLeft[i] = max(get(maxLeft, i - 1), A[i] - get(A, i - L));\n        for (int i = N - L; i >= 0; --i) maxRight[i] = max(get(maxRight, i + 1), A[i + L - 1] - get(A, i - 1));\n        for (int i = M - 1; i < N; ++i) {\n            int sum = A[i] - get(A, i - M)\n                + max(get(maxLeft, i - M), get(maxRight, i + 1));\n            ans = max(ans, sum);\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def maxSumTwoNoOverlap(self, a: List[int], l: int, m: int) -> int:\n        """\n\n        define asum[i] as the sum of subarray, a[0:i]\n        define maxl[i] as the maximum sum of l-length subarray in a[0:i]\n        define maxm[i] as the maximum sum of m-length subarray in a[0:i]\n        define msum[i] as the maximum sum of non-overlap l-length subarray and m-length subarray\n\n        case 1: a[i] is both not in l-length subarray and m-length subarray, then msum[i] = msum[i - 1]\n        case 2: a[i] is in l-length subarray, then msum[i] = asum[i] - asum[i-l] + maxm[i-l]\n        case 3: a[i] is in m-length subarray, then msum[i] = asum[i] - asum[i-m] + maxl[i-m]\n\n        so, msum[i] = max(msum[i - 1], asum[i] - asum[i-l] + maxl[i-l], asum[i] - asum[i-m] + maxm[i-m])\n        """\n\n        alen, tlen = len(a), l + m\n        asum = [0] * (alen + 1)\n        maxl = [0] * (alen + 1)\n        maxm = [0] * (alen + 1)\n        msum = [0] * (alen + 1)\n\n        for i in range(tlen):\n            if i == 1:\n                asum[i] = a[i - 1]\n            elif i > 1:\n                asum[i] = asum[i - 1] + a[i - 1]\n            if i >= l:\n                maxl[i] = max(maxl[i - 1], asum[i] - asum[i - l])\n            if i >= m:\n                maxm[i] = max(maxm[i - 1], asum[i] - asum[i - m])\n\n        for i in range(tlen, alen + 1):\n            asum[i] = asum[i - 1] + a[i - 1]\n            suml = asum[i] - asum[i - l]\n            summ = asum[i] - asum[i - m]\n            maxl[i] = max(maxl[i - 1], suml)\n            maxm[i] = max(maxm[i - 1], summ)\n            msum[i] = max(msum[i - 1], suml + maxm[i - l], summ + maxl[i - m])\n\n        return msum[-1]\n'}]},"stream-of-characters":{id:"1032",name:"stream-of-characters",pre:[{text:"\u524d\u7f00\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md",color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811\u6a21\u677f",link:null,color:"blue"},{text:"\u5012\u5e8f\u63d2\u5165",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1032.stream-of-characters.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1032.stream-of-characters.md",code:[{language:"js",text:'\nstreamChecker.query("a"); // stream\uff1a a\nstreamChecker.query("b"); // stream\uff1aab\nstreamChecker.query("c"); // stream\uff1aabc\n'},{language:"js",text:'\nstreamChecker.query("a"); // stream\uff1a a\nstreamChecker.query("b"); // stream\uff1aab\nstreamChecker.query("c"); // stream\uff1aabc\n'},{language:"py",text:"\nclass StreamChecker:\n\n    def __init__(self, words: List[str]):\n        self.trie = Trie()\n        self.stream = deque([])\n\n        for word in set(words):\n            self.trie.insert(word[::-1])\n\n    def query(self, letter: str) -> bool:\n        self.stream.appendleft(letter)\n        return self.trie.search(self.stream)\n"},{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                return False\n            if "#" in curr[w]:\n                return True\n            curr = curr[w]\n        return False\n\n\nclass StreamChecker:\n\n    def __init__(self, words: List[str]):\n        self.trie = Trie()\n        self.stream = deque([])\n\n        for word in set(words):\n            self.trie.insert(word[::-1])\n\n    def query(self, letter: str) -> bool:\n        self.stream.appendleft(letter)\n        return self.trie.search(self.stream)\n\n\n'}]},"partition-array-for-maximum-sum":{id:"1043",name:"partition-array-for-maximum-sum",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1043.partition-array-for-maximum-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1043.partition-array-for-maximum-sum.md",code:[{language:"py",text:"\n\nclass Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        @lru_cache(None)\n        def dp(i):\n            if i >= len(arr): return 0\n            ans = 0\n            max_value = -1\n            for steps in range(1, k + 1):\n                if i + steps - 1 < len(arr): max_value = max(max_value, arr[i + steps - 1])\n                else: break\n                ans = max(ans, max_value * steps +  dp(i + steps))\n            return ans\n        return dp(0)\n\n"},{language:"py",text:"\n\nclass Solution:\n    def maxSumAfterPartitioning(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [0] * (n+1)\n\n        for i in range(1, n+1):\n            max_ele = 0\n            for j in range(i, min(n+1, i+k)):\n                max_ele = max(max_ele, nums[j-1])\n                # range: [i,j]\n                dp[j] = max(dp[j], (j-i+1) * max_ele + dp[i-1])\n        return max(dp)\n\n"}]},"path-in-zigzag-labelled-binary-tree":{id:"1104",name:"path-in-zigzag-labelled-binary-tree",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"}],keyPoints:[{text:"\u6ee1\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a1.\u6700\u5c0f\u503c\u662f`2**(level",link:null,color:"blue"},{text:"1)`\uff0c\u6700\u5927\u503c\u662f`2**level",link:null,color:"blue"},{text:"1`\uff0c\u5176\u4e2dlevel\u662f\u6811\u7684\u6df1\u5ea6\u30022.\u5047\u5982\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3ai\uff0c\u90a3\u4e48\u5de6\u5b50\u8282\u70b9\u5c31\u662f2\\*i\uff0c\u53f3\u8fb9\u5b50\u8282\u70b9\u5c31\u662f2\\*i+1\u30023.\u5047\u5982\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u662fi\uff0c\u90a3\u4e48\u7236\u8282\u70b9\u7684\u7d22\u5f15\u5c31\u662fi//2\u3002",link:null,color:"blue"},{text:"\u5148\u601d\u8003\u4e00\u822c\u60c5\u51b5\uff08\u4e0d\u662f\u4e4b\u5b57\u5f62\uff09\uff0c\u7136\u540e\u901a\u8fc7\u89c2\u5bdf\u627e\u51fa\u89c4\u5f8b",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md",code:[{language:"py",text:"\nclass Solution:\n    def pathInZigZagTree(self, label: int) -> List[int]:\n        level = 0\n        res = []\n        while 2 ** level - 1 < label:\n            level += 1\n\n        while level > 0:\n            res.insert(0, label)\n            label = 2 ** (level - 1) + 2 ** level - 1 - label\n            label //= 2\n            level -= 1\n        return res\n"}]},"number-of-equivalent-domino-pairs":{id:"1128",name:"number-of-equivalent-domino-pairs",pre:[{text:"\u7ec4\u5408\u8ba1\u6570",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1128.number-of-equivalent-domino-pairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1128.number-of-equivalent-domino-pairs.md",code:[{language:"py",text:"\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        n = len(dominoes)\n        cnt = 0\n        cntMapper = dict()\n\n        for a, b in dominoes:\n            k = str(a) + str(b) if a > b else str(b) + str(a)\n            cntMapper[k] = cntMapper.get(k, 0) + 1\n        for k in cntMapper:\n            v = cntMapper[k]\n            if v > 1:\n                cnt += (v * (v - 1)) // 2\n        return cnt\n\n"},{language:"py",text:"\n       counts = [0] * 1024\n        ans = 0\n        for a, b in dominoes:\n            if a >= b: v = a <<5 | b\n            else: v = b << 5 | a\n            ans += counts[v]\n            counts[v] += 1\n        return ans\n"},{language:"py",text:"\n\n\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        counts = [0] * 9 * 9\n        ans = 0\n        for a, b in dominoes:\n            v = min((a - 1) * 9 + (b - 1), (b - 1) * 9 + (a - 1))\n            ans += counts[v]\n            counts[v] += 1\n        return ans\n"}]},"maximum-of-absolute-value-expression":{id:"1131",name:"maximum-of-absolute-value-expression",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md",code:[{language:"py",text:"\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        A = []\n        B = []\n        C = []\n        D = []\n        for i in range(len(arr1)):\n            a, b, c, d = arr1[i] + arr2[i] + i, arr1[i] - arr2[i] + \\\n                i, arr2[i] - arr1[i] + i, -1 * arr2[i] - arr1[i] + i\n            A.append(a)\n            B.append(b)\n            C.append(c)\n            D.append(d)\n        return max(max(A) - min(A), max(B) - min(B), max(C) - min(C), max(D) - min(D))\n"},{language:"py",text:"\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        # \u66fc\u54c8\u987f\u8ddd\u79bb\u6a21\u677f\u4ee3\u7801\n        sign = [1, -1]\n        n = len(arr1)\n        dists = []\n        # \u4e09\u7ef4\u6a21\u677f\n        for a in sign:\n            for b in sign:\n                for c in sign:\n                    maxDist = float('-inf')\n                    minDist = float('inf')\n                    # \u5206\u522b\u8ba1\u7b97\u6240\u6709\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\n                    for i in range(n):\n                        dist = arr1[i] * a + arr2[i] * b + i * c\n                        maxDist = max(maxDist, dist)\n                        minDist = min(minDist, dist)\n                    # \u5c06\u6240\u6709\u7684\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u653e\u5230dists\u4e2d\n                    dists.append(maxDist - minDist)\n        return max(dists)\n"}]},"optimize-water-distribution-in-a-village-cn":{id:"1168",name:"optimize-water-distribution-in-a-village-cn",pre:[{text:"\u56fe",link:null,color:"green"},{text:"\u6700\u5c0f\u751f\u6210\u6811",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u67901.\u6784\u5efa\u56fe\uff0c\u5f97\u51fa\u6240\u6709\u8fb92.\u5bf9\u6240\u6709\u8fb9\u6392\u5e8f3.\u904d\u5386\u6240\u6709\u7684\u8fb9\uff08\u4ece\u5c0f\u5230\u5927\uff094.\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u82e5\u6ca1\u6709\u8fde\u901a\uff0c\u52a0\u4e0a\u8fb9\u4e0a\u7684\u503c\uff0c\u8fde\u901a\u4e24\u4e2a\u8282\u70b9\u3002\u82e5\u5df2\u8fde\u901a\uff0c\u8df3\u8fc7\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village-cn.md",code:[{language:"java",text:"\n  class OptimizeWaterDistribution {\n    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n      List<EdgeCost> costs = new ArrayList<>();\n      for (int i = 1; i <= n; i++) {\n        costs.add(new EdgeCost(0, i, wells[i - 1]));\n      }\n      for (int[] p : pipes) {\n        costs.add(new EdgeCost(p[0], p[1], p[2]));\n      }\n      Collections.sort(costs);\n      int minCosts = 0;\n      UnionFind uf = new UnionFind(n);\n      for (EdgeCost edge : costs) {\n        int rootX = uf.find(edge.node1);\n        int rootY = uf.find(edge.node2);\n        if (rootX == rootY) continue;\n        minCosts += edge.cost;\n        uf.union(edge.node1, edge.node2);\n        // for each union, we connnect one node\n        n--;\n        // if all nodes already connected, terminate early\n        if (n == 0) {\n          return minCosts;\n        }\n      }\n      return minCosts;\n    }\n  \n    class EdgeCost implements Comparable<EdgeCost> {\n      int node1;\n      int node2;\n      int cost;\n      public EdgeCost(int node1, int node2, int cost) {\n        this.node1 = node1;\n        this.node2 = node2;\n        this.cost = cost;\n      }\n  \n      @Override\n      public int compareTo(EdgeCost o) {\n        return this.cost - o.cost;\n      }\n    }\n    \n    class UnionFind {\n      int[] parent;\n      int[] rank;\n      public UnionFind(int n) {\n        parent = new int[n + 1];\n        for (int i = 0; i <= n; i++) {\n          parent[i] = i;\n        }\n        rank = new int[n + 1];\n      }\n      public int find(int x) {\n        return x == parent[x] ? x : find(parent[x]);\n      }\n      public void union(int x, int y) {\n        int px = find(x);\n        int py = find(y);\n        if (px == py) return;\n        if (rank[px] >= rank[py]) {\n          parent[py] = px;\n          rank[px] += rank[py];\n        } else {\n          parent[px] = py;\n          rank[py] += rank[px];\n        }\n      }\n    }\n  }\n"},{language:"py",text:"\nclass Solution:\n    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:\n        union_find = {i: i for i in range(n + 1)}\n        \n        def find(x):\n            return x if x == union_find[x] else find(union_find[x])\n        \n        def union(x, y):\n            px = find(x)\n            py = find(y)\n            union_find[px] = py\n            \n        graph_wells = [[cost, 0, i] for i, cost in enumerate(wells, 1)]\n        graph_pipes = [[cost, i, j] for i, j, cost in pipes]\n        min_costs = 0\n        for cost, x, y in sorted(graph_wells + graph_pipes):\n            if find(x) == find(y):\n                continue\n            union(x, y)\n            min_costs += cost\n            n -= 1\n            if n == 0:\n                return min_costs\n"}]},"optimize-water-distribution-in-a-village":{id:"1168",name:"optimize-water-distribution-in-a-village",pre:[{text:"\u56fe",link:null,color:"green"},{text:"\u6700\u5c0f\u751f\u6210\u6811",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u67901.\u6784\u5efa\u56fe\uff0c\u5f97\u51fa\u6240\u6709\u8fb92.\u5bf9\u6240\u6709\u8fb9\u6392\u5e8f3.\u904d\u5386\u6240\u6709\u7684\u8fb9\uff08\u4ece\u5c0f\u5230\u5927\uff094.\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u82e5\u6ca1\u6709\u8fde\u901a\uff0c\u52a0\u4e0a\u8fb9\u4e0a\u7684\u503c\uff0c\u8fde\u901a\u4e24\u4e2a\u8282\u70b9\u3002\u82e5\u5df2\u8fde\u901a\uff0c\u8df3\u8fc7\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village.md",code:[{language:"java",text:"\n  class OptimizeWaterDistribution {\n    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n      List<EdgeCost> costs = new ArrayList<>();\n      for (int i = 1; i <= n; i++) {\n        costs.add(new EdgeCost(0, i, wells[i - 1]));\n      }\n      for (int[] p : pipes) {\n        costs.add(new EdgeCost(p[0], p[1], p[2]));\n      }\n      Collections.sort(costs);\n      int minCosts = 0;\n      UnionFind uf = new UnionFind(n);\n      for (EdgeCost edge : costs) {\n        int rootX = uf.find(edge.node1);\n        int rootY = uf.find(edge.node2);\n        if (rootX == rootY) continue;\n        minCosts += edge.cost;\n        uf.union(edge.node1, edge.node2);\n        // for each union, we connnect one node\n        n--;\n        // if all nodes already connected, terminate early\n        if (n == 0) {\n          return minCosts;\n        }\n      }\n      return minCosts;\n    }\n  \n    class EdgeCost implements Comparable<EdgeCost> {\n      int node1;\n      int node2;\n      int cost;\n      public EdgeCost(int node1, int node2, int cost) {\n        this.node1 = node1;\n        this.node2 = node2;\n        this.cost = cost;\n      }\n  \n      @Override\n      public int compareTo(EdgeCost o) {\n        return this.cost - o.cost;\n      }\n    }\n    \n    class UnionFind {\n      int[] parent;\n      int[] rank;\n      public UnionFind(int n) {\n        parent = new int[n + 1];\n        for (int i = 0; i <= n; i++) {\n          parent[i] = i;\n        }\n        rank = new int[n + 1];\n      }\n      public int find(int x) {\n        return x == parent[x] ? x : find(parent[x]);\n      }\n      public void union(int x, int y) {\n        int px = find(x);\n        int py = find(y);\n        if (px == py) return;\n        if (rank[px] >= rank[py]) {\n          parent[py] = px;\n          rank[px] += rank[py];\n        } else {\n          parent[px] = py;\n          rank[py] += rank[px];\n        }\n      }\n    }\n  }\n"},{language:"py",text:"\nclass Solution:\n    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:\n        union_find = {i: i for i in range(n + 1)}\n        \n        def find(x):\n            return x if x == union_find[x] else find(union_find[x])\n        \n        def union(x, y):\n            px = find(x)\n            py = find(y)\n            union_find[px] = py\n            \n        graph_wells = [[cost, 0, i] for i, cost in enumerate(wells, 1)]\n        graph_pipes = [[cost, i, j] for i, j, cost in pipes]\n        min_costs = 0\n        for cost, x, y in sorted(graph_wells + graph_pipes):\n            if find(x) == find(y):\n                continue\n            union(x, y)\n            min_costs += cost\n            n -= 1\n            if n == 0:\n                return min_costs\n"}]},"number-of-valid-words-for-each-puzzle":{id:"1178",name:"number-of-valid-words-for-each-puzzle",pre:[{text:"\u679a\u4e3e\u5b50\u96c6",link:null,color:"magenta"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u679a\u4e3e\u5b50\u96c6\u7b97\u6cd5",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1178.number-of-valid-words-for-each-puzzle.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1178.number-of-valid-words-for-each-puzzle.md",code:[{language:"py",text:"\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        s_word = [set(word) for word in words]\n        ans = []\n        for puzzle in puzzles:\n            cnt = 0\n            for word in s_word:\n                if puzzle[0] not in word:\n                    continue\n                flag = False\n                for c in word:\n                    if c not in puzzle:\n                        flag = True\n                        break\n                if not flag:\n                    cnt += 1\n            ans.append(cnt)\n        return ans\n"},{language:"py",text:'\n\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        counts = collections.defaultdict(int)\n        ans = [0] * len(puzzles)\n        for word in words:\n            bit = 0 # bit \u662f word \u7684\u4e8c\u8fdb\u5236\u8868\u793a\n            for c in word:\n                bit |= 1 << ord(c) - ord("a")\n            counts[bit] += 1\n        for i, puzzle in enumerate(puzzles):\n            bit = 0 # bit \u662f puzzle \u7684\u4e8c\u8fdb\u5236\u8868\u793a\n            for c in puzzle:\n                bit |= 1 << ord(c) - ord("a")\n            j = bit # j \u662f bit \u7684\u5b50\u96c6\n            # \u5012\u5e8f\u679a\u4e3e bit \u7684\u5b50\u96c6 j\n            while j:\n                # \u5355\u8bcd word \u9700\u8981\u5305\u542b\u8c1c\u9762\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\n                if 1 << ord(puzzle[0]) - ord("a") & j:\n                    ans[i] += counts[j]\n                j = bit & (j - 1)\n        return ans\n\n'},{language:"py",text:'\n{\n    "abc": 3\n}\n'},{language:"py",text:"\ndef get_subset(puzzle, pos):\n  # ...\n  get_subset(next_with_puzzle_pos , pos + 1) # \u9009 pos\n  get_subset(next_without_puzzle_pos, pos + 1) # \u4e0d\u9009 pos\n  # ...\n"},{language:"py",text:"\n\n class TrieNode:\n    def __init__(self):\n        self.count = 0\n        self.children = {}\n\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        cur = self.root\n        for c in word:\n            if c not in cur.children:\n                cur.children[c] = TrieNode()\n            cur = cur.children[c]\n        cur.count += 1\n\n\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        trie = Trie()\n        for word in words:\n            trie.insert(sorted(set(word)))\n\n        def get_count(first_letter, cur, i, puzzle):\n            if i == len(puzzle):\n                return cur.count\n            if not cur:\n                return 0\n            ans = 0\n            # \u8fd9\u4e2a\u5224\u65ad\u6210\u7acb\u7684\u6761\u4ef6\u662f puzzle \u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5b57\u7b26\uff0c \u8fd9\u6070\u597d\u5c31\u662f\u9898\u76ee\u7684\u9650\u5236\u6761\u4ef6\n            if puzzle[i] != first_letter:\n                ans += get_count(first_letter, cur, i + 1, puzzle)\n            if puzzle[i] in cur.children:\n                ans += get_count(first_letter, cur.children[puzzle[i]], i + 1, puzzle)\n            return ans\n\n"}]},"maximum-subarray-sum-with-one-deletion":{id:"1186",name:"maximum-subarray-sum-with-one-deletion",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"\u5934\u5c3e\u53cc\u6570\u7ec4",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md",code:[{language:"py",text:'\n  class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        res = arr[0]\n        def maxSubSum(arr, skip):\n            res = maxSub = float("-inf")\n\n            for i in range(len(arr)):\n                if i == skip:\n                    continue\n                maxSub = max(arr[i], maxSub + arr[i])\n                res = max(res, maxSub)\n            return res\n\t\t# \u8fd9\u91cc\u5faa\u73af\u5230\u4e86len(arr)\u9879\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u90fd\u4e0d\u5220\u9664\u7684\u60c5\u51b5\n        for i in range(len(arr) + 1):\n            res = max(res, maxSubSum(arr, i))\n        return res\n'},{language:"py",text:"\nclass Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        n = len(arr)\n        l = [arr[0]] * n\n        r = [arr[n - 1]] * n\n        if n == 1:\n            return arr[0]\n        res = arr[0]\n        for i in range(1, n):\n            l[i] = max(l[i - 1] + arr[i], arr[i])\n            res = max(res, l[i])\n        for i in range(n - 2, -1, -1):\n            r[i] = max(r[i + 1] + arr[i], arr[i])\n            res = max(res, r[i])\n        for i in range(1, n - 1):\n            res = max(res, l[i - 1] + r[i + 1])\n\n        return res\n\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1186 lang=python3\n#\n# [1186] \u5220\u9664\u4e00\u6b21\u5f97\u5230\u5b50\u6570\u7ec4\u6700\u5927\u548c\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        # DP\n        max0 = arr[0]\n        max1 = arr[0]\n        res = arr[0]\n        n = len(arr)\n        if n == 1:\n            return max0\n\n        for i in range(1, n):\n            # \u5148\u66f4\u65b0max1\uff0c\u518d\u66f4\u65b0max0\uff0c\u56e0\u4e3amax1\u7528\u5230\u4e86\u4e0a\u4e00\u4e2amax0\n            max1 = max(max1 + arr[i], max0)\n            max0 = max(max0 + arr[i], arr[i])\n            res = max(res, max0, max1)\n        return res\n"}]},"sort-items-by-groups-respecting-dependencies":{id:"1203",name:"sort-items-by-groups-respecting-dependencies",pre:[{text:"\u56fe\u8bba - \u62d3\u6251\u6392\u5e8f",link:null,color:"volcano"},{text:"BFS & DFS",link:null,color:"orange"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1203.sort-items-by-groups-respecting-dependencies.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1203.sort-items-by-groups-respecting-dependencies.md",code:[{language:"py",text:"\n    def tp_sort(self, items, indegree, neighbors):\n        q = collections.deque([])\n        ans = []\n        for item in items:\n            if not indegree[item]:\n                q.append(item)\n        while q:\n            cur = q.popleft()\n            ans.append(cur)\n\n            for neighbor in neighbors[cur]:\n                indegree[neighbor] -= 1\n                if not indegree[neighbor]:\n                    q.append(neighbor)\n\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def tp_sort(self, items: int, pres: List[List[int]]) -> List[int]:\n        res = []\n        visited = [0] * items\n        adjacent = [[] for _ in range(items)]\n\n        def dfs(i):\n            if visited[i] == 1:\n                return False\n            if visited[i] == 2:\n                return True\n            visited[i] = 1\n            for j in adjacent[i]:\n                if not dfs(j):\n                    return False\n\n            visited[i] = 2\n            res.append(i)\n            return True\n        for cur, pre in pres:\n            adjacent[cur].append(pre)\n        for i in range(items):\n            if not dfs(i):\n                return []\n        return res\n"},{language:"py",text:"\n\nfor pre in pres[project]:\n    if group[pre] != group[project]:\n        # \u5c0f\u7ec4\u5173\u7cfb\u56fe\n        group_indegree[group[project]] += 1\n        group_neighbors[group[pre]].append(group[project])\n    else:\n        # \u9879\u76ee\u5173\u7cfb\u56fe\n        # ...\n"},{language:"py",text:"\nclass Solution:\n    def tp_sort(self, items, indegree, neighbors):\n        q = collections.deque([])\n        ans = []\n        for item in items:\n            if not indegree[item]:\n                q.append(item)\n        while q:\n            cur = q.popleft()\n            ans.append(cur)\n\n            for neighbor in neighbors[cur]:\n                indegree[neighbor] -= 1\n                if not indegree[neighbor]:\n                    q.append(neighbor)\n\n        return ans\n\n    def sortItems(self, n: int, m: int, group: List[int], pres: List[List[int]]) -> List[int]:\n        max_group_id = m\n        for project in range(n):\n            if group[project] == -1:\n                group[project] = max_group_id\n                max_group_id += 1\n\n        project_indegree = collections.defaultdict(int)\n        group_indegree = collections.defaultdict(int)\n        project_neighbors = collections.defaultdict(list)\n        group_neighbors = collections.defaultdict(list)\n        group_projects = collections.defaultdict(list)\n\n        for project in range(n):\n            group_projects[group[project]].append(project)\n\n            for pre in pres[project]:\n                if group[pre] != group[project]:\n                    # \u5c0f\u7ec4\u5173\u7cfb\u56fe\n                    group_indegree[group[project]] += 1\n                    group_neighbors[group[pre]].append(group[project])\n                else:\n                    # \u9879\u76ee\u5173\u7cfb\u56fe\n                    project_indegree[project] += 1\n                    project_neighbors[pre].append(project)\n\n        ans = []\n\n        group_queue = self.tp_sort([i for i in range(max_group_id)], group_indegree, group_neighbors)\n\n        if len(group_queue) != max_group_id:\n            return []\n\n        for group_id in group_queue:\n\n            project_queue = self.tp_sort(group_projects[group_id], project_indegree, project_neighbors)\n\n            if len(project_queue) != len(group_projects[group_id]):\n                return []\n            ans += project_queue\n\n        return ans\n"}]},"longest-arithmetic-subsequence-of-given-difference":{id:"1218",name:"longest-arithmetic-subsequence-of-given-difference",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5c06`\u4ee5\u6bcf\u4e00\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6700\u957f\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6`\u7edf\u7edf\u5b58\u8d77\u6765",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md",code:[{language:"py",text:"\n  def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        res = 1\n        for i in range(n):\n            count = 1\n            for j in range(i + 1, n):\n                if arr[i] + difference * count == arr[j]:\n                    count += 1\n\n                if count > res:\n                    res = count\n\n        return res\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1218 lang=python3\n#\n# [1218] \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217\n#\n\n# @lc code=start\n\n\nclass Solution:\n\n    # \u52a8\u6001\u89c4\u5212\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        res = 1\n        dp = {}\n        for num in arr:\n            dp[num] = 1\n            if num - difference in dp:\n                dp[num] = dp[num - difference] + 1\n\n        return max(dp.values())\n\n# @lc code=end\n"}]},"airplane-seat-assignment-probability":{id:"1227",name:"airplane-seat-assignment-probability",pre:[{text:"\u8bb0\u5fc6\u5316\u641c\u7d22",link:null,color:"lime"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md",code:[{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        res = 1 / n\n        for i in range(2, n):\n            res += self.nthPersonGetsNthSeat(n - i + 1) * 1 / n\n        return res\n"},{language:"py",text:"\nclass Solution:\n    seen = {}\n\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        if n in self.seen:\n            return self.seen[n]\n        res = 1 / n\n        for i in range(2, n):\n            res += self.nthPersonGetsNthSeat(n - i + 1) * 1 / n\n        self.seen[n] = res\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n\n        dp = [1, .5] * n\n\n        for i in range(2, n):\n            dp[i] = 1 / n\n            for j in range(2, i):\n                dp[i] += dp[i - j + 1] * 1 / n\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n\n        dp = [1, .5] * n\n\n        for i in range(2, n):\n            dp[i] = 1/n+(n-2)/n * dp[n-1]\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n == 1 else .5\n\n"}]},"maximum-score-words-formed-by-letters":{id:"1255",name:"maximum-score-words-formed-by-letters",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6a21\u677f",link:null,color:"blue"},{text:"\u8ba1\u6570",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1255.maximum-score-words-formed-by-letters.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1255.maximum-score-words-formed-by-letters.md",code:[{language:"py",text:"\nclass Solution:\n    def maxScoreWords(self, words, letters, score):\n        ans = 0\n\n        def dfs(start, \u5f53\u524d\u7684\u5206\u6570, counter):\n            if start > len(words): return\n            ans = max(ans, cur)\n            for j in \u5faa\u73afstart\u4e4b\u540e\u7684\u5355\u8bcd:\n                if \u5982\u679c\u5f53\u524d\u5355\u8bcd\u52a0\u8fdb\u53bb\u8fd8\u6ee1\u8db3\u6e38\u620f\u89c4\u5219:\n                    dfs(j + 1, \u65b0\u7684\u5206\u6570, \u65b0\u7684counter)\n\n        dfs(0, 0, collections.Counter(letters))\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreWords(self, words, letters, score):\n        self.ans = 0\n        words_score = [sum(score[ord(c)-ord('a')] for c in word) for word in words]\n        words_counter = [collections.Counter(word) for word in words]\n\n        def backtrack(start, cur, counter):\n            if start > len(words):\n                return\n            self.ans = max(self.ans, cur)\n            for j, w_counter in enumerate(words_counter[start:], start):\n                if all(n <= counter.get(c,0) for c,n in w_counter.items()):\n                    backtrack(j+1, cur+words_score[j], counter-w_counter)\n\n        backtrack(0, 0, collections.Counter(letters))\n        return self.ans\n"}]},"shift-2d-grid":{id:"1260",name:"shift-2d-grid",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u6570\u5b66",link:null,color:"geekblue"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1260.shift-2d-grid.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1260.shift-2d-grid.md",code:[{language:"py",text:"\nfrom copy import deepcopy\n\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        n = len(grid)\n        m = len(grid[0])\n        for _ in range(k):\n            old = deepcopy(grid)\n            for i in range(n):\n                for j in range(m):\n                    if j == m - 1:\n                            grid[(i + 1) % n][0] = old[i][j]\n                    elif i == n - 1 and j == m - 1:\n                        grid[0][0] = old[i][j]\n                    else:\n                        grid[i][j + 1] = old[i][j]\n        return grid\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1260 lang=python3\n#\n# [1260] \u4e8c\u7ef4\u7f51\u683c\u8fc1\u79fb\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        n = len(grid)\n        m = len(grid[0])\n        # \u4e8c\u7ef4\u5230\u4e00\u7ef4\n        arr = [grid[i][j] for i in range(n) for j in range(m)]\n        # \u53d6\u6a21\uff0c\u7f29\u5c0fk\u7684\u8303\u56f4\uff0c\u907f\u514d\u65e0\u610f\u4e49\u7684\u8fd0\u7b97\n        k %= m * n\n        res = []\n        # \u9996\u5c3e\u4ea4\u6362\u6cd5\n\n        def reverse(l, r):\n            while l < r:\n                t = arr[l]\n                arr[l] = arr[r]\n                arr[r] = t\n                l += 1\n                r -= 1\n        # \u4e09\u6b21\u65cb\u8f6c\n        reverse(0, m * n - k - 1)\n        reverse(m * n - k, m * n - 1)\n        reverse(0, m * n - 1)\n        # \u4e00\u7ef4\u5230\u4e8c\u7ef4\n        row = []\n        for i in range(m * n):\n            if i > 0 and i % m == 0:\n                res.append(row)\n                row = []\n            row.append(arr[i])\n        res.append(row)\n\n        return res\n\n# @lc code=end\n\n"}]},"find-elements-in-a-contaminated-binary-tree":{id:"1261",name:"find-elements-in-a-contaminated-binary-tree",pre:[{text:"\u4e8c\u8fdb\u5236",link:null,color:"volcano"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md",code:[{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    node = None\n    def __init__(self, root: TreeNode):\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        def findInTree(node, target):\n            if not node:\n                return False\n            if node.val == target:\n                return True\n            return findInTree(node.left, target) or findInTree(node.right, target)\n        return findInTree(self.node, target)\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    def __init__(self, root: TreeNode):\n        # set \u4e0d\u80fd\u653e\u5728init\u5916\u4fa7\u3002 \u56e0\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u4e0d\u4f1a\u9500\u6bc1FindElements\u7684\u53d8\u91cf\n        self.seen = set()\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n                self.seen.add(node.left.val)\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n                 self.seen.add(node.right.val)\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.seen.add(0)\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        return target in self.seen\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    node = None\n    def __init__(self, root: TreeNode):\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        node = self.node\n        for bit in bin(target+1)[3:]:\n            node = node and (node.left, node.right)[int(bit)]\n        return bool(node)\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"}]},"greatest-sum-divisible-by-three":{id:"1262",name:"greatest-sum-divisible-by-three",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u8d2a\u5a6a\u6cd5",link:null,color:"blue"},{text:"\u72b6\u6001\u673a",link:null,color:"blue"},{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u7f51\u6613\u6709\u9053"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md",code:[{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        self.res = 0\n        def backtrack(temp, start):\n            total = sum(temp)\n            if total % 3 == 0:\n                self.res = max(self.res, total)\n            for i in range(start, len(nums)):\n                temp.append(nums[i])\n                backtrack(temp, i + 1)\n                temp.pop(-1)\n\n\n        backtrack([], 0)\n\n        return self.res\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        one = []\n        two = []\n        total = 0\n\n        for num in nums:\n            total += num\n            if num % 3 == 1:\n                one.append(num)\n            if num % 3 == 2:\n                two.append(num)\n        one.sort()\n        two.sort()\n        if total % 3 == 0:\n            return total\n        elif total % 3 == 1 and one:\n            if len(two) >= 2 and one[0] > two[0] + two[1]:\n                return total - two[0] - two[1]\n            return total - one[0]\n        elif total % 3 == 2 and two:\n            if len(one) >= 2 and two[0] > one[0] + one[1]:\n                return total - one[0] - one[1]\n            return total - two[0]\n        return 0\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        one = [float('inf')] * 2\n        two = [float('inf')] * 2\n        total = 0\n\n        for num in nums:\n            total += num\n            if num % 3 == 1:\n                if num < one[0]:\n                    t = one[0]\n                    one[0] = num\n                    one[1] = t\n                elif num < one[1]:\n                    one[1] = num\n            if num % 3 == 2:\n                if num < two[0]:\n                    t = two[0]\n                    two[0] = num\n                    two[1] = t\n                elif num < two[1]:\n                    two[1] = num\n        if total % 3 == 0:\n            return total\n        elif total % 3 == 1 and one:\n            if len(two) >= 2 and one[0] > two[0] + two[1]:\n                return total - two[0] - two[1]\n            return total - one[0]\n        elif total % 3 == 2 and two:\n            if len(one) >= 2 and two[0] > one[0] + one[1]:\n                return total - one[0] - one[1]\n            return total - two[0]\n        return 0\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        state = [0, float('-inf'), float('-inf')]\n\n        for num in nums:\n            if num % 3 == 0:\n                state = [state[0] + num, state[1] + num, state[2] + num]\n            if num % 3 == 1:\n                a = max(state[2] + num, state[0])\n                b = max(state[0] + num, state[1])\n                c = max(state[1] + num, state[2])\n                state = [a, b, c]\n            if num % 3 == 2:\n                a = max(state[1] + num, state[0])\n                b = max(state[2] + num, state[1])\n                c = max(state[0] + num, state[2])\n                state = [a, b, c]\n        return state[0]\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        state = [0, float('-inf'), float('-inf')]\n\n        for num in nums:\n            temp = [0] * 3\n            for i in range(3):\n                temp[(i + num) % 3] = max(state[(i + num) % 3], state[i] + num)\n            state = temp\n\n        return state[0]\n"}]},"maximum-number-of-occurrences-of-a-substring":{id:"1297",name:"maximum-number-of-occurrences-of-a-substring",pre:[{text:"\u5b57\u7b26\u4e32",link:null,color:"green"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"blue"},{text:"\u8bc6\u522b\u9898\u76ee\u5e72\u6270\u4fe1\u606f",link:null,color:"blue"},{text:"\u770b\u9898\u76ee\u9650\u5236\u6761\u4ef6\uff0c\u5bf9\u4e8e\u672c\u9898\u6709\u7528\u7684\u4fe1\u606f\u662f`1<=maxLetters<=26`",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md",code:[{language:"java",text:"\n public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {\n    Map<String, Integer> counter = new HashMap<>();\n    int res = 0;\n    for (int i = 0; i < s.length() - minSize + 1; i++) {\n        String substr = s.substring(i, i + minSize);\n        if (checkNum(substr, maxLetters)) {\n            int newVal = counter.getOrDefault(substr, 0) + 1;\n            counter.put(substr, newVal);\n            res = Math.max(res, newVal);\n        }\n    }\n    return res;\n}\npublic boolean checkNum(String substr, int maxLetters) {\n    Set<Character> set = new HashSet<>();\n    for (int i = 0; i < substr.length(); i++)\n        set.add(substr.charAt(i));\n    return set.size() <= maxLetters;\n}\n\n"},{language:"py",text:"\nclass Solution:\n    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        n = len(s)\n        letters = set()\n        cnts = dict()\n        res = 0\n        for i in range(n - minSize + 1):\n            length = minSize\n            while i + length <= n and length <= maxSize:\n                t = s[i:i + length]\n                for c in t:\n                    if len(letters) > maxLetters:\n                        break\n                    letters.add(c)\n                if len(letters) <= maxLetters:\n                    cnts[t] = cnts.get(t, 0) + 1\n                    res = max(res, cnts[t])\n                letters.clear()\n                length += 1\n        return res\n"},{language:"py",text:"\n def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        counter, res = {}, 0\n        for i in range(0, len(s) - minSize + 1):\n            sub = s[i : i + minSize]\n            if len(set(sub)) <= maxLetters:\n                counter[sub] = counter.get(sub, 0) + 1\n                res = max(res, counter[sub])\n        return res;\n\n# @lc code=end\n"}]},"xor-queries-of-a-subarray":{id:"1310",name:"xor-queries-of-a-subarray",pre:[{text:"\u524d\u7f00\u548c",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/prefix.md",color:"cyan"}],keyPoints:[{text:"\u5f02\u6216\u7684\u6027\u8d28x^y^x=y",link:null,color:"blue"},{text:"\u524d\u7f00\u8868\u8fbe\u5f0f",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md",code:[{language:"java",text:"\n  public int[] xorQueries(int[] arr, int[][] queries) {\n\n        int[] preXor = new int[arr.length];\n        preXor[0] = 0;\n\n        for (int i = 1; i < arr.length; i++)\n            preXor[i] = preXor[i - 1] ^ arr[i - 1];\n\n        int[] res = new int[queries.length];\n\n        for (int i = 0; i < queries.length; i++) {\n\n            int left = queries[i][0], right = queries[i][1];\n            res[i] = arr[right] ^ preXor[right] ^ preXor[left];\n        }\n\n        return res;\n    }\n\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {\n        vector<int>res;\n        for(int i=1; i<arr.size(); ++i){\n            arr[i]^=arr[i-1];\n        }\n        for(vector<int>temp :queries){\n            if(temp[0]==0){\n                res.push_back(arr[temp[1]]);\n            }\n            else{\n                res.push_back(arr[temp[0]-1]^arr[temp[1]]);\n            }\n        }\n        return res;\n    }\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n \t\tres = []\n        for (L, R) in queries:\n            i = L\n            xor = 0\n            while i <= R:\n                xor ^= arr[i]\n                i += 1\n            res.append(xor)\n        return res\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1218 lang=python3\n#\n# [1218] \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n\t\tpre = [0]\n        res = []\n        for i in range(len(arr)):\n            pre.append(pre[i] ^ arr[i])\n        for (L, R) in queries:\n            res.append(pre[L] ^ pre[R + 1])\n        return res\n\n# @lc code=end\n"}]},"remove-palindromic-subsequences":{id:"1332",name:"remove-palindromic-subsequences",pre:[{text:"\u56de\u6587",link:null,color:"lime"}],keyPoints:[{text:"\u6ce8\u610f\u5ba1\u9898\u76ee\uff0c\u4e00\u5b9a\u8981\u5229\u7528\u9898\u76ee\u6761\u4ef6\u201c\u53ea\u542b\u6709a\u548cb\u4e24\u4e2a\u5b57\u7b26\u201d\u5426\u5219\u5bb9\u6613\u505a\u7684\u5f88\u9ebb\u70e6",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md",code:[{language:"java",text:'\nclass Solution {\n    public int removePalindromeSub(String s) {\n        if ("".equals(s)) {\n            return 0;\n        }\n        if (s.equals(new StringBuilder(s).reverse().toString())) {\n            return 1;\n        }\n        return 2;\n    }\n}\n'},{language:"py",text:"\n\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        def isPalindrome(s):\n            l = 0\n            r = len(s) - 1\n            while l < r:\n                if s[l] != s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        return 1 if isPalindrome(s) else 2\n"},{language:"py",text:"\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        return 1 if s == s[::-1] else 2\n\n"}]},"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance":{id:"1334",name:"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"Floyd-Warshall",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md",code:[{language:"py",text:"\nclass Solution:\n    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        # \u6784\u5efadist\u77e9\u9635\n        dist = [[float('inf')] * n for _ in  range(n)]\n        for i, j, w in edges:\n            dist[i][j] = w\n            dist[j][i] = w\n        for i in range(n):\n            dist[i][i] = 0\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n        # \u8fc7\u6ee4\n        res = 0\n        minCnt = float('inf')\n        for i in range(n):\n            cnt = 0\n            for d in dist[i]:\n                if d <= distanceThreshold:\n                    cnt += 1\n            if cnt <= minCnt:\n                minCnt = cnt\n                res = i\n        return res\n\n\n"}]},"find-the-longest-substring-containing-vowels-in-even-counts":{id:"1371",name:"find-the-longest-substring-containing-vowels-in-even-counts",pre:[{text:"\u524d\u7f00\u548c",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/prefix.md",color:"cyan"},{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"green"}],keyPoints:[{text:"\u524d\u7f00\u548c",link:null,color:"blue"},{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md",code:[{language:"java",text:"\nclass Solution {\n    public int findTheLongestSubstring(String s) {\n\n        int len = s.length();\n\n        if (len == 0)\n            return 0;\n\n        int[][] preSum = new int[len][5];\n        int start = getIndex(s.charAt(0));\n        if (start != -1)\n            preSum[0][start]++;\n\n        // preSum\n        for (int i = 1; i < len; i++) {\n\n            int idx = getIndex(s.charAt(i));\n\n            for (int j = 0; j < 5; j++) {\n\n                if (idx == j)\n                    preSum[i][j] = preSum[i - 1][j] + 1;\n                else\n                    preSum[i][j] = preSum[i - 1][j];\n            }\n        }\n\n        for (int i = len - 1; i >= 0; i--) {\n\n            for (int j = 0; j < len - i; j++) {\n                if (checkValid(preSum, s, j, i + j))\n                    return i + 1;\n            }\n        }\n        return 0;\n    }\n\n\n    public boolean checkValid(int[][] preSum, String s, int left, int right) {\n\n        int idx = getIndex(s.charAt(left));\n\n        for (int i = 0; i < 5; i++)\n            if (((preSum[right][i] - preSum[left][i] + (idx == i ? 1 : 0)) & 1) == 1)\n                return false;\n\n        return true;\n    }\n    public int getIndex(char ch) {\n\n        if (ch == 'a')\n            return 0;\n        else if (ch == 'e')\n            return 1;\n        else if (ch == 'i')\n            return 2;\n        else if (ch == 'o')\n            return 3;\n        else if (ch == 'u')\n            return 4;\n        else\n            return -1;\n    }\n}\n"},{language:"py",text:"\n\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        for i in range(len(s), 0, -1):\n            for j in range(len(s) - i + 1):\n                sub = s[j:j + i]\n                has_odd_vowel = False\n                for vowel in ['a', 'e', 'i', 'o', 'u']:\n                    if sub.count(vowel) % 2 != 0:\n                        has_odd_vowel = True\n                        break\n                if not has_odd_vowel: return  i\n        return 0\n\n"},{language:"py",text:'\nclass Solution:\n    i_mapper = {\n        "a": 0,\n        "e": 1,\n        "i": 2,\n        "o": 3,\n        "u": 4\n    }\n    def check(self, s, pre, l, r):\n        for i in range(5):\n            if s[l] in self.i_mapper and i == self.i_mapper[s[l]]: cnt = 1\n            else: cnt = 0\n            if (pre[r][i] - pre[l][i] + cnt) % 2 != 0: return False\n        return True\n    def findTheLongestSubstring(self, s: str) -> int:\n        n = len(s)\n\n        pre = [[0] * 5 for _ in range(n)]\n\n        # pre\n        for i in range(n):\n            for j in range(5):\n                if s[i] in self.i_mapper and self.i_mapper[s[i]] == j:\n                    pre[i][j] = pre[i - 1][j] + 1\n                else:\n                    pre[i][j] = pre[i - 1][j]\n        for i in range(n - 1, -1, -1):\n            for j in range(n - i):\n                if self.check(s, pre, j, i + j):\n                    return i + 1\n        return 0\n'},{language:"py",text:'\n\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        mapper = {\n            "a": 1,\n            "e": 2,\n            "i": 4,\n            "o": 8,\n            "u": 16\n        }\n        seen = {0: -1}\n        res = cur = 0\n\n        for i in range(len(s)):\n            if s[i] in mapper:\n                cur ^= mapper.get(s[i])\n            # \u5168\u90e8\u5947\u5076\u6027\u90fd\u76f8\u540c\uff0c\u76f8\u51cf\u4e00\u5b9a\u90fd\u662f\u5076\u6570\n            if cur in seen:\n                res = max(res, i - seen.get(cur))\n            else:\n                seen[cur] = i\n        return res\n\n'}]},"design-a-stack-with-increment-operation":{id:"1381",name:"design-a-stack-with-increment-operation",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u524d\u7f00\u548c",link:null,color:"cyan"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1381.design-a-stack-with-increment-operation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1381.design-a-stack-with-increment-operation.md",code:[{language:"py",text:"\nclass CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        return self.st.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, min(self.cnt, k)):\n            self.st[i] += val\n\n"},{language:"py",text:"\nclass CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n        self.incrementals = [0] * size\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        if self.cnt >= 2:\n            self.incrementals[self.cnt - 2] += self.incrementals[self.cnt - 1]\n        ans = self.st.pop() + self.incrementals[self.cnt - 1]\n        self.incrementals[self.cnt - 1] = 0\n        self.cnt -= 1\n        return ans\n\n\n    def increment(self, k: int, val: int) -> None:\n            if self.cnt:\n                self.incrementals[min(self.cnt, k) - 1] += val\n"},{language:"py",text:"\nclass CustomStack:\n\n    def __init__(self, size: int):\n        self.st = []\n        self.cnt = 0\n        self.size = size\n        self.incrementals = []\n\n    def push(self, x: int) -> None:\n        if self.cnt < self.size:\n            self.st.append(x)\n            self.incrementals.append(0)\n            self.cnt += 1\n\n\n    def pop(self) -> int:\n        if self.cnt == 0: return -1\n        self.cnt -= 1\n        if self.cnt >= 1:\n            self.incrementals[-2] += self.incrementals[-1]\n        return self.st.pop() + self.incrementals.pop()\n\n\n    def increment(self, k: int, val: int) -> None:\n        if self.incrementals:\n            self.incrementals[min(self.cnt, k) - 1] += val\n"}]},"maximum-points-you-can-obtain-from-cards":{id:"1423",name:"maximum-points-you-can-obtain-from-cards",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u601d\u8def\u9006\u8f6c\uff0c\u53d6\u4e24\u8fb9\u6700\u5927\u5c31\u662f\u53d6\u4e2d\u95f4\u6700\u5c0f",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1423.maximum-points-you-can-obtain-from-cards.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1423.maximum-points-you-can-obtain-from-cards.md",code:[{language:"py",text:"\nclass Solution:\n    def maxScore(self, A: List[int], k: int) -> int:\n        @lru_cache(None)\n        def dp(s, e, k):\n          if k == 0: return 0\n          return max(A[s] + dp(s + 1, e, k - 1), A[e] + dp(s, e - 1, k - 1))\n        return dp(0, len(A)-1, k)\n"},{language:"py",text:"\n\nclass Solution:\n    def maxScore(self, A: List[int], k: int) -> int:\n        n = len(A)\n        ans = t = sum(A[: n - k])\n        for i in range(n - k, n):\n            t += A[i]\n            t -= A[i - (n - k)]\n            ans = min(ans, t)\n        return sum(A) - ans\n\n\n"}]},"jump-game-iv":{id:"1435",name:"jump-game-iv",pre:[{text:"BFS",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1435.jump-game-iv.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1435.jump-game-iv.md",code:[{language:"py",text:"\nclass Solution:\n    def minJumps(self, A: List[int]) -> int:\n        dic = collections.defaultdict(list)\n        n = len(A)\n\n        for i, a in enumerate(A):\n            dic[a].append(i)\n        visited = set([0])\n        q = collections.deque([0])\n        steps = 0\n\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                visited.add(i)\n                if i == n - 1: return steps\n                for neibor in dic[A[i]] + [i - 1, i + 1]:\n                    if 0 <= neibor < n and neibor not in visited:\n                        q.append(neibor)\n                # \u526a\u679d\n                dic[A[i]] = []\n            steps += 1\n        return -1\n"}]},"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit":{id:"1438",name:"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",pre:[{text:"\u6709\u5e8f\u96c6\u5408",link:null,color:"red"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"},{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[{text:"\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u5e76\u901a\u8fc7\u4e8c\u5206\u6cd5\u627e\u5230\u63d2\u5165\u4f4d\u7f6e",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md",code:[{language:"py",text:"\n\nclass Solution:\n    def longestSubarray(self, A: List[int], limit: int) -> int:\n        d = []\n        ans = 1\n\n        for i, a in enumerate(A):\n            bisect.insort(d, a)\n            if len(d) > 1:\n                while d[-1] - d[0] > limit:\n                    d.remove(A[i - len(d)+1])\n                ans = max(ans, len(d))\n        return ans\n\n"},{language:"py",text:"\n\nfrom sortedcontainers import SortedList\nclass Solution:\n    def longestSubarray(self, A: List[int], limit: int) -> int:\n        d = SortedList()\n        ans = 1\n\n        for i, a in enumerate(A):\n            d.add(a)\n            if len(d) > 1:\n                while d[-1] - d[0] > limit:\n                    d.remove(A[i - len(d)+1])\n                ans = max(ans, len(d))\n        return ans\n\n"},{language:"py",text:"\n\nclass Solution:\n    def longestSubarray(self, A: List[int], limit: int) -> int:\n        q1, q2 = collections.deque(), collections.deque()\n        ans = 1\n        i = 0\n        for j, a in enumerate(A):\n            while q1 and q1[-1] < a:\n                q1.pop()\n            q1.append(a)\n            while q2 and q2[-1] > a:\n                q2.pop()\n            q2.append(a)\n            while i < j and q1 and q2 and q1[0] - q2[0] > limit:\n                if A[i] == q1[0]: q1.popleft()\n                elif A[i] == q2[0]: q2.popleft()\n                i += 1\n            ans = max(ans, j - i + 1)\n        return ans\n\n"}]},"form-largest-integer-with-digits-that-add-up-to-target":{id:"1449",name:"form-largest-integer-with-digits-that-add-up-to-target",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u80cc\u5305\u95ee\u9898",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md",code:[{language:"py",text:"\nfor i in 0 to N:\n    for j in 1 to V + 1:\n        dp[j] = max(dp[j], dp[j - cost[i])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    # \u8fd9\u91cc\u662f\u5012\u5e8f\u7684\uff0c\u539f\u56e0\u5728\u4e8e\u8fd9\u91cc\u662f01\u80cc\u5305\u3002\n    for j in V to 0:\n        dp[j] = max(dp[j], dp[j - cost[i - 1])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    # \u8fd9\u91cc\u4e0d\u662f\u5012\u5e8f\uff0c\u539f\u56e0\u662f\u6211\u4eec\u8fd9\u91cc\u662f\u5b8c\u5168\u80cc\u5305\u95ee\u9898\n    for j in 1 to V + 1:\n        dp[j] = max(dp[j], dp[j - cost[i - 1])\n\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    for j in V to 0:\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - cost[i - 1])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n   for j in 1 to V + 1:\n       dp[i][j] = max(dp[i - 1][j], dp[i][j - cost[i - 1])\n\n"},{language:"py",text:"\nclass Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        dp = [0] + [float('-inf')] * target\n        for i in range(9, 0, -1):\n            for j in range(1, target+1):\n                if j >= cost[i - 1]:\n                    dp[j] = max(dp[j], (dp[j-cost[i - 1]] * 10) + i)\n        return str(dp[target]) if dp[target] > 0 else '0'\n\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    for j in V to 0:\n        ...\n\n"},{language:"py",text:"\nfor j in V to 0:\n    for i in 1 to N + 1:\n        ...\n\n"}]},"parallel-courses-ii":{id:"1494",name:"parallel-courses-ii",pre:[{text:"\u62d3\u6251\u6392\u5e8f",link:null,color:"purple"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u679a\u4e3e",link:null,color:"blue"},{text:"\u4f4d\u8fd0\u7b97\u7684\u679a\u4e3e\u5b50\u96c6\u4f18\u5316",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1494.parallel-courses-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1494.parallel-courses-ii.md",code:[{language:"js",text:"\n// \u5916\u5c42\u679a\u4e3e\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e x \u7684\u6570\nans = [];\nfor (i = 1; i < 1 << n; i++) {\n  if ((x | i) === x) ans.push(i);\n}\n// ans \u5c31\u662f\u6240\u6709\u975e\u7a7a\u5b50\u96c6\n"},{language:"js",text:"\nans = [];\n// \u5916\u5c42\u679a\u4e3e\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e x \u7684\u6570\nfor (i = x; i != 0; i = (i - 1) & x) {\n  ans.push(i);\n}\n// ans \u5c31\u662f\u6240\u6709\u975e\u7a7a\u5b50\u96c6\n"},{language:"py",text:"\ndp[i | sub] = min(dp[i | sub], dp[i] + 1)\n"},{language:"py",text:'\n\nclass Solution:\n    def minNumberOfSemesters(self, n: int, dependencies: List[List[int]], k: int) -> int:\n        neighbors = collections.defaultdict(int)\n        dp = [n] * (1 << n)\n\n        for fr, to in dependencies:\n            neighbors[to - 1] |= 1 << (fr - 1)\n        dp[0] = 0  # \u542f\u52a8 dp\n        for i in range(1 << n):\n            can = 0\n            for j in range(n):\n                if (i & neighbors[j]) == neighbors[j]:\n                    can |= 1 << j\n            # \u5df2\u7ecf\u5b66\u8fc7\u7684\u4e0d\u80fd\u5b66\n            can &= ~i\n            sub = can\n            while sub:\n                if bin(sub).count("1") <= k:\n                    dp[i | sub] = min(dp[i | sub], dp[i] + 1)\n                sub = (sub - 1) & can\n        return dp[(1 << n) - 1]\n\n\n'}]},"find-a-value-of-a-mysterious-function-closest-to-target":{id:"1521",name:"find-a-value-of-a-mysterious-function-closest-to-target",pre:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bc6\u522b\u51fa\u51fd\u6570func\u6ee1\u8db3\u67d0\u79cd\u5355\u8c03\u6027",link:null,color:"blue"},{text:"\u91c7\u7528\u5408\u9002\u7684\u679a\u4e3e\u65b9\u6cd5",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md",code:[{language:"py",text:"\nclass Solution:\n    def closestToTarget(self, A: List[int], target: int) -> int:\n        seen = set()\n        ans = float('inf')\n        for a in A:\n            seen.add(a)\n            t = set()\n            # \u7c7b\u4f3c\u6eda\u52a8\u6570\u7ec4 \u6b64\u65f6\u7684 seen \u76f8\u5f53\u4e8e sub[i-1]\n            for b in seen:\n                yu = a & b\n                ans = min(ans, abs(yu - target))\n                t.add(yu)\n            # \u6b64\u65f6\u7684 t \u5c31\u662f sub[i]\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u56de seen\n            seen = t\n        return ans\n"}]},"minimum-number-of-increments-on-subarrays-to-form-a-target-array":{id:"1526",name:"minimum-number-of-increments-on-subarrays-to-form-a-target-array",pre:[{text:"\u5dee\u5206\u4e0e\u524d\u7f00\u548c",link:null,color:"red"}],keyPoints:[{text:"\u9006\u5411\u601d\u8003",link:null,color:"blue"},{text:"\u4f7f\u7528\u5dee\u5206\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md",code:[{language:"py",text:"\nclass Solution:\n    def minNumberOperations(self, A: List[int]) -> int:\n        d = [A[0]]\n        ans = 0\n\n        for i in range(1, len(A)):\n            d.append(A[i] - A[i-1])\n        for a in d:\n            ans += max(0, a)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def minNumberOperations(self, A: List[int]) -> int:\n        ans = A[0]\n        for i in range(1, len(A)):\n            ans += max(0, A[i] - A[i-1])\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, A, size, K):\n        N = len(A)\n\n        def possible(target):\n            # \u5dee\u5206\u6570\u7ec4 d\n            d = [0] * N\n            moves = a = 0\n            for i in range(N):\n                # a \u76f8\u5f53\u4e8e\u5dee\u5206\u6570\u7ec4 d \u7684\u524d\u7f00\u548c\n                a += d[i]\n                # \u5f53\u524d\u503c\u548c target \u7684\u5dee\u8ddd\n                delta = target - (A[i] + a)\n                # \u5927\u4e8e 0 \u8868\u793a\u4e0d\u5230 target\uff0c\u6211\u4eec\u5fc5\u987b\u9700\u8981\u8fdb\u884c +1 \u64cd\u4f5c\n                if delta > 0:\n                    moves += delta\n                    # \u66f4\u65b0\u524d\u7f00\u548c\n                    a += delta\n                    # \u5982\u679c i + size >= N \u5bf9\u5e94\u6211\u4e0a\u9762\u63d0\u5230\u7684\u53ea\u4fee\u6539\u5de6\u7aef\u70b9\uff0c\u4e0d\u4fee\u6539\u53f3\u7aef\u70b9\u7684\u60c5\u51b5\n                    if i + size < N:\n                        d[i + size] -= delta\n            # \u6267\u884c\u7684+1\u64cd\u4f5c\u5c0f\u4e8e\u7b49\u4e8eK \u8bf4\u660e\u53ef\u884c\n            return moves <= K\n        # \u5b9a\u4e49\u89e3\u7a7a\u95f4\n        lo, hi = min(A), max(A) + K\n        # \u6700\u53f3\u4e8c\u5206\u6a21\u677f\n        while lo <= hi:\n            mi = (lo + hi) // 2\n            if possible(mi):\n                lo = mi + 1\n            else:\n                hi = mi - 1\n        return hi\n"}]},"minimum-numbers-of-function-calls-to-make-target-array":{id:"1558",name:"minimum-numbers-of-function-calls-to-make-target-array",pre:[{text:"\u6a21\u62df",link:null,color:"purple"}],keyPoints:[{text:"\u9006\u5411\u601d\u8003",link:null,color:"blue"},{text:"\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u8bb0\u5f55add\u548cmulti\u7684\u6b21\u6570",link:null,color:"blue"},{text:"multi\u53d6\u51b3\u4e8e\u6574\u4e2a\u6570\u7ec4\u6700\u5927\u7684\u6570\uff0cadd\u53d6\u51b3\u4e8e\u6570\u7ec4\u51fa\u73b0\u5947\u6570\u7684\u6b21\u6570",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md",code:[{language:"py",text:"\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        max_multi = add = 0\n\n        for num in nums:\n            # your code here\n        return max_multi + add\n\n"},{language:"py",text:"\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        max_multi = add = 0\n\n        for num in nums:\n            multi = 0\n            while num > 0:\n                if num & 1 == 1:\n                    add += 1\n                    num -= 1\n                if num >= 2:\n                    multi += 1\n                    num //= 2\n\n            max_multi = max(max_multi, multi)\n        return max_multi + add\n\n"}]},"shortest-subarray-to-be-removed-to-make-array-sorted":{id:"1574",name:"shortest-subarray-to-be-removed-to-make-array-sorted",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md "\u6ed1\u52a8\u7a97\u53e3"',color:"purple"}],keyPoints:[{text:"\u753b\u56fe",link:null,color:"blue"},{text:"\u8fb9\u754c\u6761\u4ef6\u7684\u8003\u5bdf\uff08\u6bd4\u5982+1",link:null,color:"blue"},{text:"1\u7b49\u53f7\uff09",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md",code:[{language:"java",text:"\nans = cnt = 1\nfor(int i = 1; i < A.length; i++ ) {\n    if (A[i] >= A[i - 1]) {\n        cnt++\n    }\n    else {\n        ans = max(ans, cnt)\n        cnt = 1\n    }\n}\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int findLengthOfShortestSubarray(vector<int>& A) {\n        int N = A.size(), left = 0, right = N - 1;\n        while (left + 1 < N && A[left] <= A[left + 1]) ++left;\n        if (left == A.size() - 1) return 0;\n        while (right > left && A[right - 1] <= A[right]) --right;\n        int ans = min(N - left - 1, right), i = 0, j = right;\n        while (i <= left && j < N) {\n            if (A[j] >= A[i]) {\n                ans = min(ans, j - i - 1);\n                ++i;\n            } else ++j;\n        }\n        return ans;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def findLengthOfShortestSubarray(self, A: List[int]) -> int:\n        n = len(A)\n        l, r = 0, n - 1\n\n        while l < n - 1 and A[l] <= A[l + 1]:\n            l += 1\n        if l == n - 1:\n            return 0\n        while r > 0 and A[r] >= A[r - 1]:\n            r -= 1\n        ans = min(r, n - l - 1)\n        i = 0\n        while i <= l and r < n:\n            if A[i] <= A[r]:\n                # delete i + 1 ~ r - 1\n                ans = min(ans, r - i - 1)\n                i += 1\n            else:\n                # extend the sliding window\n                r += 1\n        return ans\n\n"}]},"path-with-minimum-effort":{id:"1631",name:"path-with-minimum-effort",pre:[{text:"\u4e8c\u7ef4\u77e9\u9635",link:null,color:"purple"},{text:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/DFS.md",color:"geekblue"},{text:"\u4e8c\u5206\u67e5\u627e",link:"https://github.com/azl397985856/leetcode/blob/master/91/binary-search.md",color:"magenta"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1631.path-with-minimum-effort.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1631.path-with-minimum-effort.md",code:[{language:"py",text:"\nreturn dfs(i + 1, j, heights[i][j], target) or dfs(i - 1, j, heights[i][j], target) or dfs(i, j + 1, heights[i][j], target) or dfs(i, j - 1, heights[i][j], target)\n"},{language:"py",text:"\ntop = dfs(i + 1, j, heights[i][j], target)\nbottom = dfs(i - 1, j, heights[i][j], target)\nright = dfs(i, j + 1, heights[i][j], target)\nleft = dfs(i, j - 1, heights[i][j], target)\nreturn top or bottom or right or left\n\n"},{language:"py",text:"\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        lo, hi = 0, 10**6 - 1\n        m, n = len(heights), len(heights[0])\n        def dfs(i, j, pre, target):\n            if (i, j) in visited: return False\n            if i < 0 or i >= m or j < 0 or j >= n or abs(heights[i][j] - pre) > target: return False\n            if i == m - 1 and j == n - 1: return True\n            visited.add((i, j))\n            return dfs(i + 1, j, heights[i][j], target) or dfs(i - 1, j, heights[i][j], target) or dfs(i, j + 1, heights[i][j], target) or dfs(i, j - 1, heights[i][j], target)\n        # \u67e5\u627e\u6700\u53f3\u4fa7\u6ee1\u8db3\u6761\u4ef6\u7684\u503c\n        while lo <= hi:\n            visited = set()\n            mid = (lo + hi) >> 1\n            if dfs(0, 0, heights[0][0], mid): hi = mid - 1\n            else: lo = mid + 1\n        return lo\n\n"}]},"create-sorted-array-through-instructions":{id:"1649",name:"create-sorted-array-through-instructions",pre:[{text:"\u4e8c\u5206\u6cd5",link:"../91/binary-search.md",color:"blue"},{text:"\u7ebf\u6bb5\u6811",link:"https://oi-wiki.org/ds/seg/",color:"orange"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1649.create-sorted-array-through-instructions.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1649.create-sorted-array-through-instructions.md",code:[{language:"py",text:"\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        mod = 10 ** 9 + 7\n        nums = []\n        ans = 0\n        # eg: 1 2 2 3\n        for instruction in instructions:\n            l = bisect.bisect_left(nums, instruction)\n            r = bisect.bisect_right(nums, instruction)\n            nums[l:l] = [instruction]\n            ans = (ans + min(l, len(nums) - r - 1)) % mod\n        return ans\n\n"},{language:"py",text:"\nnums.insert(l, instruction)\n"},{language:"py",text:"\nnums[l:l] = [instruction]\n"},{language:"py",text:"\n    upper = max(instructions)\n    # \u521d\u59cb\u5316\u7ebf\u6bb5\u6811\n    seg = SegmentTree(upper, 1)\n    for instruction in instructions:\n        # \u8fdb\u884c\u4e24\u6b21\u67e5\u8be2\n        l = seg.queryCount(1, instruction - 1)\n        r = seg.queryCount(instruction + 1, upper)\n        ans = (ans + min(l, r)) % mod\n        # \u8fdb\u884c\u4e00\u6b21\u66f4\u65b0\n        seg.updateCount(instruction)\n    return ans\n"},{language:"py",text:'\nclass SegmentTree:\n    def __init__(self, upper, lower):\n        """\n        data:\u4f20\u5165\u7684\u6570\u7ec4\n        """\n        self.lower = lower\n        self.upper = upper\n        #  \u7533\u8bf74\u500ddata\u957f\u5ea6\u7684\u7a7a\u95f4\u6765\u5b58\u7ebf\u6bb5\u6811\u8282\u70b9\n        self.tree = [0] * (4 * (upper - lower + 1))  # \u7d22\u5f15i\u7684\u5de6\u5b69\u5b50\u7d22\u5f15\u4e3a2i+1\uff0c\u53f3\u5b69\u5b50\u4e3a2i+2\n\n    # \u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u81ea\u5e95\u5411\u4e0a\u7684\u66f4\u65b0\u8fc7\u7a0b\n    # \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5373\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u66f4\u65b0\u7236\u8282\u70b9\u3002\n    def update(self, tree_index, l, r, index):\n        """\n        tree_index:\u67d0\u4e2a\u6839\u8282\u70b9\u7d22\u5f15\n        l, r : \u6b64\u6839\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        index : \u66f4\u65b0\u7684\u503c\u7684\u7d22\u5f15\n        """\n        if l > index or r < index:\n            return\n        self.tree[tree_index] += 1\n        if l == r:\n            return\n        mid = (l + r) // 2\n        left, right = tree_index * 2 + 1, tree_index * 2 + 2\n        self.update(left, l, mid, index)\n        self.update(right, mid + 1, r, index)\n\n    def updateCount(self, index: int):\n        self.update(0, self.lower, self.upper, index)\n\n    def query(self, tree_index: int, l: int, r: int, ql: int, qr: int) -> int:\n        """\n        \u9012\u5f52\u67e5\u8be2\u533a\u95f4[ql,..,qr]\u7684\u503c\n        tree_index : \u67d0\u4e2a\u6839\u8282\u70b9\u7684\u7d22\u5f15\n        l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        ql, qr: \u5f85\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        """\n        if qr < l or ql > r:\n            return 0\n        # l \u548c r \u5728 [ql, qr] \u5185\n        if ql <= l and qr >= r:\n            return self.tree[tree_index]\n        mid = (l + r) // 2\n        left, right = tree_index * 2 + 1, tree_index * 2 + 2\n        return self.query(left, l, mid, ql, qr) + self.query(right, mid + 1, r, ql, qr)\n\n    def queryCount(self, ql: int, qr: int) -> int:\n        """\n        \u8fd4\u56de\u533a\u95f4[ql,..,qr]\u7684\u8ba1\u6570\u4fe1\u606f\n        """\n        return self.query(0, self.lower, self.upper, ql, qr)\n\n\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        mod = 10 ** 9 + 7\n        ans = 0\n        # eg: 1 2 2 3\n        upper = max(instructions)\n        seg = SegmentTree(upper, 1)\n        for instruction in instructions:\n            l = seg.queryCount(1, instruction - 1)\n            r = seg.queryCount(instruction + 1, upper)\n            ans = (ans + min(l, r)) % mod\n            seg.updateCount(instruction)\n        return ans\n'}]},"minimum-operations-to-reduce-x-to-zero":{id:"1658",name:"minimum-operations-to-reduce-x-to-zero",pre:[{text:"\u5806",link:null,color:"green"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md",code:[{language:"py",text:"\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        # \u770b\u6570\u636e\u8303\u56f4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u94c1\u5b9a\u8d85\u65f6\uff08\u6307\u6570\u590d\u6742\u5ea6\uff09\n        h = [(0, 0, len(nums) - 1, x)]\n        while h:\n            moves,l,r,remain = heapq.heappop(h)\n            if remain == 0: return moves\n            if l + 1 < len(nums): heapq.heappush(h, (moves + 1, l + 1,r, remain-nums[l]))\n            if r > 0: heapq.heappush(h, (moves + 1, l,r-1, remain-nums[r]))\n        return -1\n\n"},{language:"py",text:"\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n\n        @lru_cache(None)\n        def dp(l, r, x):\n            if x == 0:\n                return 0\n            if x < 0 or r < 0 or l > len(nums) - 1:\n                return n + 1\n            return 1 + min(dp(l + 1, r, x - nums[l]), dp(l, r - 1, x - nums[r]))\n\n        ans = dp(0, len(nums) - 1, x)\n        return -1 if ans > n else ans\n"},{language:"py",text:"\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        # \u9006\u5411\u6c42\u89e3\uff0c\u6ed1\u52a8\u7a97\u53e3\n        i = 0\n        target = sum(nums) - x\n        win = 0\n        ans = len(nums)\n        if target == 0: return ans\n        for j in range(len(nums)):\n            win += nums[j]\n            while i < j and win > target:\n                win -= nums[i]\n                i += 1\n            if win == target:\n                ans = min(ans, len(nums) - (j - i + 1))\n        return -1 if ans == len(nums) else ans\n\n"}]},"minimum-number-of-removals-to-make-mountain-array":{id:"1671",name:"minimum-number-of-removals-to-make-mountain-array",pre:[{text:"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md",code:[{language:"py",text:"\nclass Solution:\n    def minimumMountainRemovals(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n\n        def LIS(A):\n            d = []\n            for a in A:\n                i = bisect.bisect_left(d, a)\n                if i < len(d):\n                    d[i] = a\n                elif not d or d[-1] < a:\n                    d.append(a)\n            return d.index(A[-1])\n\n        for i in range(1, n-1):\n            l, r = LIS(nums[:i+1]), LIS(nums[i:][::-1])\n            if not l or not r: continue\n            ans = min(ans, n - 1 - l - r)\n        return ans\n"}]},"checking-existence-of-edge-length-limited-paths":{id:"1697",name:"checking-existence-of-edge-length-limited-paths",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u5e76\u67e5\u96c6",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/union-find.md",color:"volcano"}],keyPoints:[{text:"\u79bb\u7ebf\u67e5\u8be2\u4f18\u5316",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1697.checking-existence-of-edge-length-limited-paths.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1697.checking-existence-of-edge-length-limited-paths.md",code:[{language:"py",text:"\n\nclass UF:\n    parent = {}\n    size = {}\n    cnt = 0\n    def __init__(self, M):\n        # \u521d\u59cb\u5316 parent\uff0csize \u548c cnt\n        for i in range(M):\n            self.parent[i] = i\n            self.size[i] = 1\n\n    def find(self, x):\n        while x != self.parent[x]:\n            x = self.parent[x]\n            # \u8def\u5f84\u538b\u7f29\n            self.parent[x] = self.parent[self.parent[x]];\n        return x\n    def union(self, p, q):\n        if self.connected(p, q): return\n        # \u5c0f\u7684\u6811\u6302\u5230\u5927\u7684\u6811\u4e0a\uff0c \u4f7f\u6811\u5c3d\u91cf\u5e73\u8861\n        leader_p = self.find(p)\n        leader_q = self.find(q)\n        if self.size[leader_p] < self.size[leader_q]:\n            self.parent[leader_p] = leader_q\n            self.size[leader_p] += self.size[leader_q]\n        else:\n            self.parent[leader_q] = leader_p\n            self.size[leader_q] += self.size[leader_p]\n        self.cnt -= 1\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\nclass Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        m = len(queries)\n        edgeList.sort(key=lambda a:a[2])\n        queries = [(fr, to, w, i) for i, [fr, to, w] in enumerate(queries)]\n        queries.sort(key=lambda a:a[2])\n        ans = [False] * m\n        uf = UF(n)\n        j = 0\n        for fr, to, w, i in queries:\n            while j < len(edgeList) and edgeList[j][2] < w:\n                uf.union(edgeList[j][0], edgeList[j][1])\n                j += 1\n            if uf.connected(fr, to): ans[i] = True\n        return ans\n\n"}]},"find-minimum-time-to-finish-all-jobs":{id:"1723",name:"find-minimum-time-to-finish-all-jobs",pre:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u526a\u679d",link:null,color:"gold"},{text:"\u5b50\u96c6\u679a\u4e3e",link:null,color:"magenta"}],keyPoints:[{text:"\u526a\u679d\uff08\u5426\u5219\u4f1a\u8d85\u65f6\uff09",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1723.find-minimum-time-to-finish-all-jobs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1723.find-minimum-time-to-finish-all-jobs.md",code:[{language:"cpp",text:"\n\nclass Solution {\npublic:\n    int minimumTimeRequired(vector<int>& jobs, int k) {\n        int n = jobs.size();\n        vector<int> sum(1 << n);\n        for (int i = 0; i < (1 << n); i++) {\n            for(int j = 0; j < n; j++) {\n                if (i & (1 << j)) {\n                    sum[i] += jobs[j];\n                }\n            }\n        }\n\n        vector<vector<int>> dp(k, vector<int>(1 << n));\n        for (int i = 0; i < (1 << n); i++) {\n            dp[0][i] = sum[i];\n        }\n\n        for (int i = 1; i < k; i++) {\n           // \u4e8c\u8fdb\u5236\u5b50\u96c6\u679a\u4e3e\u4f18\u5316\n            for (int j = 0; j < (1 << n); j++) {\n                dp[i][j] = INT_MAX;\n                for (int x = j; x; x = (x - 1) & j) {\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j - x], sum[x]));\n                }\n            }\n        }\n        return dp[k - 1][(1 << n) - 1];\n    }\n};\n\n\n"},{language:"py",text:"\nclass Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n        def backtrack(pos, workloads, limit):\n            if pos >= len(jobs): return True\n            for i in range(len(workloads)):\n                workload = workloads[i]\n                if jobs[pos] + workload <= limit:\n                    workloads[i] += jobs[pos]\n                    if backtrack(pos + 1, workloads, limit): return True\n                    workloads[i] -= jobs[pos]\n                if workload == 0:\n                    return False\n            return False\n        def possible(limit):\n            return backtrack(0, [0] * k, limit)\n        jobs.sort(reverse=True)\n        l, r = jobs[0], sum(jobs)\n        while l <= r:\n            mid = (l + r) // 2\n            if possible(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n"},{language:"py",text:'\nclass Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n        n = len(jobs)\n        sum_jobs = [0] * (1 << n)\n        dp = [[float("inf") for _ in range(1 << n)] for _ in range(k)]\n\n        for i in range(1 << n):\n            for j in range(n):\n                if i & 1 << j:\n                    sum_jobs[i] += jobs[j]\n\n        for i in range(1 << n):\n            dp[0][i] = sum_jobs[i]\n\n        for i in range(1, k):\n            #  \u4e8c\u8fdb\u5236\u5b50\u96c6\u679a\u4e3e\u4f18\u5316\n            for j in range(1 << n):\n                sub = j\n                while sub != 0:\n                    dp[i][j] = min(dp[i][j], max(dp[i - 1][j - sub], sum_jobs[sub]))\n                    sub = j & (sub - 1)\n        return dp[-1][-1]\n\n'}]},"change-minimum-characters-to-satisfy-one-of-three-conditions":{id:"1737",name:"change-minimum-characters-to-satisfy-one-of-three-conditions",pre:[{text:"\u8ba1\u6570",link:null,color:"orange"},{text:"\u679a\u4e3e",link:null,color:"magenta"}],keyPoints:[{text:"\u4f7f\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a26\u7684\u6570\u7ec4\u8ba1\u6570\u4e0d\u4ec5\u6027\u80fd\u6bd4\u54c8\u5e0c\u8868\u597d\uff0c\u5e76\u4e14\u5728\u8fd9\u91cc\u4ee3\u7801\u4e66\u5199\u4f1a\u66f4\u7b80\u5355",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md",code:[{language:"py",text:"\n        # \u679a\u4e3e A \u7684\u6700\u5927\u5b57\u6bcd\n        for i in range(1, 26):\n            t = 0\n            # A \u4e2d\u5927\u4e8e\u7b49\u4e8e i \u7684\u6240\u6709\u5b57\u7b26\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\n            for j in range(i, 26):\n                t += counter_A[j]\n            # B \u4e2d\u5c0f\u4e8e i \u7684\u6240\u6709\u5b57\u7b26\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\n            for j in range(i):\n                t += counter_B[j]\n            # \u679a\u4e3e\u7684\u6240\u6709\u60c5\u51b5\u4e2d\u53d6\u6700\u5c0f\u7684\n            ans = min(ans, t)\n"},{language:"py",text:"\nfor i in range(26):\n     ans = min(ans, len(A) + len(B) - counter_A[i] - counter_B[i])\n"},{language:"py",text:"\nclass Solution:\n    def minCharacters(self, A: str, B: str) -> int:\n        counter_A = [0] * 26\n        counter_B = [0] * 26\n        for a in A:\n            counter_A[ord(a) - ord('a')] += 1\n        for b in B:\n            counter_B[ord(b) - ord('a')] += 1\n        ans = len(A) + len(B)\n        for i in range(26):\n            ans = min(ans, len(A) + len(B) - counter_A[i] - counter_B[i])\n        for i in range(1, 26):\n            t = 0\n            for j in range(i, 26):\n                t += counter_A[j]\n            for j in range(i):\n                t += counter_B[j]\n            ans = min(ans, t)\n        for i in range(1, 26):\n            t = 0\n            for j in range(i, 26):\n                t += counter_B[j]\n            for j in range(i):\n                t += counter_A[j]\n            ans = min(ans, t)\n        return ans\n\n\n"},{language:"py",text:'\nclass Solution:\n    def minCharacters(self, A: str, B: str) -> int:\n        ca = collections.Counter(A)\n        cb = collections.Counter(B)\n        # ca \u4e2d\u4e25\u683c\u5927\u4e8e cb \u7684\u6700\u5c0f\u64cd\u4f5c\u6570\n        def greater_cost(ca, cb):\n            ans = float("inf")\n            # \u679a\u4e3e ca \u4e2d\u7684\u6700\u5c0f\u503c\n            for i in range(1, 26):\n                count = 0\n                # \u5c06 ca \u4e2d\u5c0f\u4e8e\u6700\u5c0f\u503c\u7684\u90fd\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\n                for j in range(i):\n                    count += ca[chr(97 + j)]\n                # \u5c06 cb \u4e2d\u5927\u4e8e\u7b49\u4e8e\u6700\u5c0f\u503c\u7684\u90fd\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\u7b49\u53f7\uff09\n                for j in range(i, 26):\n                    count += cb[chr(97 + j)]\n                ans = min(ans, count)\n            return ans\n\n        def equal_cost(ca, cb):\n            ans = float("inf")\n            for i in range(26):\n                ans = min(ans, len(A) + len(B) - ca[chr(97 + i)] - cb[chr(97 + i)])\n            return ans\n\n        return min(greater_cost(ca, cb), greater_cost(cb, ca), equal_cost(ca, cb))\n\n'}]},"single-threaded-cpu":{id:"1834",name:"single-threaded-cpu",pre:[{text:"\u6a21\u62df",link:null,color:"purple"},{text:"\u5806",link:null,color:"green"}],keyPoints:[{text:"\u5806",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1834.single-threaded-cpu.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1834.single-threaded-cpu.md",code:[{language:"py",text:"\n\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        tasks = [(task[0], i, task[1]) for i, task in enumerate(tasks)]\n        tasks.sort()\n        backlog = []\n        time = 0\n        ans = []\n        pos = 0\n        for _ in tasks:\n            if not backlog:\n                time = max(time, tasks[pos][0])\n            while pos < len(tasks) and tasks[pos][0] <= time:\n                heapq.heappush(backlog, (tasks[pos][2], tasks[pos][1]))\n                pos += 1\n            d, j = heapq.heappop(backlog)\n            time += d\n            ans.append(j)\n        return ans\n\n"}]},"find-xor-sum-of-all-pairs-bitwise-and":{id:"1835",name:"find-xor-sum-of-all-pairs-bitwise-and",pre:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"}],keyPoints:[{text:"\u4ece\u4f4d\u7684\u89d2\u5ea6\u601d\u8003\u95ee\u9898",link:null,color:"blue"},{text:"\u4f4d\u8fd0\u7b97\uff08\u8fd9\u91cc\u662fAND\u548cXOR\uff09\u7684\u57fa\u672c\u7279\u6027",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md",code:[{language:"py",text:"\n\nclass Solution:\n    def getXORSum(self, A: List[int], B: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            ones_a = ones_b = 0\n            for a in A:\n                if a & (1 << i):\n                    ones_a += 1\n            for b in B:\n                if b & (1 << i):\n                    ones_b += 1\n            if ones_a * ones_b & 1:\n                ans |= 1 << i\n        return ans\n\n"}]},"maximum-xor-with-an-element-from-array":{id:"5640",name:"maximum-xor-with-an-element-from-array",pre:[{text:"\u5f02\u6216",link:null,color:"geekblue"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u526a\u679d",link:null,color:"gold"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/5640.maximum-xor-with-an-element-from-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/5640.maximum-xor-with-an-element-from-array.md",code:[{language:"py",text:"\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def solve(x, m, s, e):\n            if nums[0] > m: return -1\n            max_v = 0\n            for i in range(31, -1, -1):\n                if nums[s] & (1<<i) == nums[e] & (1<<i):\n                    max_v += nums[s] & (1<<i)\n                elif nums[dp[i][e]] <= m and x ^ nums[s] < x ^ nums[e]:\n                    max_v += nums[e] & (1<<i)\n                    # \u76f4\u63a5\u79fb\u52a8\u8f83\u5c0f\u6307\u9488\uff08s\uff09\u5230 dp[i][e]\uff0c\u5176\u4ed6\u4e0d\u53ef\u80fd\u662f\u7b54\u6848\n                    s = dp[i][e]\n                else:\n                    max_v += nums[s] & (1<<i)\n                    # \u76f4\u63a5\u79fb\u52a8\u8f83\u5c0f\u6307\u9488\uff08e\uff09\u5230 dp[i][e] - 1\uff0c\u5176\u4ed6\u4e0d\u53ef\u80fd\u662f\u7b54\u6848\n                    e = dp[i][e] - 1\n\n            return max_v ^ x\n\n        nums.sort()\n        n = len(nums)\n        #  dp[i][j] \u662f\u548c nums[j] \u7b2c i \u4f4d\u76f8\u7b49\u7684\u6700\u5c0f\u7684\u6570\u7ec4\u4e0b\u6807\n        dp = [[0 for _ in range(n)] for _ in range(32)]\n        for i in range(32):\n            for j in range(n):\n                if j == 0 or (nums[j] & (1<<i)) != (nums[j-1] & (1<<i)): dp[i][j] = j\n                else: dp[i][j] = dp[i][j-1]\n        return [solve(x, m, 0, n-1) for x,m in queries]\n"}]},md:{id:"Bus-Fare",name:"md",pre:[{text:"\u9012\u5f52\u6811",link:null,color:"volcano"},{text:"\u591a\u6307\u9488",link:null,color:"magenta"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Bus-Fare.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Bus-Fare.md",code:[{language:"py",text:'\nclass Solution:\n    def solve(self, days):\n        n = len(days)\n        prices = [2, 7, 25]\n        durations = [1, 7, 30]\n        dp = [float("inf")] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                # \u5982\u4f55\u7b2c i + 1\u5929\u5230\u7b2c j \u5929\u7684\u5929\u6570\u5c0f\u4e8e\u7b49\u4e8e 2\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bd5\u4e00\u4e0b\u5728 i + 1 \u5929\u4e70\u4e00\u5f20 2 \u5929\u7684\u7968\uff0c\u770b\u4f1a\u4e0d\u4f1a\u662f\u6700\u4f18\u89e3\u3002\n                # 7 \u548c 25 \u7684\u903b\u8f91\u4e5f\u662f\u4e00\u6837\n        return dp[-1]\n'},{language:"py",text:'\nclass Solution:\n    def solve(self, days):\n        n = len(days)\n        prices = [2, 7, 25]\n        durations = [1, 7, 30]\n        dp = [float("inf")] * (n + 1)\n        # dp[i] \u8868\u793a\u622a\u6b62\u7b2c i + 1 \u5929\uff08\u5305\u62ec\uff09\u9700\u8981\u591a\u5c11\u94b1\uff0c\u56e0\u6b64\u7b54\u6848\u5c31\u662f dp[n]\uff0c\u5176\u4e2d n \u4e3a max(days)\uff0c\u7531\u4e8e day \u662f\u5347\u5e8f\u7684\uff0c\u56e0\u6b64\u5c31\u662f day \u6700\u540e\u4e00\u9879\u3002\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                for price, duration in zip(prices, durations):\n                    if days[j - 1] - days[i - 1] + 1 <= duration:\n                        dp[j] = min(dp[j], dp[i - 1] + price)\n        return dp[-1]\n'},{language:"py",text:'\nclass Solution:\n    def solve(self, days):\n        prices = [2, 7, 25]\n        durations = [1, 7, 30]\n        n = len(days)\n        m = len(prices)\n        dp = [float("inf")] * (n + 1)\n        dp[0] = 0\n        pointers = [0] * m\n        for i in range(1, n + 1):\n            for j in range(m):\n                while days[i - 1] - days[pointers[j]] >= durations[j]:\n                    pointers[j] += 1\n                dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n        return dp[-1]\n'}]}},Object(f.a)(i,"md",{id:"Increasing-Digits",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u6570\u4f4dDP",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Increasing-Digits.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Increasing-Digits.md",code:[{language:"py",text:"\nclass Solution:\n    def solve(self, n):\n        dp = [[0] * 10 for _ in range(n)]\n        dp[0] = [0] + [1] * 9\n\n        for i in range(1, n):\n            for j in range(1, 10):\n                for k in range(j):\n                    dp[i][j] += dp[i - 1][k]\n        return sum(dp[-1])\n\n"}]}),Object(f.a)(i,"md",{id:"Kth-Pair-Distance",name:"md",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Kth-Pair-Distance.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Kth-Pair-Distance.md",code:[{language:"py",text:"\nclass Solution:\n    def solve(self, A, k):\n        A.sort()\n        h = [(A[i] - A[i-1], i-1,i) for i in range(1, len(A))]\n        heapq.heapify(h)\n\n        while True:\n            top, i, j = heapq.heappop(h)\n            if not k: return top\n            k -= 1\n            if j + 1 < len(A): heapq.heappush(h, (A[j+1] - A[i], i, j + 1))\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, A, k):\n        A.sort()\n        def count_not_greater(diff):\n            i = ans = 0\n            for j in range(1, len(A)):\n                while A[j] - A[i] > diff:\n                    i += 1\n                ans += j - i\n            return ans\n        l, r = 0, A[-1] - A[0]\n\n        while l <= r:\n            mid = (l + r) // 2\n            if count_not_greater(mid) > k:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\n"}]}),Object(f.a)(i,"md",{id:"Largest-Equivalent-Set-of-Pairs",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Largest-Equivalent-Set-of-Pairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Largest-Equivalent-Set-of-Pairs.md",code:[{language:"py",text:'\nclass Solution:\n    def solve(self, nums):\n        n = len(nums)\n\n        @lru_cache(None)\n        def dp(i, diff):\n            if i == n:\n                return 0 if diff == 0 else float("-inf")\n            return max(\n                dp(i + 1, diff),\n                dp(i + 1, diff - nums[i]),\n                dp(i + 1, diff + nums[i]) + nums[i],\n            )\n\n        return dp(0, 0)\n'}]}),Object(f.a)(i,"md",{id:"Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8fde\u7eed\u6027DP",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md",code:[{language:"py",text:"\ndp[i][0] = dp[i-1][0] + 1\ndp[i][1] = dp[i-1][1] + 1\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, nums):\n        n = len(nums)\n        if not n: return 0\n        dp = [[1, 0] for _ in range(n)]\n        ans = 1\n\n        for i in range(1,n):\n            if nums[i] > nums[i-1]:\n                dp[i][0] = dp[i-1][0] + 1\n                dp[i][1] = dp[i-1][1] + 1\n            else:\n                dp[i][0] = 1\n                dp[i][1] = 1\n            if i > 1 and nums[i] > nums[i-2]:\n                dp[i][1] = max(dp[i][1], 1 + dp[i-2][0])\n            ans = max(ans, dp[i][0], dp[i][1])\n\n        return ans\n\n"}]}),Object(f.a)(i,"md",{id:"Minimum-Dropping-Path-Sum",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md "\u52a8\u6001\u89c4\u5212"',color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Minimum-Dropping-Path-Sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Dropping-Path-Sum.md",code:[{language:"py",text:'\nclass Solution:\n    def solve(self, matrix):\n        dp = [(0, -1)]\n        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            next_dp = [(float("inf"), -1), (float("inf"), -1)]# (smallest, 2nd smallest)\n            for j in range(n):\n                for v, k in dp:\n                    if k == j:\n                        continue\n                    nxt = matrix[i][j] + v\n                    if nxt < next_dp[0][0]:\n                        next_dp = [(nxt, j), next_dp[0]]\n                    elif nxt < next_dp[1][0]:\n                        next_dp[1] = (nxt, j)\n                    break\n            dp = next_dp # rolling array\n        return dp[0][0]\n\n'}]}),Object(f.a)(i,"md",{id:"Minimum-Light-Radius",name:"md",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Minimum-Light-Radius.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Minimum-Light-Radius.md",code:[{language:"py",text:"\ndef possible(diameter):\n    start = nums[0]\n    end = start + diameter\n    for i in range(LIGHTS):\n        idx = bisect_right(nums, end)\n        if idx >= N:\n            return True\n        start = nums[idx]\n        end = start + diameter\n    return False\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, nums):\n        nums.sort()\n        N = len(nums)\n        if N <= 3:\n            return 0\n        LIGHTS = 3\n        # \u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u76f4\u5f84\uff0c\u56e0\u6b64\u6700\u7ec8\u8fd4\u56de\u9700\u8981\u9664\u4ee5 2\n        def possible(diameter):\n            start = nums[0]\n            end = start + diameter\n            for i in range(LIGHTS):\n                idx = bisect_right(nums, end)\n                if idx >= N:\n                    return True\n                start = nums[idx]\n                end = start + diameter\n            return False\n\n        l, r = 0, nums[-1] - nums[0]\n        while l <= r:\n            mid = (l + r) // 2\n            if possible(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l / 2\n"}]}),Object(f.a)(i,"md",{id:"Number-Stream-to-Intervals",name:"md",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6709\u5e8f\u54c8\u5e0c\u8868",link:null,color:"purple"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Number-Stream-to-Intervals.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Number-Stream-to-Intervals.md",code:[{language:"py",text:"\ns.add(1)\ns.add(3)\ns.add(2)\ns.add(9)\n\n"},{language:"py",text:"\ns.add(1) # [ [1,1] ]\ns.add(3) # [ [1,1], [3,3] ]\ns.add(2) # [ [1,1], [2,2], [3,3] ] \u53ef\u5408\u5e76\u4e3a [ [1,3] ]\ns.add(9) # [ [1,3], [9,9] ]\n"},{language:"py",text:"\nfrom sortedcontainers import SortedDict\n\n\nclass StreamSummary:\n    def __init__(self):\n        self.start = SortedDict()\n        self.end = SortedDict()\n\n    def add(self, val):\n        if val - 1 in self.end and val + 1 in self.start:\n            # [a, val-1] + [val,val] + [val+1, b] -> [a, b]\n            self.end[self.start[val + 1]] = self.end[val - 1]\n            self.start[self.end[val - 1]] = self.start[val + 1]\n            del self.start[val + 1]\n            del self.end[val - 1]\n        elif val - 1 in self.end:\n            # [a, val -1] + [val, val] -> [a, val]\n            self.end[val] = self.end[val - 1]\n            self.start[self.end[val]] = val\n            del self.end[val - 1]\n        elif val + 1 in self.start:\n            # [val,val] + [val+1, b] -> [val, b]\n            self.start[val] = self.start[val + 1]\n            self.end[self.start[val]] = val\n            del self.start[val + 1]\n        else:\n            self.start[val] = val\n            self.end[val] = val\n\n    def get(self):\n        # iterate start or end get same correct answer\n        ans = []\n        for s, e in self.start.items():\n            ans.append([s, e])\n        return ans\n\n"}]}),Object(f.a)(i,"md",{id:"Number-of-Substrings-with-Single-Character-Difference",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5efa\u7acb\u524d\u540e\u7f00dp\u6570\u7ec4\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u524d\u540e\u7f00\u7684\u7b1b\u5361\u5c14\u79ef",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Number-of-Substrings-with-Single-Character-Difference.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Number-of-Substrings-with-Single-Character-Difference.md",code:[{language:"py",text:"\nclass Solution:\n    def solve(self, s, t):\n        ans = 0\n        for i in range(len(s)):\n            for j in range(len(t)):\n                mismatches = 0\n                for k in range(min(len(s) - i, len(t) - j)):\n                    mismatches += s[i + k] != t[j + k]\n                    if mismatches == 1:\n                        ans += 1\n                    elif mismatches > 1:\n                        break\n        return ans\n\n"},{language:"py",text:"\n\nclass Solution:\n    def solve(self, s, t):\n        m, n = len(s), len(t)\n        prefix = [[0] * (n + 1) for _ in range(m + 1)]\n        suffix = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    prefix[i][j] = prefix[i - 1][j - 1] + 1\n\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if s[i] == t[j]:\n                    suffix[i][j] = suffix[i + 1][j + 1] + 1\n\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] != t[j - 1]:\n                    ans += (prefix[i - 1][j - 1] + 1) * (suffix[i][j] + 1)\n        return ans\n\n"}]}),Object(f.a)(i,"md",{id:"Sort-String-by-Flipping",name:"md",pre:[{text:"\u65e0",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Sort-String-by-Flipping.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Sort-String-by-Flipping.md",code:[{language:"py",text:"\nans = n\nfor i in range(n):\n    # \u5982\u679c i \u662f\u5206\u754c\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6\u9700\u8981\u7ffb\u8f6c\u591a\u5c11\u6b21\uff1f\u5047\u8bbe\u6211\u4eec\u6c42\u51fa\u6765\u662f\u9700\u8981\u7ffb\u8f6c x \u6b21\n    ans = min(ans, x)\nreturn ans\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, s):\n        x_count = y_count = 0\n        ans = len(s)\n        for c in s:\n            x_count += c == 'x'\n        for c in s:\n            x_count -= c == 'x'\n            ans = min(ans, x_count + y_count)\n            y_count += c == 'y'\n        return ans\n\n"}]}),Object(f.a)(i,"md",{id:"Triple-Inversion",name:"md",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/Triple-Inversion.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/Triple-Inversion.md",code:[{language:"py",text:"\nclass Solution:\n    def solve(self, A):\n        ans = 0\n        for i in range(len(A)):\n            for j in range(i+1,len(A)):\n                if A[i] > A[j] * 3: ans += 1\n        return ans\n"},{language:"py",text:"\nd = []\nfor a in A:\n    bisect.insort(d, a)\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, A):\n        d = []\n        ans = 0\n\n        for a in A:\n            i = bisect.bisect_right(d, a * 3)\n            ans += len(d) - i\n            bisect.insort(d, a)\n\n"},{language:"py",text:"\nfrom sortedcontainers import SortedList\nclass Solution:\n    def solve(self, A):\n        d = SortedList()\n        ans = 0\n\n        for a in A:\n            i = d.bisect_right(a * 3)\n            ans += len(d) - i\n            d.add(a)\n        return ans\n"},{language:"py",text:"\n\ndef mergeTwo(nums1, nums2):\n    res = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums[j]:\n            res.append(nums[i])\n            i += 1\n        else:\n            res.append(nums[j])\n            j += 1\n    while i < len(nums1) :\n        res.append(num[i])\n        i += 1\n    while j < len(nums1) :\n        res.append(num[j])\n        j += 1\n    return res\n\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, nums: List[int]) -> int:\n        self.cnt = 0\n        def merge(nums, start, mid, end):\n            i, j, temp = start, mid + 1, []\n            while i <= mid and j <= end:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    self.cnt += mid - i + 1\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= end:\n                temp.append(nums[j])\n                j += 1\n\n            for i in range(len(temp)):\n                nums[start + i] = temp[i]\n\n\n        def mergeSort(nums, start, end):\n            if start >= end: return\n            mid = (start + end) >> 1\n            mergeSort(nums, start, mid)\n            mergeSort(nums, mid + 1, end)\n            merge(nums, start, mid,  end)\n        mergeSort(nums, 0, len(nums) - 1)\n        return self.cnt\n"},{language:"py",text:"\nclass Solution:\n    def solve(self, nums) -> int:\n        self.cnt = 0\n        def merge(nums, start, mid, end, temp):\n            i, j = start, mid + 1\n            while i <= mid and j <= end:\n                if nums[i] <=  nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            # \u9632\u4f4f\n            # \u8fd9\u91cc\u4ee3\u7801\u5f00\u59cb\n            ti, tj = start, mid + 1\n            while ti <= mid and tj <= end:\n                if nums[ti] <=  3 * nums[tj]:\n                    ti += 1\n                else:\n                    self.cnt += mid - ti + 1\n                    tj += 1\n            # \u8fd9\u91cc\u4ee3\u7801\u7ed3\u675f\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= end:\n                temp.append(nums[j])\n                j += 1\n            for i in range(len(temp)):\n                nums[start + i] = temp[i]\n            temp.clear()\n\n\n        def mergeSort(nums, start, end, temp):\n            if start >= end: return\n            mid = (start + end) >> 1\n            mergeSort(nums, start, mid, temp)\n            mergeSort(nums, mid + 1, end, temp)\n            merge(nums, start, mid,  end, temp)\n        mergeSort(nums, 0, len(nums) - 1, [])\n        return self.cnt\n"}]}),Object(f.a)(i,"md",{id:"binode-lcci",name:"md",pre:[{text:"\u4e8c\u53c9\u67e5\u627e\u6811",link:null,color:"purple"},{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u4e8c\u53c9\u6811\u7684\u904d\u5386",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/binary-tree-traversal.md",color:"red"}],keyPoints:[{text:"\u6307\u9488\u64cd\u4f5c",link:null,color:"blue"},{text:"\u8fd4\u56de\u503c\u7684\u5904\u7406",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/binode-lcci.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/binode-lcci.md",code:[{language:"py",text:"\ncur.left = None\npre.right = cur\npre = cur\n"},{language:"py",text:"\nself.pre = None\ndef dfs(root):\n    dfs(root.left)\n    # \u4e0a\u9762\u7684\u6307\u9488\u6539\u53d8\u903b\u8f91\u5199\u5230\u8fd9\u91cc\n    self.pre = root\n    dfs(root.right)\n\n"},{language:"py",text:"\n\n    self.pre = self.ans = None\n    def dfs(root):\n        if not root: return\n        dfs(root.left)\n        root.left = None\n        if self.pre: self.pre.right = root\n        # \u5f53\u7b2c\u4e00\u6b21\u6267\u884c\u5230\u4e0b\u9762\u8fd9\u4e00\u884c\u4ee3\u7801\uff0c\u6070\u597d\u662f\u5728\u6700\u5de6\u4e0b\u89d2\uff0c\u6b64\u65f6 self.pre = None\uff0c\u5176\u4ed6\u4efb\u4f55\u65f6\u5019 self.pre \u90fd\u4e0d\u662f None\u3002\n        if self.pre is None: self.ans = root\n        self.pre = root\n        dfs(root.right)\n"},{language:"py",text:"\nclass Solution:\n    def convertBiNode(self, root: TreeNode) -> TreeNode:\n        self.pre = self.ans = None\n        def dfs(root):\n            if not root: return\n            dfs(root.left)\n            root.left = None\n            if self.pre: self.pre.right = root\n            if self.pre is None: self.ans = root\n            self.pre = root\n\n            dfs(root.right)\n        dfs(root)\n        return self.ans\n"}]}),Object(f.a)(i,"md",{id:"consecutive-wins",name:"md",pre:[{text:"\u9012\u5f52\u6811",link:null,color:"volcano"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/consecutive-wins.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/consecutive-wins.md",code:[{language:"py",text:"\nclass Solution:\n    def solve(self, n, k):\n        @lru_cache(None)\n        def dp(i, cnt):\n            if i == n:\n                return 1\n            ans = dp(i + 1, 0)  # place L\n            if cnt < k:\n                ans += dp(i + 1, cnt + 1)  # place W if I can\n            return ans\n\n        return dp(0, 0) % (10 ** 9 + 7)\n"}]}),Object(f.a)(i,"md",{id:"get-kth-magic-number-lcci",name:"md",pre:[{text:"\u5806",link:null,color:"green"},{text:"\u72b6\u6001\u673a",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u53bb\u91cd",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/get-kth-magic-number-lcci.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/get-kth-magic-number-lcci.md",code:[{language:"py",text:"\nfrom heapq import heappop, heappush\nclass Solution:\n    def getKthMagicNumber(self, k: int) -> int:\n        heap = [1]\n        numbers = set()\n        # \u6bcf\u6b21\u4ece\u5c0f\u9876\u5806\u53d6\u4e00\u4e2a\uff0c \u53d6 k \u6b21\u5373\u53ef\n        while k:\n            cur = heappop(heap)\n            if cur not in numbers:\n                k -= 1\n                heappush(heap, cur * 3)\n                heappush(heap, cur * 5)\n                heappush(heap, cur * 7)\n            numbers.add(cur)\n        return cur\n\n"},{language:"py",text:"\nclass Solution:\n    def getKthMagicNumber(self, k: int) -> int:\n        p3 = p5 = p7 = 0\n        state = [1] + [0] * (k - 1)\n\n        for i in range(1, k):\n            state[i] = min(state[p3] * 3, state[p5] * 5, state[p7] * 7)\n            if 3 * state[p3] == state[i]: p3 += 1\n            if 5 * state[p5] == state[i]: p5 += 1\n            if 7 * state[p7] == state[i]: p7 += 1\n        return state[-1]\n"}]}),Object(f.a)(i,"meChtZ",{id:"lcp20",name:"meChtZ",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u56de\u6eaf",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/backtrack.md",color:"green"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u9006\u5411\u601d\u7ef4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/lcp20.meChtZ.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/lcp20.meChtZ.md",code:[{language:"py",text:"\ndef dfs(pos):\n if pos === target: return 0\n if pos > target: return float('inf')\n ans = (target - pos) * inc\n for jump in jumps:\n      ans = min(ans, \u4e58\u5750\u672c\u6b21\u516c\u4ea4\u7684\u82b1\u8d39)\n  return ans\ndfs(0)\n"},{language:"py",text:"\n\nclass\xa0Solution:\n\xa0\xa0\xa0\xa0def\xa0busRapidTransit(self,\xa0target:\xa0int,\xa0inc:\xa0int,\xa0dec:\xa0int,\xa0jumps:\xa0List[int],\xa0cost:\xa0List[int])\xa0->\xa0int:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0@lru_cache(None)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0def\xa0dfs(pos):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0pos\xa0==\xa00:\xa0return\xa00\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0pos\xa0==\xa01:\xa0return\xa0inc\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ans\xa0=\xa0pos\xa0*\xa0inc\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0i,\xa0jump\xa0in\xa0enumerate(jumps):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pre_pos,\xa0left\xa0=\xa0pos\xa0//\xa0jump,\xa0pos\xa0%\xa0jump\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if\xa0left\xa0==\xa00:\xa0ans\xa0=\xa0min(ans,\xa0cost[i]\xa0+\xa0dfs(pre_pos))\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else:\xa0ans\xa0=\xa0min(ans,\xa0cost[i]\xa0+\xa0dfs(pre_pos)\xa0+\xa0inc\xa0*\xa0left,\xa0cost[i]\xa0+\xa0dfs(pre_pos\xa0+\xa01)\xa0+\xa0dec\xa0*\xa0(jump\xa0-\xa0left))\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0ans\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return\xa0dfs(target)\xa0%\xa01000000007\n\n"}]}),Object(f.a)(i,"Za25hA",{id:"lcp21",name:"Za25hA",pre:[{text:"BFS",link:null,color:"purple"},{text:"DFS",link:null,color:"red"},{text:"\u56fe\u8bba",link:null,color:"gold"}],keyPoints:[{text:"\u660e\u786e\u8fd9\u9053\u9898\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u73af",link:null,color:"blue"},{text:"\u5f53\u4e14\u4ec5\u5f53\u73af\u7684\u957f\u5ea6\u5927\u4e8e3\uff0cA\u5230\u73af\u5165\u53e3\u7684\u8ddd\u79bb\u5927\u4e8eB\u5230\u73af\u5165\u53e3\u7684\u8ddd\u79bb+1\u624d\u6c38\u8fdc\u8ffd\u4e0d\u4e0a",link:null,color:"blue"},{text:"\u5982\u4f55\u68c0\u6d4b\u73af\uff0c\u5982\u679c\u8ba1\u7b97\u5355\u70b9\u5230\u56fe\u4e2d\u6240\u6709\u70b9\u7684\u8ddd\u79bb",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/lcp21.Za25hA.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/lcp21.Za25hA.md",code:[{language:"py",text:'\nclass Solution:\n    def chaseGame(self, edges: List[List[int]], startA: int, startB: int) -> int:\n        n = len(edges)\n        graph = collections.defaultdict(list)\n        for fr, to in edges:\n            graph[fr].append(to)\n            graph[to].append(fr)\n\n        def bfs(fr, find_entry=False):\n            dist = collections.defaultdict(lambda: float("inf"))\n            q = collections.deque([fr])\n            steps = 0\n            nonlocal entry\n            while q:\n                for i in range(len(q)):\n                    cur = q.popleft()\n                    if cur in dist:\n                        continue\n                    if find_entry and cur in circle:\n                        entry = cur\n                        return\n                    dist[cur] = steps\n                    for neibor in graph[cur]:\n                        q.append(neibor)\n                steps += 1\n            return dist\n\n        parent = {}\n        depth = collections.defaultdict(int)  # \u53ef\u4ee5\u88ab\u7528\u4f5c visited\n        circle = set()\n        entry = 0  # \u73af\u7684\u5165\u53e3\n\n        def cal_circle(node, p):\n            parent[node] = p\n            depth[node] = depth[p] + 1\n            for neibor in graph[node]:\n                if neibor == p:\n                    continue\n                if neibor not in depth:\n                    cal_circle(neibor, node)\n                elif depth[neibor] < depth[node]:\n                    # \u68c0\u6d4b\u5230\u4e86\u73af\n                    cur = node\n                    while cur != neibor:\n                        circle.add(cur)\n                        cur = parent[cur]\n                    circle.add(neibor)\n\n        cal_circle(1, 0)\n\n        d1, d2 = bfs(startA), bfs(startB)\n        bfs(startB, True)\n\n        if len(circle) > 3:\n            if d1[entry] > d2[entry] + 1:\n                return -1\n        if d1[startA] == 1:\n            return 1\n        ans = 1\n        for i in range(1, n + 1):\n            if d1[i] - d2[i] > 1:\n                ans = max(ans, d1[i])\n        return ans\n\n'}]}),Object(f.a)(i,"md",{id:"max-black-square-lcci",name:"md",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:'https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md "\u52a8\u6001\u89c4\u5212"',color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/max-black-square-lcci.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/max-black-square-lcci.md",code:[{language:"java",text:"\nclass Solution {\n    public int[] findSquare(int[][] matrix) {\n        int [] res = new int [0];\n        int [][][] dp = new int [2][matrix.length+1][matrix[0].length+1];\n        int max = 0\n        for(int i=1;i<=matrix.length;i++){\n            for(int j=1;j<=matrix[0].length;j++){\n                if(matrix[i-1][j-1]==0){\n                    dp[0][i][j] = dp[0][i-1][j]+1;\n                    dp[1][i][j] = dp[1][i][j-1]+1;\n                    int bound = Math.min(dp[0][i][j], dp[1][i][j]);\n                    for(int k=0;k<bound;k++){\n                        if(dp[1][i-k][j]>=k+1&&dp[0][i][j-k]>=k+1){\n                            if(k+1>max){\n                                res = new int [3];\n                                max = k+1;\n                                res[0] = i-k-1;\n                                res[1] = j-k-1;\n                                res[2] = max;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n"},{language:"py",text:"\nclass Solution:\n    def findSquare(self, matrix: List[List[int]]) -> List[int]:\n        n = len(matrix)\n        dp = [[[0, 0] for _ in range(n + 1)] for _ in range(n + 1)]\n        ans = []\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if matrix[i - 1][j - 1] == 0:\n                    dp[i][j][0] = dp[i-1][j][0] + 1\n                    dp[i][j][1] = dp[i][j-1][1] + 1\n                    upper = min(dp[i][j][0], dp[i][j][1])\n                    for k in range(upper):\n                        if min(dp[i-k][j][1], dp[i][j-k][0]) >= k + 1:\n                            if not ans or k + 1 > ans[2]:\n                                ans = [i-k-1, j-k-1, k + 1]\n\n        return ans\n"}]}),Object(f.a)(i,"md",{id:"sub-sort-lcci",name:"md",pre:[{text:"\u65e0",link:null,color:"purple"}],keyPoints:[{text:"\u4e24\u6b21\u904d\u5386",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/sub-sort-lcci.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/sub-sort-lcci.md",code:[{language:"py",text:"\n\nclass Solution:\n    def subSort(self, A: List[int]) -> List[int]:\n        max_v, min_v = float('-inf'), float('inf')\n        right = left = -1\n        for i in range(len(A)):\n            if A[i] < max_v:\n                right = i\n            max_v = max(max_v, A[i])\n        for i in range(len(A) - 1, -1, -1):\n            if A[i] > min_v:\n                left = i\n            min_v = min(min_v, A[i])\n        return [-1,-1] if right - left == len(A) - 1 else [left, right]\n\n\n"}]}),i),h={};Object.values(g).forEach((function(n){n.companies.forEach((function(e){void 0===h[e.name]&&(h[e.name]=[]),h[e.name].push(n.name)}))}));var b={problems:g,company:h,selected:{"remove-duplicate-letters":{id:316,name:"remove-duplicate-letters",title:"\u4e00\u62db\u5403\u904d\u529b\u6263\u56db\u9053\u9898\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u88ab\u5957\u8def\u5566\uff5e",url:"https://github.com/azl397985856/leetcode/blob/master/selected/a-deleted.md"},"create-maximum-number":{id:321,name:"create-maximum-number",title:"\u4e00\u62db\u5403\u904d\u529b\u6263\u56db\u9053\u9898\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u88ab\u5957\u8def\u5566\uff5e",url:"https://github.com/azl397985856/leetcode/blob/master/selected/a-deleted.md"},"remove-k-digits":{id:402,name:"remove-k-digits",title:"\u4e00\u62db\u5403\u904d\u529b\u6263\u56db\u9053\u9898\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u88ab\u5957\u8def\u5566\uff5e",url:"https://github.com/azl397985856/leetcode/blob/master/selected/a-deleted.md"},"smallest-subsequence-of-distinct-characters":{id:1081,name:"smallest-subsequence-of-distinct-characters",title:"\u4e00\u62db\u5403\u904d\u529b\u6263\u56db\u9053\u9898\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u88ab\u5957\u8def\u5566\uff5e",url:"https://github.com/azl397985856/leetcode/blob/master/selected/a-deleted.md"},"unique-substrings-in-wraparound-string":{id:467,name:"unique-substrings-in-wraparound-string",title:"\u3010\u897f\u6cd5\u7684\u5237\u9898\u79d8\u7c4d\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",url:"https://github.com/azl397985856/leetcode/blob/master/selected/atMostK.md"},"number-of-subarrays-with-bounded-maximum":{id:795,name:"number-of-subarrays-with-bounded-maximum",title:"\u3010\u897f\u6cd5\u7684\u5237\u9898\u79d8\u7c4d\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",url:"https://github.com/azl397985856/leetcode/blob/master/selected/atMostK.md"},"fruit-into-baskets":{id:904,name:"fruit-into-baskets",title:"\u3010\u897f\u6cd5\u7684\u5237\u9898\u79d8\u7c4d\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",url:"https://github.com/azl397985856/leetcode/blob/master/selected/atMostK.md"},"subarrays-with-k-different-integers":{id:992,name:"subarrays-with-k-different-integers",title:"\u3010\u897f\u6cd5\u7684\u5237\u9898\u79d8\u7c4d\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",url:"https://github.com/azl397985856/leetcode/blob/master/selected/atMostK.md"},"corporate-flight-bookings":{id:1109,name:"corporate-flight-bookings",title:"\u3010\u897f\u6cd5\u7684\u5237\u9898\u79d8\u7c4d\u3011\u4e00\u6b21\u641e\u5b9a\u524d\u7f00\u548c",url:"https://github.com/azl397985856/leetcode/blob/master/selected/atMostK.md"},"serialize-and-deserialize-bst":{id:449,name:"serialize-and-deserialize-bst",title:"\u4e00\u6587\u5e26\u4f60\u770b\u61c2\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"serialize-and-deserialize-binary-tree":{id:297,name:"serialize-and-deserialize-binary-tree",title:"\u4e00\u6587\u5e26\u4f60\u770b\u61c2\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"longest-increasing-subsequence":{id:300,name:"longest-increasing-subsequence",title:"\u7a7f\u4e0a\u8863\u670d\u6211\u5c31\u4e0d\u8ba4\u8bc6\u4f60\u4e86\uff1f\u6765\u804a\u804a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"non-overlapping-intervals":{id:435,name:"non-overlapping-intervals",title:"\u7a7f\u4e0a\u8863\u670d\u6211\u5c31\u4e0d\u8ba4\u8bc6\u4f60\u4e86\uff1f\u6765\u804a\u804a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"maximum-length-of-pair-chain":{id:646,name:"maximum-length-of-pair-chain",title:"\u7a7f\u4e0a\u8863\u670d\u6211\u5c31\u4e0d\u8ba4\u8bc6\u4f60\u4e86\uff1f\u6765\u804a\u804a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"minimum-number-of-arrows-to-burst-balloons":{id:452,name:"minimum-number-of-arrows-to-burst-balloons",title:"\u7a7f\u4e0a\u8863\u670d\u6211\u5c31\u4e0d\u8ba4\u8bc6\u4f60\u4e86\uff1f\u6765\u804a\u804a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",url:"https://github.com/azl397985856/leetcode/blob/master/selected/serialize.md"},"maximum-length-of-repeated-subarray":{id:718,name:"maximum-length-of-repeated-subarray",title:"\u4f60\u7684\u8863\u670d\u6211\u6252\u4e86 - \u300a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u300b",url:"https://github.com/azl397985856/leetcode/blob/master/selected/LCS.md"},"longest-common-subsequence":{id:1143,name:"longest-common-subsequence",title:"\u4f60\u7684\u8863\u670d\u6211\u6252\u4e86 - \u300a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u300b",url:"https://github.com/azl397985856/leetcode/blob/master/selected/LCS.md"},"uncrossed-lines":{id:1035,name:"uncrossed-lines",title:"\u4f60\u7684\u8863\u670d\u6211\u6252\u4e86 - \u300a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u300b",url:"https://github.com/azl397985856/leetcode/blob/master/selected/LCS.md"},"maximum-subarray":{id:53,name:"maximum-subarray",title:"\u4e00\u6587\u770b\u61c2\u300a\u6700\u5927\u5b50\u5e8f\u5217\u548c\u95ee\u9898\u300b",url:"https://github.com/azl397985856/leetcode/blob/master/selected/LSS.md"}}},x=t(194),k=t.n(x),v=t(195),y=t.n(v),w=t(36),j=t(643),S=t(222),_=t(111),L=t(112),N=t(132),z=t(128),q=t(645),T=t(637),A=function(n){Object(N.a)(t,n);var e=Object(z.a)(t);function t(){return Object(_.a)(this,t),e.apply(this,arguments)}return Object(L.a)(t,[{key:"render",value:function(){var n=this.props,e=n.language,t=void 0===e?"":e,i=n.value,r=void 0===i?"":i;return t||(t=""),"py"!==t.toLowerCase()&&"python3"!==t.toLowerCase()||(t="python"),"js"===t.toLowerCase()&&(t="javascript"),console.log(t),l.a.createElement(q.a,{language:t,style:T.a},r)}}]),t}(r.PureComponent);A.defaultProps={language:null};var P=A,M=t(21),C=j.a.Panel;function I(n){var e=n.codes,t=n.renderHeader;return l.a.createElement(j.a,null,e.map((function(n){return l.a.createElement(C,{key:n.text,header:l.a.createElement("div",{className:"row"},l.a.createElement("span",{className:"language language-js"},n.language),l.a.createElement(m.a,{type:"primary",size:"small",onClick:function(e){e.stopPropagation(),Object(M.b)(n.text,(function(){S.b.success("\u590d\u5236\u6210\u529f\uff5e")}))}},"\u590d\u5236"),t&&t())},l.a.createElement(P,{value:n.text,language:n.language}))})))}var E=t(67),D=t(646);function F(n){var e=n.link,t=n.text,i=n.style,r=n.color;return null!==e?l.a.createElement(m.a,{type:"link",href:e,target:"_blank"},t):l.a.createElement("div",{style:Object(E.a)({display:"inline-block"},i)},l.a.createElement(D.a,{color:r},t))}var B=u.a.TabPane,O=j.a.Panel,R=b.problems,K=b.company;function H(n){var e=n.problemId;return l.a.createElement(u.a,{defaultActiveKey:"0"},l.a.createElement(B,{tab:"\u524d\u7f6e\u77e5\u8bc6",key:"pre"},R[e].pre.map((function(n){var e=n.link,t=n.text,i=n.color;return l.a.createElement(F,{key:t,text:t,link:e,color:i})}))),l.a.createElement(B,{tab:"\u5173\u952e\u70b9",key:"key"},0===R[e].keyPoints.length&&l.a.createElement(r.Fragment,null,"\u6682\u65e0\u5173\u952e\u70b9\uff0c",l.a.createElement("a",{href:w.c,target:"_blank",rel:"noopener noreferrer"},"\u70b9\u51fb\u53cd\u9988")),l.a.createElement("ul",null,R[e].keyPoints.map((function(n){var e=n.link,t=n.text;return l.a.createElement("li",{key:t},e?l.a.createElement("a",{href:e},"text"):t)})))),l.a.createElement(B,{tab:"\u516c\u53f8",key:"company"},0===R[e].companies.length&&l.a.createElement(r.Fragment,null,"\u6682\u65e0\u516c\u53f8\u8d44\u6599\uff0c",l.a.createElement("a",{href:w.a,target:"_blank",rel:"noopener noreferrer"},"\u70b9\u51fb\u53cd\u9988")),l.a.createElement(j.a,null,R[e].companies.map((function(n){var e=n.name;return l.a.createElement(O,{header:e,key:e},l.a.createElement("ul",null,K[e].map((function(n){return l.a.createElement("li",{key:e},l.a.createElement(m.a,{type:"link",href:"".concat(w.d,"/problems/").concat(n),target:"_blank"},n))}))))})))),l.a.createElement(B,{tab:"\u9898\u89e3",key:"solution"},l.a.createElement(m.a,{type:"link",href:R[e].solution,target:"_blank",rel:"noopener noreferrer"},"\u524d\u5f80 github \u9898\u89e3\uff08\u56fd\u5916\uff09"),l.a.createElement(m.a,{type:"link",href:R[e].giteeSolution,target:"_blank"},"\u524d\u5f80 gitee \u9898\u89e3\uff08\u56fd\u5185\uff09")),l.a.createElement(B,{tab:"\u4ee3\u7801",key:"code"},l.a.createElement("div",{className:"code-block"},l.a.createElement(j.a,null,l.a.createElement(I,{codes:R[e].code})))),l.a.createElement(B,{tab:"\u53ef\u89c6\u5316\u8c03\u8bd5\uff08\u656c\u8bf7\u671f\u5f85\uff09",key:"debug",disabled:!0}),l.a.createElement(B,{tab:"\u6211\u8981\u53cd\u9988",key:"feedback"},l.a.createElement("a",{href:w.c,target:"_blank",rel:"noopener noreferrer",style:{marginRight:"20px"}},"\u6211\u60f3\u53cd\u9988\u95ee\u9898"),l.a.createElement("a",{href:w.a,target:"_blank",rel:"noopener noreferrer",style:{marginRight:"20px"}},"\u6211\u60f3\u8d21\u732e\u516c\u53f8\u548c\u5c97\u4f4d\u4fe1\u606f\uff08\u514d\u8d39\u83b7\u5f97\u9898\u76ee\u54a8\u8be2\u670d\u52a1\uff09"),l.a.createElement("a",{href:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfcuzagjalj30p00dwabs.jpg",target:"_blank",rel:"noopener noreferrer"},"\u5173\u6ce8\u66f4\u65b0")))}var V=t(129),U={"binary-search":{desc:"\n    \u5982\u679c\u8ba9\u6211\u7528\u4e00\u53e5\u8bdd\u603b\u7ed3\u4e8c\u5206\u6cd5\uff0c\u6211\u4f1a\u8bf4**\u4e8c\u5206\u6cd5\u662f\u4e00\u79cd\u8ba9\u672a\u77e5\u4e16\u754c\u65e0\u673a\u53ef\u4e58\u7684\u7b97\u6cd5**\u3002\u5373\u4e8c\u5206\u6cd5\u65e0\u8bba\u5982\u4f55\u6211\u4eec\u90fd\u53ef\u4ee5\u820d\u5f03\u4e00\u534a\u89e3\uff0c\u4e5f\u5c31\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u5c06\u89e3\u7a7a\u95f4\u780d\u534a\u3002\n    \u96be\u70b9\u5c31\u662f\u4e24\u70b9\uff1a**\u4ec0\u4e48\u6761\u4ef6** \u548c **\u820d\u5f03\u54ea\u90e8\u5206**\u3002\u8fd9\u662f\u4e8c\u5206\u6cd5\u6838\u5fc3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\n    \n    \u4ece\u6218\u672f\u4e0a\u6709\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u5206\u522b\u662f\u6700\u5de6\u63d2\u5165\u4e8c\u5206\u548c\u6700\u53f3\u63d2\u5165\u4e8c\u5206\u3002\n    \n    \u4ece\u6218\u7565\u4e0a\u6709\u56db\u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u80fd\u529b\u68c0\u6d4b\u4e8c\u5206\uff0c\u524d\u7f00\u548c\u4e8c\u5206\uff0c\u63d2\u5165\u6392\u5e8f\u4e8c\u5206\u548c\u8ba1\u6570\u4e8c\u5206\u3002\n    \n    \u4e24\u79cd\u7c7b\u578b\uff08\u6700\u5de6\u548c\u6700\u53f3\u63d2\u5165\uff09\u4e3b\u8981\u89e3\u51b3\u7684\u7684\u662f\uff1a**\u89e3\u7a7a\u95f4\u5df2\u7ecf\u660e\u786e\u51fa\u6765\u4e86\uff0c\u5982\u4f55\u7528\u4ee3\u7801\u627e\u51fa\u5177\u4f53\u7684\u89e3**\u3002\u800c\u56db\u5927\u5e94\u7528\u4e3b\u8981\u89e3\u51b3\u7684\u662f\uff1a**\u5982\u4f55\u6784\u9020\u89e3\u7a7a\u95f4**\u3002\u66f4\u591a\u7684\u60c5\u51b5\u5219\u662f\u5982\u4f55\u6784\u5efa\u6709\u5e8f\u5e8f\u5217\u3002\n\n    \u8fd9\u4e24\u90e8\u5206\u90fd\u662f\u5b9e\u64cd\u6027\u5f88\u5f3a\u7684\u5185\u5bb9\uff0c\u5728\u7406\u89e3\u8fd9\u4e24\u90e8\u5206\u5185\u5bb9\u7684\u540c\u65f6\uff0c\u8bf7\u5927\u5bb6\u52a1\u5fc5\u7262\u8bb0\u4e00\u4e2a\u4e2d\u5fc3**\u6298\u534a**\u3002\n    \n    \u66f4\u591a\u5185\u5bb9\u8bf7\u8bbf\u95ee\uff1ahttps://lucifer.ren/blog/2021/03/08/binary-search-1",items:[{title:"\u6700\u5de6/\u6700\u53f3\u4e8c\u5206",pic:void 0,problems:[{link:"https://leetcode-cn.com/problems/sqrtx",text:"69. x \u7684\u5e73\u65b9\u6839"},{link:"https://leetcode-cn.com/problems/first-bad-version/",text:"278. \u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c",desc:"\u6700\u5de6\u6700\u53f3\u601d\u8def\u4e00\u6837\uff0c\u5927\u5bb6\u7ec3\u4e60\u4e24\u9053\uff0c\u5b9e\u9645\u60c5\u51b5\u6839\u636e\u9898\u610f\u4f7f\u7528\u4e0d\u540c\u7684\u4e8c\u5206\u5373\u53ef\u3002"}],code:{language:"py",text:"\u4ee3\u7801\u53c2\u8003\uff1a\u4ee3\u7801\u6a21\u677f - \u4e8c\u5206\u6cd5"},keys:["\n      1. \u6700\u5de6\u4e8c\u5206\u4e0d\u65ad\u6536\u7f29\u53f3\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd4\u56de\u5de6\u8fb9\u754c\n      2. \u6700\u53f3\u4e8c\u5206\u4e0d\u65ad\u6536\u7f29\u5de6\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd4\u56de\u53f3\u8fb9\u754c\n      "]},{title:"\u80fd\u529b\u68c0\u6d4b\u4e8c\u5206",pic:void 0,problems:[{link:"https://binarysearch.com/problems/Minimum-Light-Radius",text:"\u6700\u5c0f\u706f\u534a\u5f84",desc:"\u7ecf\u5178\u80fd\u529b\u68c0\u6d4b\u4e8c\u5206\uff0c\u529b\u6263\u4e5f\u6709\u4e00\u9053\u7c7b\u4f3c\u9898"},{link:"https://leetcode-cn.com/problems/swim-in-rising-water",text:"778. \u6c34\u4f4d\u4e0a\u5347\u7684\u6cf3\u6c60\u4e2d\u6e38\u6cf3",desc:"DFS + \u4e8c\u5206\uff0c\u7c7b\u4f3c\u7684\u9898\u76ee\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u7b2c 1439 \u9898\u3002\u8fd9\u79cd\u9898\u5957\u8def\u90fd\u5f88\u50cf\uff0c\u96be\u5ea6\u5176\u5b9e\u4e5f\u4e0d\u7b97\u5927\u3002"}],code:{language:"py",text:"\ndef ability_test_bs(nums):\n  def possible(mid):\n    pass\n  l, r = 0, len(A) - 1\n  while l <= r:\n      mid = (l + r) // 2\n      # \u53ea\u6709\u8fd9\u91cc\u548c\u6700\u5de6\u4e8c\u5206\u4e0d\u4e00\u6837\n      if possible(mid): l = mid + 1\n      else: r = mid - 1\n  return l\n          "},keys:['\u5b9a\u4e49\u51fd\u6570 possible \u53c2\u6570\u662f mid\uff0c\u8fd4\u56de\u503c\u662f\u5e03\u5c14\u503c\u3002\u5916\u5c42\u6839\u636e\u8fd4\u56de\u503c\u8c03\u6574"\u89e3\u7a7a\u95f4"\u3002\u793a\u4f8b\u4ee3\u7801\u662f\u4ee5\u6700\u5de6\u4e8c\u5206\u4e3a\u4f8b\u7684\u3002\n      ']},{title:"\u524d\u7f00\u548c\u4e8c\u5206",pic:void 0,problems:[{link:"https://leetcode-cn.com/problems/count-of-range-sum/",text:"327. \u533a\u95f4\u548c\u7684\u4e2a\u6570"}],keys:["\n      \u5982\u679c\u6570\u7ec4\u662f\u975e\u8d1f\u7684\uff0c\u90a3\u4e48\u524d\u7f00\u548c\u5c31\u662f\u4e00\u4e2a\u5355\u8c03\u4e0d\u9012\u51cf\u6570\u7ec4\uff0c\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u57fa\u4e8e\u5b83\u6765\u505a\u4e8c\u5206\u3002\n      "]},{title:"\u63d2\u5165\u6392\u5e8f\u4e8c\u5206",pic:void 0,problems:[{link:"https://leetcode-cn.com/problems/reverse-pairs",text:"493. \u7ffb\u8f6c\u5bf9"},{link:"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof",text:"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{link:"https://lucifer.ren/blog/2020/06/20/LIS/",text:"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7cfb\u5217",desc:"\u7cfb\u5217\u7ecf\u5178\u9898\u76ee\uff0c\u503c\u5f97\u4e00\u505a"}],code:{language:"py",text:"\n  d = []\n  for a in A:\n      i = bisect.bisect_left(d, a)\n      if d and i < len(d):\n          d[i] = a\n      else:\n          d.append(a)"},keys:["\n      \u4e0d\u65ad\u63d2\u5165\u5e76\u7ef4\u62a4\u5e8f\u5217\u6709\u5e8f\uff0c\u8fdb\u800c\u5229\u7528\u6709\u5e8f\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002\n      "]},{title:"\u8ba1\u6570\u4e8c\u5206",pic:void 0,problems:[{link:"https://binarysearch.com/problems/Kth-Pair-Distance",text:"\u7b2ck\u5c0f\u7684\u8ddd\u79bb\u5bf9",desc:"\u5178\u578b\u7684\u8ba1\u6570\u4e8c\u5206\uff0c\u672c\u8d28\u4e0a\u4e5f\u662f\u80fd\u529b\u68c0\u6d4b\uff0c\u53ea\u4e0d\u8fc7\u9898\u91cf\u5927\uff0c\u5355\u72ec\u62c6\u51fa\u6765\u3002"}],code:{language:"py",text:"\ndef count_bs(nums, k):\n  def count_not_greater(mid):\n    pass\n  l, r = 0, len(A) - 1\n  while l <= r:\n      mid = (l + r) // 2\n      # \u53ea\u6709\u8fd9\u91cc\u548c\u6700\u5de6\u4e8c\u5206\u4e0d\u4e00\u6837\n      if count_not_greater(mid) > k: r = mid - 1\n      else: l = mid + 1\n  return l\n          "},keys:["\u672c\u8d28\u4e5f\u662f\u80fd\u529b\u68c0\u6d4b\uff0c\u56e0\u6b64\u548c\u80fd\u529b\u68c0\u6d4b\u6846\u67b6\u57fa\u672c\u4e00\u81f4\uff0c\u5927\u5bb6\u5bf9\u6bd4\u7406\u89e3\u4e00\u4e0b\u3002\n      "]}]},dp:{desc:"\n  \u540c\u4e00\u7c7b\u578b\u7684\u4e0d\u540c\u9898\u76ee\u6846\u67b6\u57fa\u672c\u4e00\u81f4\uff0c\u4f46\u7ec6\u8282\u7565\u6709\u4e0d\u540c\uff0c\u6a21\u677f\u4ee3\u7801\u4ec5\u4ee5\u67d0\u4e00\u79cd\u4e3a\u4f8b\u8fdb\u884c\u8bb2\u8ff0\uff0c\u5927\u5bb6\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5fae\u8c03\u3002\n  \n  \u52a8\u6001\u89c4\u5212\u4e09\u628a\u65a7\uff1a\u72b6\u6001\uff0c\u679a\u4e3e\uff0c\u8f6c\u79fb\u65b9\u7a0b\uff08\u9009\u62e9\uff09\u3002\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u9898\u76ee\uff0c\u6211\u90fd\u5c3d\u91cf\u6309\u7167\u8fd9\u4e09\u70b9\u7ed9\u5927\u5bb6\u63d0\u793a\u3002\n  \n  \u5f53\u7136\u8fd9\u4e2a\u5b66\u4e60\u8def\u7ebf\u662f\u7ed9\u6709\u4e00\u4e9b\u57fa\u7840\u7684\u4eba\u770b\u7684\uff0c\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u57fa\u7840\uff0c\u53ef\u4ee5\u770b\u4e0b\u76f8\u5173\u6587\u7ae0\uff0c\u4e4b\u540e\u6211\u4e5f\u4f1a\u5199\u4e00\u7bc7\u786c\u6838\u5957\u8def\u6587\u3002\n  ",items:[{title:"\u5355\u5b57\u7b26\u4e32\u578b",pic:"https://tva1.sinaimg.cn/large/0081Kckwly1glpjptuor0j31n00u0q8y.jpg",problems:[{link:"https://leetcode-cn.com/problems/re-space-lcci/",text:"\u9762\u8bd5\u9898 17.13. \u6062\u590d\u7a7a\u683c",desc:"\u7ec6\u8282\u600e\u4e48\u7ec3\uff1f+1\uff1f -1? \u600e\u4e48\u521d\u59cb\u5316\uff1f\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9053\u9898\u5b66\u4e60\u4e00\u4e0b~"},{link:"https://lucifer.ren/blog/2020/06/20/LIS/",text:"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7cfb\u5217",desc:"\u7cfb\u5217\u7ecf\u5178\u9898\u76ee\uff0c\u503c\u5f97\u4e00\u505a"}],code:{language:"py",text:"\n  dp = [0] * (n + 1)\n  for i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n      if \u4e00\u5b9a\u6761\u4ef6:dp[j] = \u9009\u62e9(dp[i], dp[j])\n      else: dp[i] = dp[i - 1]\n"},keys:["\n\u72b6\u6001\uff1a1. dp[i] \u8868\u793a\u4ee5 s[i] \u7ed3\u5c3e\u7684 xxxx\n     2. dp[i] \u8868\u793a\u5230 s[i] \u4e3a\u6b62\u7684 xxxx\n        ","\u679a\u4e3e\uff1a \u901a\u5e38\u90fd\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u4e00\u5c42\u5faa\u73af\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u53e6\u4e00\u5c42\u5faa\u73af\u56fa\u5b9a\u53f3\u7aef\u70b9\u8fdb\u884c\u679a\u4e3e","\u8f6c\u79fb\u65b9\u7a0b\uff1a\u6839\u636e\u9898\u76ee\u9009\u62e9\u662f\u5426\u548c s[j] \u7ed3\u5408\uff0c\u53d6\u6700\u5927\uff0c\u6700\u5c0f\u6216\u8ba1\u6570\u5373\u53ef"]},{title:"\u53cc\u5b57\u7b26\u4e32\u578b",pic:"https://tva1.sinaimg.cn/large/0081Kckwly1glpnd8ne27j31970u0gss.jpg",problems:[{link:"https://lucifer.ren/blog/2020/07/01/LCS/",text:"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7cfb\u5217",desc:"\u7cfb\u5217\u7ecf\u5178\u9898\u76ee\uff0c\u503c\u5f97\u4e00\u505a"},{link:"https://leetcode-cn.com/problems/edit-distance/",text:"72. \u7f16\u8f91\u8ddd\u79bb"},{link:"https://leetcode-cn.com/problems/regular-expression-matching/solution/chao-jian-dan-de-ji-yi-hua-di-gui-ji-bai-9010-zhen/",text:"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{link:"https://leetcode-cn.com/problems/wildcard-matching/solution/chao-ji-xiang-xi-ji-yi-hua-di-gui-tu-jie-dai-ni-yi/",text:"44. \u901a\u914d\u7b26\u5339\u914d"}],code:{language:"py",text:"\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if \u4e00\u5b9a\u6761\u4ef6:\n                  dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                  dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n"},keys:["\n\u72b6\u6001\uff1a1. dp[i][j] \u8868\u793a\u4ee5 s1[i],s2[j] \u7ed3\u5c3e\u7684 xxxx\n     2. dp[i][j] \u8868\u793a\u5230 s1[i],s2[j] \u4e3a\u6b62\u7684 xxxx\n        ","\u679a\u4e3e\uff1a\u901a\u5e38\u90fd\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u4e00\u5c42\u5faa\u73af\u56fa\u5b9a s1 \u7684\u53f3\u7aef\u70b9\uff0c\u53e6\u4e00\u5c42\u5faa\u73af\u56fa\u5b9a s2 \u7684\u53f3\u7aef\u70b9\u8fdb\u884c\u679a\u4e3e","\u72b6\u6001\u8f6c\u79fb\uff1a\u6839\u636e\u9898\u76ee\u4ee5\u53ca s[i]\uff0c s[j] \u7684\u5173\u7cfb\uff0c\u53d6\u6700\u5927\uff0c\u6700\u5c0f\u6216\u8ba1\u6570\u5373\u53ef"]},{title:"\u722c\u697c\u68af\u578b",pic:"https://tva1.sinaimg.cn/large/0081Kckwly1glpom6u30yj30u00v1n61.jpg",problems:[{text:"70. \u722c\u697c\u68af",link:"https://leetcode-cn.com/problems/climbing-stairs/"},{text:"198. \u6253\u5bb6\u52ab\u820d",link:"https://github.com/azl397985856/leetcode/blob/master/problems/198.house-robber.md"},{text:"337. \u6253\u5bb6\u52ab\u820d III",link:"https://github.com/azl397985856/leetcode/blob/master/problems/337.house-robber-iii.md"},{text:"62. \u4e0d\u540c\u8def\u5f84",link:"https://github.com/azl397985856/leetcode/blob/master/problems/62.unique-paths.md"},{text:"63. \u4e0d\u540c\u8def\u5f84 II",link:"https://github.com/azl397985856/leetcode/blob/master/problems/63.unique-paths-ii.md"},{text:"64. \u6700\u5c0f\u8def\u5f84\u548c",link:"https://leetcode-cn.com/problems/minimum-path-sum/"},{text:"174. \u5730\u4e0b\u57ce\u6e38\u620f",link:"https://leetcode-cn.com/problems/dungeon-game/"},{text:"576. \u51fa\u754c\u7684\u8def\u5f84\u6570(\u53ea\u80fd\u9009\u4e24\u4e2a\u65b9\u5411\u53d8\u6210\u4e86\u53ea\u80fd\u9009\u56db\u4e2a\u65b9\u5411\u800c\u5df2)",link:"https://leetcode-cn.com/problems/out-of-boundary-paths/"},{text:"935. \u9a91\u58eb\u62e8\u53f7\u5668(\u53ea\u80fd\u9009\u4e24\u4e2a\u65b9\u5411\u53d8\u6210\u4e86\u53ea\u80fd\u9009\u516b\u4e2a\u65b9\u5411\u800c\u5df2)",link:"https://github.com/azl397985856/leetcode/blob/master/problems/935.knight-dialer.md"},{text:"\u5c0f\u5154\u7684\u68cb\u76d8",link:"https://github.com/azl397985856/leetcode/issues/429"},{text:"Shopee\u7684\u529e\u516c\u5ba4",link:"https://www.nowcoder.com/questionTerminal/a71f3bd890734201986cd1e171807d30?commentTags=Python"}],code:{language:"py",text:"\n      # \u4e00\u7ef4\n      for i in range(2, n):\n        cur, prev = max(prev + nums[i], cur), cur\n      # \u4e8c\u7ef4\n      def uniquePaths(self, m: int, n: int) -> int:\n          dp = [1] * n\n          for _ in range(1, m):\n              for j in range(1, n):\n                  dp[j] += dp[j - 1]\n        "},keys:["\n\u72b6\u6001\uff1a 1. \u4e00\u7ef4\u901a\u5e38\u662f dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684 xxxx\n      2. \u4e8c\u7ef4\u901a\u5e38\u662f dp[i][j] \u8868\u793a\u4ee5 grid[i][j] \u7ed3\u5c3e\u7684 xxxx\n      ","\u679a\u4e3e\uff1a\u4e00\u7ef4\u5c31\u662f\u4e00\u5c42\u5faa\u73af\u679a\u4e3e\u6240\u6709\u7684 nums\uff0c\u4e8c\u7ef4\u5c31\u662f\u4e24\u5c42\u5faa\u73af\u679a\u4e3e\u6240\u6709\u7684 grid","\n\u72b6\u6001\u8f6c\u79fb\uff1a1. \u4e00\u7ef4\u901a\u5e38\u662f\u5f53\u524d\u683c\u5b50\u548c\u524d\u9762\u7684\u4e24\u4e2a\u683c\u5b50\u7684\u5173\u7cfb\uff0c\u53ef\u80fd\u662f\u6700\u5927\u6700\u5c0f\u6216\u8ba1\u6570\u3002 \n        dp[i] = dp[i - 1] + dp[i - 2]\uff0c\u8fd9\u4e5f\u53eb\u9012\u63a8\u5f0f\uff0c\u56e0\u4e3a\u4e0d\u6d89\u53ca\u51b3\u7b56\u3002\n        2. \u4e8c\u7ef4\u901a\u5e38\u662f\u5f53\u524d\u683c\u5b50\u548c\u4e0a\u65b9\u4ee5\u53ca\u5de6\u65b9\u7684\u4e24\u4e2a\u683c\u5b50\u7684\u5173\u7cfb\uff0c\u53ef\u80fd\u662f\u6700\u5927\u6700\u5c0f\u6216\u8ba1\u6570\u3002\n        dp[i][j] = dp[i - 1][j] + dp[i][j-1]\uff0c\u8fd9\u4e5f\u53eb\u9012\u63a8\u5f0f\uff0c\u56e0\u4e3a\u4e0d\u6d89\u53ca\u51b3\u7b56\u3002\n        3. \u6839\u8f6c\u79fb\u65b9\u7a0b\u4e0d\u96be\u770b\u51fa\uff0c \u8fd9\u79cd\u9898\u76ee\u901a\u5e38\u90fd\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n        "]},{title:"\u80cc\u5305\u578b\uff08\u4ec5\u5217\u4e3e\u9898\u76ee\uff09",pic:"",problems:[{text:"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6",link:"https://github.com/azl397985856/leetcode/blob/master/problems/416.partition-equal-subset-sum.md"},{text:"322. \u96f6\u94b1\u5151\u6362",link:"https://github.com/azl397985856/leetcode/blob/master/problems/322.coin-change.md"},{text:"518. \u96f6\u94b1\u5151\u6362 II",link:"https://github.com/azl397985856/leetcode/blob/master/problems/518.coin-change-2.md"}],code:void 0,keys:[]},{title:"\u6570\u4f4d\u578b\uff08\u4ec5\u5217\u4e3e\u9898\u76ee\uff09",pic:"",problems:[{text:"233. \u6570\u5b57 1 \u7684\u4e2a\u6570",link:"https://leetcode-cn.com/problems/number-of-digit-one/"},{text:"357. \u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570",link:"https://leetcode-cn.com/problems/count-numbers-with-unique-digits/"},{text:"902. \u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408",link:"https://leetcode-cn.com/problems/numbers-at-most-n-given-digit-set/"},{text:"1015. \u53ef\u88ab K \u6574\u9664\u7684\u6700\u5c0f\u6574\u6570",link:"https://github.com/azl397985856/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md"},{text:"\u9012\u589e\u7684\u6570\u4f4d",link:"https://binarysearch.com/problems/Increasing-Digits"}],code:void 0,keys:["\u5e38\u89c1\u7684 dp \u5b9a\u4e49\u4e3a dp[i][j] \u5176\u4e2d i \u4e3a\u6570\u5b57\u7684\u957f\u5ea6\uff0c j \u4e3a\u6700\u540e\u4e00\u4f4d\u7684\u6570\u3002\u6bd4\u5982 dp[3][2] \u8868\u793a\u8fd9\u4e2a\u6570\u4e00\u5171\u4e09\u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u662f 2 \u7684\u60c5\u51b5"]},{title:"\u6982\u7387\u578b\uff08\u4ec5\u5217\u4e3e\u9898\u76ee\uff09",pic:"",problems:[{text:"808. \u5206\u6c64",link:"https://leetcode-cn.com/problems/soup-servings/"},{text:"837. \u65b021\u70b9",link:"https://leetcode-cn.com/problems/new-21-game/"}],code:void 0,keys:[]},{title:"\u535a\u5f08\u578b\uff08\u4ec5\u5217\u4e3e\u9898\u76ee\uff09",pic:"",problems:[{text:"292. Nim \u6e38\u620f",link:"https://leetcode-cn.com/problems/nim-game/"},{text:"877. \u77f3\u5b50\u6e38\u620f",link:"https://github.com/azl397985856/leetcode/blob/master/problems/877.stone-game.md"},{text:"1140. \u77f3\u5b50\u6e38\u620f II",link:"https://leetcode-cn.com/problems/stone-game-ii/"},{text:"1406. \u77f3\u5b50\u6e38\u620f III",link:"https://leetcode-cn.com/problems/stone-game-iii/"},{text:"1510. \u77f3\u5b50\u6e38\u620f IV",link:"https://leetcode-cn.com/problems/stone-game-iv/"},{text:"1563. \u77f3\u5b50\u6e38\u620f V",link:"https://leetcode-cn.com/problems/stone-game-v/"},{text:"1686. \u77f3\u5b50\u6e38\u620f VI",desc:"\u9664\u4e86\u8fd9\u4e2a\uff0c\u5176\u4ed6\u300a\u77f3\u5b50\u6e38\u620f\u300b\u601d\u8def\u57fa\u672c\u90fd\u4e00\u6837",link:"https://leetcode-cn.com/problems/stone-game-vi/"},{text:"1690. \u77f3\u5b50\u6e38\u620f VII",link:"https://leetcode-cn.com/problems/stone-game-vii/"}],code:void 0,keys:[]},{title:"\u533a\u95f4 DP",problems:[{link:"https://binarysearch.com/problems/Make-a-Palindrome-by-Inserting-Characters",text:"\u56de\u6587\u63d2\u5165",desc:"\u533a\u95f4 dp \u9700\u8981\u4ece\u5e8f\u5217\u4e24\u5934\u540c\u65f6\u8fdb\u884c\uff0c\u800c\u4e0d\u662f\u4ece\u5e8f\u5217\u7684\u67d0\u4e00\u7aef\u5230\u53e6\u4e00\u7aef"}],code:{language:"py",text:"\n          \n".concat("\nclass Solution:\n    def solve(self, s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        # \u53f3\u8fb9\u754c\u5012\u5e8f\u904d\u5386\n        for i in range(n - 1, -1, -1):\n            # \u5de6\u8fb9\u754c\u6b63\u5e8f\u904d\u5386\n            for j in range(i + 1, n):\n                # do something\n        return  dp[0][m-1] # \u4e00\u822c\u90fd\u662f\u4f7f\u7528\u8fd9\u4e2a\u533a\u95f4\u4f5c\u4e3a\u7b54\u6848\n","\n# \u4f7f\u7528\u8bb0\u5fc6\u5316\u53ef\u80fd\u4f1a\u66f4\u597d\u4e66\u5199\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 dp \u4ee3\u7801\u6539\u6210\u8bb0\u5fc6\u5316\u9012\u5f52\u5c31\u662f\uff1a\n").concat("\nclass Solution:\n    def solve(self, s):\n        @lru_cache(None)\n        def helper(l, r):\n            if l >= r:\n                return 0\n            if s[l] == s[r]:\n                return helper(l + 1, r - 1)\n            return 1 + min(helper(l + 1, r), helper(l, r - 1))\n        return helper(0, len(s) - 1)\n")},keys:["\n\u53f3\u8fb9\u754c\u5012\u5e8f\u904d\u5386\uff0c\u5de6\u8fb9\u754c\u6b63\u5e8f\u904d\u5386\n        ","\u901a\u5e38\u90fd\u662f\u8fd4\u56de dp[0][n]\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u5e38\u89c1\u7684 dp[-1][-1]"]},{title:"\u72b6\u6001\u538b\u7f29\u578b\uff08\u4ec5\u5217\u4e3e\u9898\u76ee\uff09",pic:"",problems:[{text:"464. \u6211\u80fd\u8d62\u5417",link:"https://leetcode-cn.com/problems/can-i-win/"},{text:"698. \u5212\u5206\u4e3ak\u4e2a\u76f8\u7b49\u7684\u5b50\u96c6",link:"https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/"},{text:"1681. \u6700\u5c0f\u4e0d\u517c\u5bb9\u6027",link:"https://leetcode-cn.com/problems/minimum-incompatibility/"}],code:void 0,keys:[]}]}};function W(){var n=Object(r.useState)("dp"),e=Object(a.a)(n,2),t=e[0],i=e[1];return l.a.createElement(l.a.Fragment,null,l.a.createElement(V.a.Group,{onChange:function(n){return i(n.target.value)},value:t,buttonStyle:"solid"},l.a.createElement(V.a.Button,{value:"dp"},"\u52a8\u6001\u89c4\u5212"),l.a.createElement(V.a.Button,{value:"binary-search"},"\u4e8c\u5206"),l.a.createElement(V.a.Button,{value:"tree",disabled:!0},"\u6811"),l.a.createElement(V.a.Button,{value:"linked-list",disabled:!0},"\u94fe\u8868")),l.a.createElement("div",null,l.a.createElement("pre",null,U[t].desc),U[t].items.map((function(n){return l.a.createElement("div",{key:n.title},l.a.createElement("h1",null,n.title),l.a.createElement("div",null,n.keys.map((function(n){return l.a.createElement("pre",{key:n},n)}))),n.pic&&l.a.createElement(l.a.Fragment,null,l.a.createElement(p.a,{src:n.pic,width:400,height:200}),"(\u5355\u51fb\u53ef\u653e\u5927)"),n.code&&l.a.createElement(I,{codes:[n.code]}),"\u63a8\u8350\u9898\u76ee\uff1a",l.a.createElement("ul",null,n.problems.map((function(n){var e=n.link,t=n.text,i=n.desc;return l.a.createElement("li",{key:t},l.a.createElement(F,{link:e,text:t}),i)}))))}))))}var G=t(202),X={title:"\u4e8c\u5206\u6cd5",logo:t.n(G).a,list:[{text:"\u67e5\u627e\u4e00\u4e2a\u6570",problems:[{id:"single-element-in-a-sorted-array",title:"540. \u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u5355\u4e00\u5143\u7d20"}],codes:[{language:"java",text:"\n        public int binarySearch(int[] nums, int target) {\n            // \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n            int left = 0;\n            int right = nums.length - 1;\n        \n            while(left <= right) {\n                int mid = left + (right - left) / 2;\n                if(nums[mid] == target)\n                    return mid;\n                if (nums[mid] < target)\n                        // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                    left = mid + 1;\n                if (nums[mid] > target)\n                    // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                    right = mid - 1;\n            }\n            return -1;\n        }"},{language:"py",text:"\n            def binarySearch(nums, target):\n                # \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n                l, r = 0, len(nums) - 1\n                while l <= r:\n                    mid = (left + right) >> 1\n                    if nums[mid] == target: return mid\n                    # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                    if nums[mid] < target: l = mid + 1\n                    # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                    if nums[mid] > target: r = mid - 1\n                return -1"},{language:"js",text:"\n            function binarySearch(nums, target) {\n                let left = 0;\n                let right = nums.length - 1;\n                while (left <= right) {\n                const mid = Math.floor(left + (right - left) / 2);\n                if (nums[mid] == target) return mid;\n                if (nums[mid] < target)\n                    // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                    left = mid + 1;\n                if (nums[mid] > target)\n                    // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                    right = mid - 1;\n                }\n                return -1;\n            }"},{language:"cpp",text:"\n          int binarySearch(vector<int>& nums, int target){\n            if(nums.size() == 0)\n              return -1;\n          \n            int left = 0, right = nums.size() - 1;\n            while(left <= right){\n              int mid = left + ((right - left) >> 1);\n              if(nums[mid] == target){ return mid; }\n              // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n              else if(nums[mid] < target)\n            left = mid + 1;\n              // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n              else\n            right = mid - 1;\n            }\n            return -1;\n          }\n          "}]},{text:"\u5bfb\u627e\u6700\u5de6\u8fb9\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u503c",problems:[{id:"find-first-and-last-position-of-element-in-sorted-array",title:"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},{id:"first-bad-version",title:"278. \u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c"}],codes:[{language:"java",text:"\n          public int binarySearchLeft(int[] nums, int target) {\n            // \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n            int left = 0;\n            int right = nums.length - 1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (nums[mid] < target) {\n                    // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                    left = mid + 1;\n                }\n                if (nums[mid] >= target) {\n                    // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n                    right = mid - 1;\n                }\n            }\n            // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n            if (left >= nums.length || nums[left] != target)\n                return -1;\n            return left;\n        }"},{language:"py",text:"\n          def binarySearchLeft(nums, target):\n            # \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n            l, r = 0, len(nums) - 1\n            while l <= r:\n                mid = (l + r) >> 1\n                # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                if nums[mid] < target: l = mid + 1\n                # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                if nums[mid] >= target: r = mid - 1\n            if l >= len(nums) or nums[l] != target: return -1\n            return l"},{language:"js",text:"\n          function binarySearchLeft(nums, target) {\n            let left = 0;\n            let right = nums.length - 1;\n            while (left <= right) {\n              const mid = Math.floor(left + (right - left) / 2);\n              if (nums[mid] < target)\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                left = mid + 1;\n              if (nums[mid] >= target)\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                right = mid - 1;\n            }\n            // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n            if (left >= nums.length || nums[left] != target) return -1;\n            return left;\n          }"},{language:"cpp",text:"\n          int binarySearchLeft(vector<int>& nums, int target) {\n            // \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n              int left = 0, right = nums.size() - 1;\n              while (left <= right) {\n                  int mid = left + ((right - left) >> 1);\n                  if (nums[mid] == target) {\n                      // \u6536\u7f29\u53f3\u8fb9\u754c\n                      right = mid - 1;\n                  }\n                  if (nums[mid] < target) {\n                      // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                      left = mid + 1;\n                  }\n                  if (nums[mid] > target) {\n                      // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n                      right = mid - 1;\n                  }\n              }\n              // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n              if (left >= nums.size() || nums[left] != target)\n                  return -1;\n              return left;\n          }\n          "}]},{text:"\u5bfb\u627e\u6700\u53f3\u8fb9\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u503c",problems:[{id:"find-first-and-last-position-of-element-in-sorted-array",title:"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},{id:"sqrtx",title:"69. x \u7684\u5e73\u65b9\u6839"}],codes:[{language:"java",text:"\n            public int binarySearchRight(int[] nums, int target) {\n                // \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n                int left = 0\n                int right = nums.length - 1;\n                while (left <= right) {\n                    int mid = left + (right - left) / 2;\n                    if (nums[mid] <= target) {\n                        // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                        left = mid + 1;\n                    }\n                    if (nums[mid] > target) {\n                        // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n                        right = mid - 1;\n                    }\n                }\n                // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n                if (right < 0 || nums[right] != target)\n                    return -1;\n                return right;\n            }"},{language:"py",text:"\n            def binarySearchRight(nums, target):\n                # \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n                l, r = 0, len(nums) - 1\n                while l <= r:\n                    mid = (l + r) >> 1\n                    # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                    if nums[mid] <= target: l = mid + 1\n                    # \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                    if nums[mid] > target: r = mid - 1\n                if r < 0 or nums[r] != target: return -1\n                return r"},{language:"js",text:"\n          function binarySearchRight(nums, target) {\n            let left = 0;\n            let right = nums.length - 1;\n            while (left <= right) {\n              const mid = Math.floor(left + (right - left) / 2);\n              if (nums[mid] <= target)\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                left = mid + 1;\n              if (nums[mid] > target)\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n                right = mid - 1;\n            }\n            // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n            if (right < 0 || nums[right] != target) return -1;\n            return right;\n          }"},{language:"cpp",text:"\n          int binarySearchRight(vector<int>& nums, int target) {\n            // \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n              int left = 0, right = nums.size() - 1;\n              while (left <= right) {\n                  int mid = left + ((right - left) >> 1);\n                   if (nums[mid] == target) {\n                      // \u6536\u7f29\u5de6\u8fb9\u754c\n                      left = mid + 1;\n                  }\n                  if (nums[mid] < target) {\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n                      left = mid + 1;\n                  }\n                  if (nums[mid] > target) {\n                // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n                      right = mid - 1;\n                  }\n              }\n              // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n              if (right < 0 || nums[right] != target)\n                  return -1;\n              return right;\n          }\n          \n          "}]},{text:"\u5bfb\u627e\u6700\u5de6\u63d2\u5165\u4f4d\u7f6e",codes:[{language:"py",text:"\n        def bisect_left(nums, x):\n          # \u5185\u7f6e api\n          bisect.bisect_left(nums, x)\n          # \u624b\u5199\n          l, r = 0, len(A) - 1\n          while l <= r:\n              mid = (l + r) // 2\n              if A[mid] >= x: r = mid - 1\n              else: l = mid + 1\n          return l\n        "},{language:"JS",text:"\n/**\n * @author suukii\n * @description \u5bfb\u627e\u6700\u5de6\u63d2\u5165\u4f4d\u7f6e\n * @param {number[]} nums \n * @param {number} x \n * @returns {number}\n */\nfunction searchInsertLeft(nums, x) {\n  // \u9898\u610f\u8f6c\u6362\u4e00\u4e0b\uff0c\u5176\u5b9e\u5c31\u662f\u5bfb\u627e\u7b2c\u4e00\u4e2a\u201c\u5927\u4e8e\u7b49\u4e8e\u201d x \u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor(left + (right - left) / 2);\n\n    if (nums[mid] >= x) right = mid - 1;\n    if (nums[mid] < x) left = mid + 1;\n  }\n\n  return left;\n}\n          "}],problems:[{id:"random-pick-with-weight",title:"528. \u6309\u6743\u91cd\u968f\u673a\u9009\u62e9"}]},{text:"\u5bfb\u627e\u6700\u53f3\u63d2\u5165\u4f4d\u7f6e",codes:[{language:"py",text:"\n        def bisect_right(nums, x):\n          # \u5185\u7f6e api\n          bisect.bisect_right(nums, x)\n          # \u624b\u5199\n          l, r = 0, len(A) - 1\n          while l <= r:\n              mid = (l + r) // 2\n              if A[mid] <= x: l = mid + 1\n              else: r = mid - 1\n          return l\n        "},{language:"JS",text:"\n/**@author suukii\n * @description \u5bfb\u627e\u6700\u53f3\u63d2\u5165\u4f4d\u7f6e\n * @param {number[]} nums \n * @param {number} x \n * @returns {number}\n */\nfunction searchInsertRight(nums, x) {\n  // \u9898\u610f\u8f6c\u6362\u4e00\u4e0b\uff0c\u5176\u5b9e\u5c31\u662f\u5bfb\u627e\u7b2c\u4e00\u4e2a\u201c\u5927\u4e8e\u201d x \u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor(left + (right - left) / 2);\n\n    if (nums[mid] > x) right = mid - 1;\n    if (nums[mid] <= x) left = mid + 1;\n  }\n\n  return left;\n}\n          "}],problems:[{id:"find-first-and-last-position-of-element-in-sorted-array",title:"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"}]}],link:"https://github.com/azl397985856/leetcode/blob/master/91/binary-search.md"},$=t(203),Q=t.n($),Z=t(204),J={title:"\u5e76\u67e5\u96c6",logo:t.n(Z).a,list:[{text:"\u4e0d\u5e26\u6743\u5e76\u67e5\u96c6",problems:[{title:"547. \u670b\u53cb\u5708",id:"friend-circles"},{title:"721. \u8d26\u6237\u5408\u5e76",id:"accounts-merge"},{title:"990. \u7b49\u5f0f\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027",id:"satisfiability-of-equality-equations"},{title:"1202. \u4ea4\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20",id:"smallest-string-with-swaps"}],codes:[{language:"py",text:"\nclass UF:\n  def __init__(self, M):\n      self.parent = {}\n      self.cnt = 0\n      # \u521d\u59cb\u5316 parent\uff0csize \u548c cnt\n      for i in range(M):\n          self.parent[i] = i\n          self.cnt += 1\n\n  def find(self, x):\n      if x != self.parent[x]:\n          self.parent[x] = self.find(self.parent[x])\n          return self.parent[x]\n      return x\n  def union(self, p, q):\n      if self.connected(p, q): return\n      leader_p = self.find(p)\n      leader_q = self.find(q)\n      self.parent[leader_p] = leader_q\n      self.cnt -= 1\n  def connected(self, p, q):\n      return self.find(p) == self.find(q)\n        "}]},{text:"\u5e26\u6743\u5e76\u67e5\u96c6",problems:[{title:"399. \u9664\u6cd5\u6c42\u503c",id:"evaluate-division"}],codes:[{language:"py",text:"\nclass UF:\n  def __init__(self, M):\n      # \u521d\u59cb\u5316 parent\uff0cweight\n      self.parent = {}\n      self.weight = {}\n      for i in range(M):\n          self.parent[i] = i\n          self.weight[i] = 0\n\n  def find(self, x):\n      if self.parent[x] != x:\n          ancestor, w = self.find(self.parent[x])\n          self.parent[x] = ancestor\n          self.weight[x] += w\n      return self.parent[x], self.weight[x]\n  def union(self, p, q, dist):\n      if self.connected(p, q): return\n      leader_p, w_p = self.find(p)\n      leader_q, w_q = self.find(q)\n      self.parent[leader_p] = leader_q\n      self.weight[leader_p] = dist + w_q - w_p\n  def connected(self, p, q):\n      return self.find(p)[0] == self.find(q)[0]\n        "}]}],link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/union-find.md"},Y=t(205),nn={title:"BFS",logo:t.n(Y).a,list:[{text:"\u5e26\u5c42\u4fe1\u606f",problems:[{title:"513.\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",id:"find-bottom-left-tree-value"},{title:"662. \u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6",id:"maximum-width-of-binary-tree"},{title:"863. \u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3a K \u7684\u7ed3\u70b9",id:"all-nodes-distance-k-in-binary-tree"}],codes:[{language:"py",text:"\n        class Solution:\n          def bfs(k):\n              # \u4f7f\u7528\u53cc\u7aef\u961f\u5217\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\u56e0\u4e3a\u6570\u7ec4\u4ece\u5934\u90e8\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a N\uff0c\u53cc\u7aef\u961f\u5217\u7684\u5e95\u5c42\u5b9e\u73b0\u5176\u5b9e\u662f\u94fe\u8868\u3002\n              queue = collections.deque([root])\n              # \u8bb0\u5f55\u5c42\u6570\n              steps = 0\n              # \u9700\u8981\u8fd4\u56de\u7684\u8282\u70b9\n              ans = []\n              # \u961f\u5217\u4e0d\u7a7a\uff0c\u751f\u547d\u4e0d\u6b62\uff01\n              while queue:\n                  size = len(queue)\n                  # \u904d\u5386\u5f53\u524d\u5c42\u7684\u6240\u6709\u8282\u70b9\n                  for _ in range(size):\n                      node = queue.popleft()\n                      if (step == k) ans.append(node)\n                      if node.right:\n                          queue.append(node.right)\n                      if node.left:\n                          queue.append(node.left)\n                  # \u904d\u5386\u5b8c\u5f53\u524d\u5c42\u6240\u6709\u7684\u8282\u70b9\u540e steps + 1\n                  steps += 1\n              return ans\n              "}]},{text:"\u4e0d\u5e26\u5c42\u4fe1\u606f",problems:[{title:"116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488",id:"populating-next-right-pointers-in-each-node"}],codes:[{language:"py",text:"\n        class Solution:\n          def bfs(k):\n              # \u4f7f\u7528\u53cc\u7aef\u961f\u5217\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\u56e0\u4e3a\u6570\u7ec4\u4ece\u5934\u90e8\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a N\uff0c\u53cc\u7aef\u961f\u5217\u7684\u5e95\u5c42\u5b9e\u73b0\u5176\u5b9e\u662f\u94fe\u8868\u3002\n              queue = collections.deque([root])\n              # \u961f\u5217\u4e0d\u7a7a\uff0c\u751f\u547d\u4e0d\u6b62\uff01\n              while queue:\n                  node = queue.popleft()\n                  # \u7531\u4e8e\u6ca1\u6709\u8bb0\u5f55 steps\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u662f\u4e0d\u9700\u8981\u6839\u636e\u5c42\u7684\u4fe1\u606f\u53bb\u5224\u65ad\u7684\u3002\u5426\u5219\u5c31\u7528\u5e26\u5c42\u7684\u6a21\u677f\u4e86\u3002\n                  if (node \u662f\u6211\u4eec\u8981\u627e\u5230\u7684) return node\n                  if node.right:\n                      queue.append(node.right)\n                  if node.left:\n                      queue.append(node.left)\n              return -1\n          "}]}],link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/tree.md"},en=t(206),tn={title:"\u524d\u7f00\u6811",logo:t.n(en).a,list:[{text:"\u6807\u51c6\u524d\u7f00\u6811",problems:[{title:"208.\u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",id:"implement-trie-prefix-tree"},{title:"211.\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1",id:"add-and-search-word-data-structure-design"},{id:"word-search-ii",title:"212.\u5355\u8bcd\u641c\u7d22 II"},{id:"concatenated-words",title:"472.\u8fde\u63a5\u8bcd"},{title:"648. \u5355\u8bcd\u66ff\u6362",id:"replace-words"},{id:"short-encoding-of-words",title:"820.\u5355\u8bcd\u7684\u538b\u7f29\u7f16\u7801"},{title:"1032.\u5b57\u7b26\u6d41",id:"stream-of-characters"}],codes:[{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for i, w in enumerate(word):\n            if w == \'.\':\n                wizards = []\n                for k in curr.keys():\n                    if k == \'#\':\n                        continue\n                    wizards.append(self.search(word[:i] + k + word[i + 1:]))\n                return any(wizards)\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n            '},{language:"js",text:'\n          function TrieNode(val) {\n            this.val = val;\n            this.children = [];\n            this.isWord = false;\n          }\n          \n          function computeIndex(c) {\n            return c.charCodeAt(0) - "a".charCodeAt(0);\n          }\n          /**\n           * Initialize your data structure here.\n           */\n          var Trie = function() {\n            this.root = new TrieNode(null);\n          };\n          \n          /**\n           * Inserts a word into the trie.\n           * @param {string} word\n           * @return {void}\n           */\n          Trie.prototype.insert = function(word) {\n            let ws = this.root;\n            for (let i = 0; i < word.length; i++) {\n              const c = word[i];\n              const current = computeIndex(c);\n              if (!ws.children[current]) {\n                ws.children[current] = new TrieNode(c);\n              }\n              ws = ws.children[current];\n            }\n            ws.isWord = true;\n          };\n          \n          /**\n           * Returns if the word is in the trie.\n           * @param {string} word\n           * @return {boolean}\n           */\n          Trie.prototype.search = function(word) {\n            let ws = this.root;\n            for (let i = 0; i < word.length; i++) {\n              const c = word[i];\n              const current = computeIndex(c);\n              if (!ws.children[current]) return false;\n              ws = ws.children[current];\n            }\n            return ws.isWord;\n          };\n          \n          /**\n           * Returns if there is any word in the trie that starts with the given prefix.\n           * @param {string} prefix\n           * @return {boolean}\n           */\n          Trie.prototype.startsWith = function(prefix) {\n            let ws = this.root;\n            for (let i = 0; i < prefix.length; i++) {\n              const c = prefix[i];\n              const current = computeIndex(c);\n              if (!ws.children[current]) return false;\n              ws = ws.children[current];\n            }\n            return true;\n          };\n          \n          /**\n           * Your Trie object will be instantiated and called as such:\n           * var obj = new Trie()\n           * obj.insert(word)\n           * var param_2 = obj.search(word)\n           * var param_3 = obj.startsWith(prefix)\n           */\n                  '},{language:"cpp",text:"\nstruct TrieNode {\n  TrieNode *children[26];\n  bool isEnd;\n  TrieNode(bool end=false) {\n      isEnd = end;\n      memset(children, 0, sizeof(children));\n  }\n};\n\nclass Trie {\nprivate:\n  TrieNode *root;\n  \n  TrieNode* findString(string word) {\n      TrieNode *p = root;\n      for (size_t i=0; i<word.size(); i++) {\n          int index = word[i] - 'a';\n          if(p->children[index] == nullptr)\n              return nullptr;\n          p = p->children[index];\n      }\n      return p;\n  }\n  \n  void clear(TrieNode *root) {\n      for (size_t i = 0; i < 26; i ++) \n          if (root->children[i])\n              clear(root->children[i]);\n      delete root;\n  }\npublic:\n  /** Initialize your data structure here. */\n  Trie() {\n      root = new TrieNode();\n  }\n  \n  ~Trie() {\n      clear(root);\n  }\n  \n  /** Inserts a word into the trie. */\n  void insert(string word) {\n      TrieNode *p = root;\n      for(size_t i=0; i<word.size(); i++) {\n          int index = word[i] - 'a';\n          if (!p->children[index])\n              p->children[index] = new TrieNode();\n          p = p->children[index];\n      }\n      p->isEnd = true;\n  }\n  \n  /** Returns if the word is in the trie. */\n  bool search(string word) {\n      TrieNode *p = findString(word);\n      return p != nullptr && p->isEnd;\n  }\n  \n  /** Returns if there is any word in the trie that starts with the given prefix. */\n  bool startsWith(string prefix) {\n      TrieNode *p = findString(prefix);\n      return p != nullptr;\n  }\n};\n\n/**\n* Your Trie object will be instantiated and called as such:\n* Trie* obj = new Trie();\n* obj->insert(word);\n* bool param_2 = obj->search(word);\n* bool param_3 = obj->startsWith(prefix);\n*/\n"},{language:"go",text:"\ntype Node struct {\n\tisWord bool\n\tnext map[byte]*Node\n}\n\nfunc NewNode(isWord bool) *Node {\n\treturn &Node{isWord: isWord, next: make(map[byte]*Node)}\n}\n\ntype Trie struct {\n\troot *Node\n}\n\n//func NewTrie() *Trie {\n//\treturn &Trie{root: NewNode(false)}\n//}\n\n/** Initialize your data structure here. */\nfunc Constructor() Trie {\n\treturn Trie{root: NewNode(false)}\n}\n\n\n/** Inserts a word into the trie. */\nfunc (t *Trie) Insert(word string)  {\n\tcur := t.root\n\tfor i := 0; i < len(word); i++ {\n\t\tc := word[i]\n\t\t_, ok := cur.next[c]\n\t\tif !ok { // \n\t\t\tcur.next[c] = NewNode(false)\n\t\t} \n\t\tcur = cur.next[c]\n\t}\n\tif !cur.isWord { // \u6807\u8bb0\u4e3a\u5355\u8bcd\n\t\tcur.isWord = true\n\t}\n}\n\n\n/** Returns if the word is in the trie. */\nfunc (t *Trie) Search(word string) bool {\n\tcur := t.root\n\tfor i := 0; i < len(word); i++ {\n\t\tc := word[i]\n\t\tv, ok := cur.next[c]\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n\t\tcur = v\n\t}\n\treturn cur.isWord\n}\n\n\n/** Returns if there is any word in the trie that starts with the given prefix. */\nfunc (t *Trie) StartsWith(prefix string) bool {\n\tcur := t.root\n\tfor i := 0; i < len(prefix); i++ {\n\t\tc := prefix[i]\n\t\tv,ok := cur.next[c]\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n\t\tcur = v\n\t}\n\treturn true\n}\n"},{language:"java",text:"\nclass Trie {\n\n  class TireNode {\n      boolean isEnd = false;\n      TireNode[] next = new TireNode[26];\n      TireNode() {} \n  }\n\n  private TireNode root;\n\n  /** Initialize your data structure here. */\n  public Trie() {\n      root = new TireNode();\n  }\n  \n  /** Inserts a word into the trie. */\n  public void insert(String word) {\n      TireNode node = root;\n      for (char ch : word.toCharArray()) {\n          if (node.next[ch-'a'] == null) {\n              node.next[ch-'a'] = new TireNode();\n          }\n          node = node.next[ch-'a'];\n      }\n      node.isEnd = true;\n  }\n  \n  /** Returns if the word is in the trie. */\n  public boolean search(String word) {\n      TireNode node = root;\n      for (char ch : word.toCharArray()) {\n          if (node.next[ch-'a'] == null) return false;\n          node = node.next[ch-'a'];\n      }\n      return node.isEnd;\n  }\n  \n  /** Returns if there is any word in the trie that starts with the given prefix. */\n  public boolean startsWith(String prefix) {\n      TireNode node = root;\n      for (char ch : prefix.toCharArray()) {\n          if (node.next[ch-'a'] == null) return false;\n          node = node.next[ch-'a'];\n      }\n      return true;\n  }\n}\n\n/**\n* Your Trie object will be instantiated and called as such:\n* Trie obj = new Trie();\n* obj.insert(word);\n* boolean param_2 = obj.search(word);\n* boolean param_3 = obj.startsWith(prefix);\n*/\n"}]}],link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md"},rn=t(207),ln={title:"\u6ed1\u52a8\u7a97\u53e3",logo:t.n(rn).a,list:[{text:"\u56fa\u5b9a\u7a97\u53e3\uff08\u4f2a\u4ee3\u7801\uff09",problems:[{title:"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd",id:"find-all-anagrams-in-a-string"}],codes:[{language:"py",text:"\n            \u521d\u59cb\u5316\u524d\u540e\u6307\u9488 = 0\n            \u521d\u59cb\u5316 ans\n\n            for \u524d\u6307\u9488 in \u53ef\u8fed\u4ee3\u96c6\u5408\n                \u66f4\u65b0\u7a97\u53e3\u5185\u4fe1\u606f\uff08\u524d\u6307\u9488\u8fdb\u7a97\u53e3\uff0c\u540e\u6307\u9488\u51fa\u7a97\u53e3\uff09\n                \u540e\u6307\u9488\u79fb\u52a8\n            \u66f4\u65b0\u7b54\u6848\n            \u8fd4\u56de ans\n                "}]},{text:"\u53ef\u53d8\u7a97\u53e3\uff08\u4f2a\u4ee3\u7801\uff09",problems:[{id:"longest-substring-without-repeating-characters",title:"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{title:"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32",id:"minimum-window-substring"},{title:"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4",id:"minimum-size-subarray-sum"},{id:"fruit-into-baskets",title:"904. \u6c34\u679c\u6210\u7bee"},{title:"930. \u548c\u76f8\u540c\u7684\u4e8c\u5143\u5b50\u6570\u7ec4",id:"binary-subarrays-with-sum"},{title:"992. K \u4e2a\u4e0d\u540c\u6574\u6570\u7684\u5b50\u6570\u7ec4",id:"subarrays-with-k-different-integers"},{title:"1004. \u6700\u5927\u8fde\u7eed 1 \u7684\u4e2a\u6570 III",id:"max-consecutive-ones-iii"},{title:"1234. \u66ff\u6362\u5b50\u4e32\u5f97\u5230\u5e73\u8861\u5b57\u7b26\u4e32",id:"replace-the-substring-for-balanced-string"},{title:"1248. \u7edf\u8ba1\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d",id:"count-number-of-nice-subarrays"}],codes:[{language:"py",text:"\n        \u521d\u59cb\u5316\u6162\u6307\u9488 = 0\n        \u521d\u59cb\u5316 ans\n\n        for \u5feb\u6307\u9488 in \u53ef\u8fed\u4ee3\u96c6\u5408\n            \u66f4\u65b0\u7a97\u53e3\u5185\u4fe1\u606f\n            while \u7a97\u53e3\u5185\u4e0d\u7b26\u5408\u9898\u610f\n                \u6269\u5c55\u6216\u8005\u6536\u7f29\u7a97\u53e3\n                \u6162\u6307\u9488\u79fb\u52a8\n            \u66f4\u65b0\u7b54\u6848\n        \u8fd4\u56de ans\n            "}]}],link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md"},on=t(208),sn={title:"\u7ebf\u6bb5\u6811",logo:t.n(on).a,link:"https://oi-wiki.org/ds/seg/",list:[{text:"\u533a\u95f4\u548c\u7ebf\u6bb5\u6811",problems:[{id:"range-sum-query-immutable",title:"303. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8\uff08\u4f7f\u7528\u4e00\u7ef4\u524d\u7f00\u548c\u4f1a\u66f4\u7b80\u5355\uff09"},{id:"range-sum-query-mutable",title:"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539"}],codes:[{language:"py",text:"\nclass SegmentTree:\n    def __init__(self, data:List[int]): \n        '''\n        data:\u4f20\u5165\u7684\u6570\u7ec4\n        '''\n        self.data = data\n        self.n = len(data)\n        #  \u7533\u8bf74\u500ddata\u957f\u5ea6\u7684\u7a7a\u95f4\u6765\u5b58\u7ebf\u6bb5\u6811\u8282\u70b9\n        self.tree = [None] * (4 * self.n) # \u7d22\u5f15i\u7684\u5de6\u5b69\u5b50\u7d22\u5f15\u4e3a2i+1\uff0c\u53f3\u5b69\u5b50\u4e3a2i+2\n        if self.n:\n            self.build(0, 0, self.n-1)\n    # \u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u81ea\u5e95\u5411\u4e0a\u7684\u66f4\u65b0\u8fc7\u7a0b\n    # \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5373\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u66f4\u65b0\u7236\u8282\u70b9\u3002\n    def update(self, tree_index, l, r, index):\n        '''\n        tree_index:\u67d0\u4e2a\u6839\u8282\u70b9\u7d22\u5f15\n        l, r : \u6b64\u6839\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        index : \u66f4\u65b0\u7684\u503c\u7684\u7d22\u5f15\n        '''\n        if l == r==index :\n            self.tree[tree_index] = self.data[index]\n            return\n        mid = (l+r)//2\n        left, right = 2 * tree_index + 1, 2 * tree_index + 2\n        if index > mid:\n            # \u8981\u66f4\u65b0\u7684\u533a\u95f4\u5728\u53f3\u5b50\u6811\n            self.update(right, mid+1, r, index)\n        else:\n            # \u8981\u66f4\u65b0\u7684\u533a\u95f4\u5728\u5de6\u5b50\u6811index<=mid\n            self.update(left, l, mid, index)\n        # \u67e5\u8be2\u533a\u95f4\u4e00\u90e8\u5206\u5728\u5de6\u5b50\u6811\u4e00\u90e8\u5206\u5728\u53f3\u5b50\u6811\n        # \u533a\u95f4\u548c\u4f7f\u7528\u52a0\u6cd5\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u533a\u95f4\u548c\u8981\u6539\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\n        self.tree[tree_index] = self.tree[left] + self.tree[right]\n        \n    def updateSum(self,index:int,value:int):\n        self.data[index] = value\n        self.update(0, 0, self.n-1, index)\n    def query(self, tree_index:int, l:int, r:int, ql:int, qr:int) -> int:\n        '''\n        \u9012\u5f52\u67e5\u8be2\u533a\u95f4[ql,..,qr]\u7684\u503c\n        tree_index : \u67d0\u4e2a\u6839\u8282\u70b9\u7684\u7d22\u5f15\n        l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        ql, qr: \u5f85\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        '''\n        if l == ql and r == qr:\n            return self.tree[tree_index]\n    \n        # \u533a\u95f4\u4e2d\u70b9,\u5bf9\u5e94\u5de6\u5b69\u5b50\u533a\u95f4\u7ed3\u675f,\u53f3\u5b69\u5b50\u533a\u95f4\u5f00\u5934\n        mid = (l+r) // 2 \n        left, right = tree_index * 2 + 1, tree_index * 2 + 2\n        if qr <= mid:\n            # \u67e5\u8be2\u533a\u95f4\u5168\u5728\u5de6\u5b50\u6811\n            return self.query(left, l, mid, ql, qr)\n        elif ql > mid:\n            # \u67e5\u8be2\u533a\u95f4\u5168\u5728\u53f3\u5b50\u6811\n            return self.query(right, mid+1, r, ql, qr)\n    \n        # \u67e5\u8be2\u533a\u95f4\u4e00\u90e8\u5206\u5728\u5de6\u5b50\u6811\u4e00\u90e8\u5206\u5728\u53f3\u5b50\u6811\n        # \u533a\u95f4\u548c\u4f7f\u7528\u52a0\u6cd5\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u533a\u95f4\u548c\u8981\u6539\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\n        return self.query(left, l, mid, ql, mid) + self.query(right, mid+1, r, mid+1, qr)\n\n    def querySum(self, ql:int, qr:int) -> int:\n        '''\n        \u8fd4\u56de\u533a\u95f4[ql,..,qr]\u7684\u548c\n        '''\n        return self.query(0, 0, self.n-1, ql, qr)\n\n    def build(self, tree_index:int, l:int, r:int):\n        '''\n        \u9012\u5f52\u521b\u5efa\u7ebf\u6bb5\u6811\n        tree_index : \u7ebf\u6bb5\u6811\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u4f4d\u7f6e\n        l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6,\u53f3\u8fb9\u754c\n        '''\n        if l == r:\n            self.tree[tree_index] = self.data[l]\n            return\n        mid = (l+r) // 2 # \u533a\u95f4\u4e2d\u70b9,\u5bf9\u5e94\u5de6\u5b69\u5b50\u533a\u95f4\u7ed3\u675f,\u53f3\u5b69\u5b50\u533a\u95f4\u5f00\u5934\n        left, right = 2 * tree_index + 1, 2 * tree_index + 2 # tree_index\u7684\u5de6\u53f3\u5b50\u6811\u7d22\u5f15\n        self.build(left, l, mid)\n        self.build(right, mid+1, r)\n        # \u533a\u95f4\u548c\u4f7f\u7528\u52a0\u6cd5\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u533a\u95f4\u548c\u8981\u6539\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\n        self.tree[tree_index] = self.tree[left] + self.tree[right]\n"}]},{text:"\u8ba1\u6570\u7ebf\u6bb5\u6811",problems:[{id:"create-sorted-array-through-instructions",title:"1649. \u901a\u8fc7\u6307\u4ee4\u521b\u5efa\u6709\u5e8f\u6570\u7ec4"}],codes:[{language:"py",text:'\nclass SegmentTree:\n  def __init__(self, upper, lower):\n      """\n      data:\u4f20\u5165\u7684\u6570\u7ec4\n      """\n      self.lower = lower\n      self.upper = upper\n      #  \u7533\u8bf74\u500ddata\u957f\u5ea6\u7684\u7a7a\u95f4\u6765\u5b58\u7ebf\u6bb5\u6811\u8282\u70b9\n      self.tree = [0] * (4 * (upper - lower + 1))  # \u7d22\u5f15i\u7684\u5de6\u5b69\u5b50\u7d22\u5f15\u4e3a2i+1\uff0c\u53f3\u5b69\u5b50\u4e3a2i+2\n\n  # \u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u81ea\u5e95\u5411\u4e0a\u7684\u66f4\u65b0\u8fc7\u7a0b\n  # \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u5373\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u66f4\u65b0\u7236\u8282\u70b9\u3002\n  def update(self, tree_index, l, r, index):\n      """\n      tree_index:\u67d0\u4e2a\u6839\u8282\u70b9\u7d22\u5f15\n      l, r : \u6b64\u6839\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n      index : \u66f4\u65b0\u7684\u503c\u7684\u7d22\u5f15\n      """\n      if l > index or r < index:\n          return\n      self.tree[tree_index] += 1\n      if l == r:\n          return\n      mid = (l + r) // 2\n      left, right = tree_index * 2 + 1, tree_index * 2 + 2\n      self.update(left, l, mid, index)\n      self.update(right, mid + 1, r, index)\n\n  def updateCount(self, index: int):\n      self.update(0, self.lower, self.upper, index)\n\n  def query(self, tree_index: int, l: int, r: int, ql: int, qr: int) -> int:\n      """\n      \u9012\u5f52\u67e5\u8be2\u533a\u95f4[ql,..,qr]\u7684\u503c\n      tree_index : \u67d0\u4e2a\u6839\u8282\u70b9\u7684\u7d22\u5f15\n      l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n      ql, qr: \u5f85\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n      """\n      if qr < l or ql > r:\n          return 0\n      # l \u548c r \u5728 [ql, qr] \u5185\n      if ql <= l and qr >= r:\n          return self.tree[tree_index]\n      mid = (l + r) // 2\n      left, right = tree_index * 2 + 1, tree_index * 2 + 2\n      return self.query(left, l, mid, ql, qr) + self.query(right, mid + 1, r, ql, qr)\n\n  def queryCount(self, ql: int, qr: int) -> int:\n      """\n      \u8fd4\u56de\u533a\u95f4[ql,..,qr]\u7684\u8ba1\u6570\u4fe1\u606f\n      """\n      return self.query(0, self.lower, self.upper, ql, qr)\n          '}]}]},an=t(209),un=t.n(an),mn=t(210),dn=t.n(mn),cn=t(211),pn=t.n(cn),fn=[dn.a,X,nn,un.a,ln,Q.a,tn,J,sn,pn.a],gn=window.chrome;function hn(){return gn.runtime.requestUpdateCheck((function(n){"update_available"===n?S.b.success({content:l.a.createElement(l.a.Fragment,null,"\u68c0\u6d4b\u5230\u6709\u65b0\u7248\u672c\uff0c\u5df2\u4e3a\u60a8\u81ea\u52a8\u66f4\u65b0\u3002\u5982\u679c\u66f4\u65b0\u5931\u8d25\uff0c\u60a8\u53ef\u4ee5\u53bb",l.a.createElement("a",{href:"chrome://extensions/"},"\u6269\u5c55\u4e2d\u5fc3")," \u624b\u52a8\u66f4\u65b0\u54e6~")}):"no_update"===n?S.b.success({content:"\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c\u4e86~"}):"throttled"===n&&S.b.success({content:"\u64cd\u4f5c\u592a\u9891\u7e41\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5~"})}))}gn&&gn.runtime.onUpdateAvailable&&gn.runtime.onUpdateAvailable.addListener((function(n){console.log("updating to version "+n.version),gn.runtime.reload()}));t(459),t(460);var bn=u.a.TabPane,xn=j.a.Panel;function kn(n){var e=n.tempaltes;return l.a.createElement("div",null,l.a.createElement(u.a,null,e.map((function(n){return l.a.createElement(bn,{tab:l.a.createElement("div",null,n.title,l.a.createElement("img",{alt:n.title,style:n.logo?{margin:"0 0 0 10px"}:{display:"none"},src:n.logo,className:"problem-icon"})),key:n.title},n.link&&l.a.createElement("div",null,"\u5efa\u8bae\u5148\u5b66\u4f1a\u4e4b\u540e\u518d\u7528\u6a21\u677f\u3002 \u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b\u8fd9\u7bc7",l.a.createElement(m.a,{type:"link",href:n.link,target:"_blank"},"\u6587\u7ae0"),"\u54e6~"),n.list.map((function(n){var e=n.text,t=n.problems,i=n.codes;return l.a.createElement(j.a,{key:e},l.a.createElement(xn,{header:l.a.createElement("div",null,e),key:e},l.a.createElement("div",null,"\u63a8\u8350\u9898\u76ee\uff1a",l.a.createElement("ul",null,t.map((function(n){return l.a.createElement("li",{key:n.title},l.a.createElement(m.a,{type:"text"},n.title),l.a.createElement(m.a,{onClick:function(n){return n.stopPropagation()},type:"link",href:"".concat(w.d,"/problems/").concat(n.id),target:"_blank",size:"small",style:{marginLeft:"10px"}},"\u53bb\u9ed8\u5199"))})))),l.a.createElement(I,{codes:i}),l.a.createElement(m.a,{type:"link",href:w.b},"\u7ea0\u9519 or \u8d21\u732e\u5176\u4ed6\u8bed\u8a00")))})))})),l.a.createElement(bn,{tab:"\u66f4\u591a\u6a21\u677f\u540e\u7eed\u9646\u7eed\u66f4\u65b0",key:"more",disabled:!0})))}t(461);var vn=[{key:"size",dataIndex:"size",title:"\u6570\u636e\u89c4\u6a21",align:"center"},{key:"complexity",dataIndex:"complexity",title:"\u7b97\u6cd5\u53ef\u63a5\u53d7\u65f6\u95f4\u590d\u6742\u5ea6",align:"center",render:function(n){return"O(sqrt(n))"===n?l.a.createElement("img",{alt:"O(sqrt(n))",src:t(462)}):n}}],yn=[{size:"<= 10",complexity:"O(n!)"},{size:"<= 20",complexity:"O(2^n)"},{size:"<= 100",complexity:"O(n^4)"},{size:"<= 500",complexity:"O(n^3)"},{size:"<= 2500",complexity:"O(n^2)"},{size:"<= 10^6",complexity:"O(nlogn)"},{size:"<= 10^7",complexity:"n"},{size:"<= 10^14",complexity:"O(sqrt(n))"},{size:"-",complexity:"O(logn)"}];function wn(){return l.a.createElement("div",null,l.a.createElement(m.a,{type:"link",href:"https://lucifer.ren/blog/2020/12/21/shuati-silu3/",target:"_blank"},"\u4e0d\u61c2\u4e3a\u4ec0\u4e48\uff1f\u70b9\u8fd9\u91cc"),l.a.createElement(c.a,{columns:vn,dataSource:yn}))}var jn,Sn,_n=t(216),Ln=t(644),Nn=t(97),zn=t(98),qn=t(170),Tn=t(638),An=t(639),Pn=t(217),Mn=t.n(Pn),Cn=t(152),In=t(218),En=t.n(In),Dn=(t(620),t(219)),Fn=t.n(Dn)()((function(n){var e=Object(E.a)(Object(E.a)({},n),{},{escapeHtml:!1,plugins:[En.a],renderers:Object(E.a)(Object(E.a)({},n.renderers),{},{inlineMath:function(n){var e=n.value;return l.a.createElement(Cn.a,{math:e})},math:function(n){var e=n.value;return l.a.createElement(Cn.a,{block:!0,math:e})},code:function(n){return l.a.createElement(P,n)}})});return l.a.createElement(Mn.a,e)}),500),Bn=Ln.a.TextArea,On=Nn.a.Option,Rn="\n\n> \u6b64\u9898\u89e3\u7531 [\u529b\u6263\u5237\u9898\u63d2\u4ef6](https://leetcode-pp.github.io/leetcode-cheat/?tab=solution-template) \u81ea\u52a8\u751f\u6210\u3002 \n\n\u529b\u6263\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5[\u5173\u6ce8\u6211](https://leetcode-cn.com/u/fe-lucifer/)\uff0c\u8fd9\u6837\u5c31\u4f1a\u7b2c\u4e00\u65f6\u95f4\u6536\u5230\u6211\u7684\u52a8\u6001\u5566~\n\n\u4ee5\u4e0a\u5c31\u662f\u672c\u6587\u7684\u5168\u90e8\u5185\u5bb9\u4e86\u3002\u5927\u5bb6\u5bf9\u6b64\u6709\u4f55\u770b\u6cd5\uff0c\u6b22\u8fce\u7ed9\u6211\u7559\u8a00\uff0c\u6211\u6709\u65f6\u95f4\u90fd\u4f1a\u4e00\u4e00\u67e5\u770b\u56de\u7b54\u3002\u66f4\u591a\u7b97\u6cd5\u5957\u8def\u53ef\u4ee5\u8bbf\u95ee\u6211\u7684 LeetCode \u9898\u89e3\u4ed3\u5e93\uff1ahttps://github.com/azl397985856/leetcode \u3002 \u76ee\u524d\u5df2\u7ecf 40K star \u5566\u3002\u5927\u5bb6\u4e5f\u53ef\u4ee5\u5173\u6ce8\u6211\u7684\u516c\u4f17\u53f7\u300a\u529b\u6263\u52a0\u52a0\u300b\u5e26\u4f60\u5543\u4e0b\u7b97\u6cd5\u8fd9\u5757\u786c\u9aa8\u5934\u3002\n\n\u5173\u6ce8\u516c\u4f17\u53f7\u529b\u6263\u52a0\u52a0\uff0c\u52aa\u529b\u7528\u6e05\u6670\u76f4\u767d\u7684\u8bed\u8a00\u8fd8\u539f\u89e3\u9898\u601d\u8def\uff0c\u5e76\u4e14\u6709\u5927\u91cf\u56fe\u89e3\uff0c\u624b\u628a\u624b\u6559\u4f60\u8bc6\u522b\u5957\u8def\uff0c\u9ad8\u6548\u5237\u9898\u3002\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlly1gfcuzagjalj30p00dwabs.jpg)";function Kn(n){return{python:"Python",python3:"Python3",java:"Java",cpp:"CPP",javascript:"JavaScript",go:"Go",c:"C","c#":"C#",ruby:"Ruby",swift:"Swift",scala:"Scala",kotlin:"Kotlin",rust:"Rust",php:"PHP",typescript:"TypeScript"}[n]||n}function Hn(n){var e=n.title,t=void 0===e?"":e,i=n.link,r=void 0===i?"":i,l=n.desc,o=void 0===l?"":l,s=n.pre,a=void 0===s?"":s,u=n.company,m=void 0===u?"\u6682\u65e0":u,d=n.language,c=void 0===d?"python3":d,p=n.code,f=void 0===p?"":p,g=n.keyword,h=void 0===g?"":g,b=n.time,x=void 0===b?"n":b,k=n.space,v=void 0===k?"n":k,y=n.isLucifer,w=void 0!==y&&y;return"\n## \u9898\u76ee\u5730\u5740(".concat(t,")\n\n").concat(r,"\n\n## \u9898\u76ee\u63cf\u8ff0\n\n```\n").concat(o,"\n```\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- ").concat(a,"\n\n## \u516c\u53f8\n\n- ").concat(m,"\n\n## \u601d\u8def\n\n## \u5173\u952e\u70b9\n\n- ").concat(h," \n\n## \u4ee3\u7801\n\n- \u8bed\u8a00\u652f\u6301\uff1a").concat(Kn(c),"\n\n").concat(Kn(c)," Code:\n\n```").concat("python3"===c.toLocaleLowerCase()?"python":c.toLocaleLowerCase(),"\n\n").concat(f,"\n\n```\n\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n\u4ee4 n \u4e3a\u6570\u7ec4\u957f\u5ea6\u3002\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(").concat(x,")$\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(").concat(v,")$\n\n").concat(w?Rn:"","\n")}function Vn(n){var e=n.onChange,t=n.template;return l.a.createElement(Bn,{ref:Zn,value:t,autoSize:!0,onChange:e})}function Un(n){var e=n.value,t=n.onChange;return l.a.createElement(V.a.Group,{value:e,onChange:t},l.a.createElement(V.a.Button,{value:"1"},"O(1)"),l.a.createElement(V.a.Button,{value:"\\\\sqrt n"},"O(\\sqrt n)"),l.a.createElement(V.a.Button,{value:"logn"},"O(logn)"),l.a.createElement(V.a.Button,{value:"n"},"O(n)"),l.a.createElement(V.a.Button,{value:"nlogn"},"O(nlogn)"),l.a.createElement(V.a.Button,{value:"n^2"},"O(n^2)"),l.a.createElement(V.a.Button,{value:"2^n"},"O(2^n)"),l.a.createElement(V.a.Button,{value:"n!"},"O(n!)"))}var Wn=[{formula:"$sum_{i=1}^{n}{a_i}$",name:"\u6c42\u548c",logo:t(622)},{formula:"$a\\times b$",name:"\u4e58\u6cd5",logo:t(623)},{formula:"$a\\div b$",name:"\u9664\u6cd5",logo:t(624)},{formula:"$\\frac{a}{b}$",name:"\u5206\u6570",logo:t(625)},{formula:"$a\\approx b$",name:"\u7ea6\u7b49\u4e8e",logo:t(626)},{formula:"$\\sqrt a$",name:"\u6839\u53f7",logo:t(627)},{formula:String.raw(jn||(jn=Object(_n.a)(["\n$$\n  negative[i]=left{\n  \begin{aligned}\n  negative[i-1] + 1 &  & negative[i-1] > 0 \\\n  0 & & negative[i-1] = 0 \\\n  end{aligned}\n  \right.\n$$\n    "],["\n$$\n  negative[i]=\\left\\{\n  \\begin{aligned}\n  negative[i-1] + 1 &  & negative[i-1] > 0 \\\\\n  0 & & negative[i-1] = 0 \\\\\n  \\end{aligned}\n  \\right.\n$$\n    "]))),name:"\u52a8\u6001\u89c4\u5212\u9009\u62e9\u65b9\u7a0b",logo:t(628)}],Gn=Object(M.d)((function(n){return Object(M.j)("solution-backup",{raw:n})}),5e3),Xn=Object(M.g)("link")||"",$n=Object(M.g)("title")||"",Qn=(null===(Sn=Object(M.g)("language"))||void 0===Sn?void 0:Sn.toLowerCase())||"python3",Zn=l.a.createRef(),Jn=function(n){Object(N.a)(t,n);var e=Object(z.a)(t);function t(n){var i;return Object(_.a)(this,t),(i=e.call(this,n)).state={language:Qn,time:"n",space:"n",isLucifer:!1,template:"",isloading:!1},i.setLanguage=function(n){return i.setState({language:n})},i.setTime=function(n){return i.setState({time:n})},i.setSpace=function(n){return i.setState({space:n})},i.setIsLucifer=function(n){return i.setState({isLucifer:n})},i.setTemplate=function(n){i.setState({template:n})},i}return Object(L.a)(t,[{key:"componentDidMount",value:function(){var n=this;this.setTemplate(Hn({language:Qn,link:Xn,title:$n})),Object(M.f)("leetcode-cheatsheet-token").then((function(n){return n.result.value})).then((function(n){if(!n.raw)throw new Error("whatever");return n})).catch((function(){return{raw:"e574bf60b50d8d2d2db2320ee83aba3cd29cecf2"}})).then((function(e){var t=e.raw;Object(M.g)("issue_number")&&(n.setState({isloading:!0}),Object(M.e)(Object(M.g)("issue_number"),{token:t}).then((function(e){var t=e.link,i=e.title,r=e.code,l=e.language,o=e.desc;n.setLanguage(l),n.setTemplate(Hn({desc:o,language:l,link:t,title:i,code:r})),n.setState({isloading:!1})})).catch((function(){return n.setState({isloading:!1})})))}))}},{key:"render",value:function(){var n=this,e=this.state,t=e.language,i=e.time,r=e.space,o=e.isLucifer,s=e.template,a=e.isloading;return l.a.createElement(l.a.Fragment,null,l.a.createElement(m.a,{type:"link",href:"https://mp.weixin.qq.com/s/mcRFKVWXKmlXaBow6TIwug"},"\u5982\u4f55\u4f7f\u7528\uff1f"),Object(M.h)()?l.a.createElement(m.a,{type:"link",target:"_blank",href:"https://leetcode-pp.github.io/leetcode-cheat/"},"\u53bb\u7f51\u7ad9\u4f7f\u7528"):l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"line"},"\u7f16\u7a0b\u8bed\u8a00\uff1a",l.a.createElement(Nn.a,{value:t,style:{width:120},onChange:function(e){n.setLanguage(e),n.setTemplate(s.replace(new RegExp("```.+","mg"),"```".concat(e)).replace(new RegExp("\u8bed\u8a00\u652f\u6301\uff1a.+","mg"),"\u8bed\u8a00\u652f\u6301\uff1a".concat(Kn(e))).replace(new RegExp(".+ Code:","mg"),"".concat(Kn(e)," Code:")))}},l.a.createElement(On,{value:"Python3"},"Python3"),l.a.createElement(On,{value:"Python"},"Python"),l.a.createElement(On,{value:"JavaScript"},"JavaScript"),l.a.createElement(On,{value:"C++"},"CPP"),l.a.createElement(On,{value:"Java"},"Java"),l.a.createElement(On,{value:"GO"},"Go"),l.a.createElement(On,{value:"C"},"C"),l.a.createElement(On,{value:"C#"},"C#"),l.a.createElement(On,{value:"Ruby"},"Ruby"),l.a.createElement(On,{value:"Swift"},"Swift"),l.a.createElement(On,{value:"Scala"},"Scala"),l.a.createElement(On,{value:"Kotlin"},"Kotlin"),l.a.createElement(On,{value:"Rust"},"Rust"),l.a.createElement(On,{value:"PHP"},"PHP"),l.a.createElement(On,{value:"TypeScript"},"TypeScript"))),l.a.createElement("div",{className:"line"},"\u5e38\u7528\u516c\u5f0f\uff08\u70b9\u51fb\u53ef\u590d\u5236\uff09\uff1a",Wn.map((function(n){var e=n.formula,t=n.name,i=n.logo;return l.a.createElement("img",{onClick:function(){Object(M.c)(e),S.b.success({content:"\u590d\u5236\u6210\u529f~"})},alt:t,style:{margin:"0 0 0 20px"},src:i,className:"problem-icon"})}))),l.a.createElement("div",{className:"line"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",l.a.createElement(Un,{value:i,onChange:function(e){var t=e.target.value;n.setTime(t),n.setTemplate(s.replace(new RegExp("\u65f6\u95f4\u590d\u6742\u5ea6\uff1a.+","mg"),"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(".concat(t,")$")))}})),l.a.createElement("div",{className:"line"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",l.a.createElement(Un,{value:r,onChange:function(e){var t=e.target.value;n.setSpace(t),n.setTemplate(s.replace(new RegExp("\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a.+","mg"),"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(".concat(t,")$")))}})),l.a.createElement("div",{className:"line"},"lucifer \u4e13\u5c5e\uff1a",l.a.createElement(zn.a,{checked:o,onChange:function(e){var t=e.target.checked;if(n.setIsLucifer(t),t){if(s.includes(Rn))return;n.setTemplate(s+Rn)}else{if(!s.includes(Rn))return;n.setTemplate(s.replace(Rn,""))}}},"\u662f\u5426\u662f lucifer")),l.a.createElement(qn.a,{spinning:a,delay:300},l.a.createElement(Tn.a,null,l.a.createElement(An.a,{span:"12"},l.a.createElement("div",null,"Markdown:",l.a.createElement(m.a,{style:{margin:"10px"},type:"primary",onClick:function(){Object(M.c)(s),S.b.success({content:"\u590d\u5236\u6210\u529f~"})}},"\u70b9\u51fb\u590d\u5236 MarkDown \u539f\u6587"),l.a.createElement(m.a,{style:{margin:"10px"},onClick:function(){Object(M.f)("solution-backup").then((function(n){return n.result.value})).then((function(e){var t=e.raw;n.setTemplate(t)})).catch((function(){return S.b.error({content:"\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5907\u4efd\u6587\u4ef6"})}))}},"\u6062\u590d\u4e0a\u6b21\u7f16\u8f91\u5185\u5bb9")),l.a.createElement(Vn,{template:s,onChange:function(e){Gn(e.target.value),n.setTemplate(e.target.value)}})),l.a.createElement(An.a,{span:"1"}),l.a.createElement(An.a,{span:"11",style:{marginTop:"20px"}},l.a.createElement("div",null,"\u9884\u89c8:"),l.a.createElement(Fn,{source:s})))," ")),l.a.createElement("ul",null,l.a.createElement("li",null,"\u9898\u89e3\u6bcf\u4e94\u79d2\u5907\u4efd\u4e00\u6b21\uff0c\u5982\u679c\u4f60\u4e0d\u5c0f\u5fc3\u5237\u65b0\u4e86\u6d4f\u89c8\u5668\u53ef\u4ee5\u70b9\u51fb\u4e0b\u65b9\u7684\u6062\u590d\u6309\u94ae\u8fd8\u539f\u3002\u7531\u4e8e\u662f\u8986\u76d6\u5f0f\u5907\u4efd\uff0c\u56e0\u6b64\u4ec5\u4f1a\u4fdd\u5b58\u6700\u540e\u4e00\u6b21\u7f16\u8f91\u7684\u5185\u5bb9\u3002"),l.a.createElement("li",null,"\u76ee\u524d\u516c\u5f0f\u65e0\u6cd5\u9884\u89c8\uff0c\u539f\u56e0\u6682\u65f6\u4e0d\u660e\uff0c\u4e0d\u8fc7\u540e\u671f\u4f1a\u652f\u6301\u3002"),l.a.createElement("li",null,"\u540e\u7eed\u8003\u8651\u63d0\u4f9b\u66f4\u591a\u9898\u89e3\u6a21\u677f\u3002"),l.a.createElement("li",null,"\u540e\u7eed\u8003\u8651\u652f\u6301\u66f4\u591a\u4e3b\u9898\uff0c\u4ee5\u53ca\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u9898\u3002")))}}]),t}(r.PureComponent),Yn=Object(M.h)()?null:l.a.lazy((function(){return Promise.all([t.e(4),t.e(5)]).then(t.bind(null,655))})),ne=b.problems,ee=b.selected,te=u.a.TabPane,ie=Object.values(ne),re=window.chrome,le=[{title:"\u9898\u76ee",dataIndex:"name",width:"300",align:"center",render:function(n,e){return l.a.createElement(m.a,{type:"link",href:"".concat(w.d,"/problems/").concat(n,"/"),target:"_blank"},e.id,".",n)}},{title:"\u6807\u7b7e",dataIndex:"pre",align:"center",render:function(n){return l.a.createElement("div",null,(n||[]).map((function(n){return l.a.createElement(F,{style:{width:"100px",display:"inline-block",margin:"4px 0"},key:n.text,text:n.text,link:n.link,color:n.color})})))}}],oe=Object(M.g)("tab")||"code-template";var se=function(){re&&re.tabs&&re.tabs.query({active:!0,lastFocusedWindow:!0},(function(n){var e=n[0].url.match(/problems\/(.+?)\//),t=e&&e[1];i(t),g(!!ne[t]),v(!!ee[t])}));var n=Object(r.useState)(""),e=Object(a.a)(n,2),t=e[0],i=e[1],o=Object(r.useState)(!1),s=Object(a.a)(o,2),f=s[0],g=s[1],h=Object(r.useState)(!1),b=Object(a.a)(h,2),x=b[0],v=b[1],w=Object(r.useState)(""),j=Object(a.a)(w,2),S=j[0],_=j[1],L=Object(r.useState)(oe),N=Object(a.a)(L,2),z=N[0],q=N[1];return l.a.createElement("div",{className:"container"},l.a.createElement("div",{className:"tree-vis",style:{display:"none",position:"fixed",zIndex:99,top:0,bottom:0,left:0,right:0,backgroundColor:"rgba(0,0,0,.4)"}},l.a.createElement("div",null),l.a.createElement("canvas",{width:"1000",height:"1000",id:"canvas"})),Object(M.h)()&&l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"guide-wrapper"},l.a.createElement("div",{className:"guide"},""!==S?l.a.createElement(m.a,{type:"link",onClick:function(){return _("")}},"\u56de\u5230\u9996\u9875"):"",f&&""===S?l.a.createElement(m.a,{type:"link",onClick:function(){return _("detail")}},"\u67e5\u770b\u672c\u9898\u9898\u89e3",l.a.createElement("img",{src:y.a,alt:"view-solution",className:"problem-icon",style:{margin:"0 0 0 10px"}})):"",!f&&"allSolutions"!==S&&(x?l.a.createElement(m.a,{type:"link",target:"_blank",href:ee[t].url},"\u8be5\u9898\u5df2\u88ab\u6536\u5f55\u5230\u7cbe\u9009\u5408\u96c6\u300a",ee[t].title,"\u300b\u70b9\u51fb\u67e5\u770b",l.a.createElement("img",{alt:"view-solutions",src:k.a,className:"problem-icon",style:{margin:"0 0 0 10px"}})):l.a.createElement(m.a,{type:"link",onClick:function(){return _("allSolutions")}},"\u672c\u9898\u6682\u672a\u88ab\u529b\u6263\u52a0\u52a0\u6536\u5f55\uff0c\u70b9\u51fb\u67e5\u770b\u6240\u6709\u5df2\u6536\u5f55\u9898\u76ee~"))),"detail"===S&&l.a.createElement(H,{problemId:t})),l.a.createElement("div",{style:"allSolutions"===S?{}:{display:"none"}},l.a.createElement(d.a,{description:"\u6b63\u5728\u64b0\u5199\u9898\u89e3..."},l.a.createElement("div",{className:"row",style:{marginTop:"20px"}},"\u6240\u6709\u5df2\u6536\u5f55\u7684\u9898\u76ee"),l.a.createElement(c.a,{pagination:{hideOnSinglePage:!0},dataSource:ie,rowKey:"id",columns:le})))),""===S&&l.a.createElement(u.a,{type:"card",activeKey:z,onChange:q},l.a.createElement(te,{key:"code-template",tab:"\u4ee3\u7801\u6a21\u677f"},l.a.createElement(kn,{tempaltes:fn})),l.a.createElement(te,{key:"data-structure-vis",tab:"\u6570\u636e\u7ed3\u6784\u53ef\u89c6\u5316"},Object(M.h)()?l.a.createElement(m.a,{type:"link",target:"_blank",href:"https://leetcode-pp.github.io/leetcode-cheat/?tab=data-structure-vis"},"\u53bb\u7f51\u7ad9\u4f7f\u7528"):l.a.createElement(r.Suspense,{fallback:l.a.createElement("div",null,"Loading...")},l.a.createElement(Yn,null))),!Object(M.h)()&&l.a.createElement(te,{key:"solution-template",tab:"\u9898\u89e3\u6a21\u677f"},l.a.createElement(Jn,null)),l.a.createElement(te,{key:"complexityRating",tab:"\u590d\u6742\u5ea6\u901f\u67e5"},l.a.createElement(wn,null)),l.a.createElement(te,{key:"roadmap",tab:"\u5b66\u4e60\u8def\u7ebf"},l.a.createElement(W,null)),Object(M.h)()&&l.a.createElement(te,{key:"checkUpdate",tab:"\u68c0\u67e5\u66f4\u65b0"},l.a.createElement("div",null,"\u4e00\u822c\u53ea\u8981\u4f60\u5f00\u542f\u4e86\u81ea\u52a8\u66f4\u65b0\uff0c\u90a3\u4e48\u5f53\u63d2\u4ef6\u66f4\u65b0\u4e4b\u540e chrome\u4f1a\u5728\u4e94\u4e2a\u5c0f\u65f6\u4ee5\u5185\u81ea\u52a8\u66f4\u65b0\u3002 \u5982\u679c\u4f60\u60f3\u7b2c\u4e00\u65f6\u95f4\u66f4\u65b0\uff0c\u6216\u8005\u60a8\u7981\u7528\u4e86\u81ea\u52a8\u66f4\u65b0\uff0c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u68c0\u6d4b\u6700\u65b0\u7248\u3002"),l.a.createElement(m.a,{style:{margin:"20px 0 0 20px"},type:"primary",onClick:hn},"\u68c0\u67e5\u66f4\u65b0")),l.a.createElement(te,{key:"about",tab:"\u5173\u4e8e\u6211"},l.a.createElement("div",null,"\u4f5c\u8005\u662f\u4e00\u4e2a Github 40K star \u7684\u524d\u7aef\u67b6\u6784\u5e08\uff0cleetcode \u5237\u9898\u63d2\u4ef6 leetcode-cheatsheet \u4f5c\u8005\uff0c\u638c\u63e1\u5404\u79cd\u7b97\u6cd5\u5957\u8def\uff0c\u5199\u4e86\u5341\u51e0\u4e07\u5b57\u7684\u7b97\u6cd5\u5237\u9898\u5957\u8def\u7535\u5b50\u4e66\uff0c\u516c\u4f17\u53f7\u56de\u590d",l.a.createElement("b",null,"\u7535\u5b50\u4e66"),"\u83b7\u53d6\u3002",l.a.createElement(p.a,{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfcuzagjalj30p00dwabs.jpg"})))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(se,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)}))}});
//# sourceMappingURL=main.js.map