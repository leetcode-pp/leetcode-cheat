{
  "question": "206.reverse-linked-list",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "java",
      "code": "\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode pre = null, cur = head;\n\n        while (cur != null) {\n            ListNode next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n\n        return pre;\n    }\n}\n"
    },
    {
      "lang": "python",
      "code": "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head: return None\n        prev = None\n        cur = head\n        while cur:\n            cur.next, prev, cur = prev, cur, cur.next\n        return prev\n"
    },
    {
      "lang": "python",
      "code": "\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head or not head.next: return head\n        ans = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return ans\n"
    },
    {
      "lang": "js",
      "code": "\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    if (!head || !head.next) return head;\n\n    let cur = head;\n    let pre = null;\n\n    while(cur) {\n        const next = cur.next;\n        cur.next = pre;\n        pre = cur;\n        cur = next;\n    }\n\n    return pre;\n};\n\n"
    },
    {
      "lang": "js",
      "code": "\nvar reverseList = function(head) {\n  // 递归结束条件\n  if (head === null || head.next === null) {\n    return head\n  }\n\n  // 递归反转 子链表\n  let newReverseList = reverseList(head.next)\n  // 获取原来链表的第 2 个节点 newReverseListTail\n  let newReverseListTail = head.next\n  // 调整原来头结点和第 2 个节点的指向\n  newReverseListTail.next = head\n  head.next = null\n\n  // 将调整后的链表返回\n  return newReverseList\n}\n"
    }
  ]
}