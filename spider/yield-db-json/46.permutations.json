{
  "question": "46.permutations",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "js",
      "code": "\n/*\n * @lc app=leetcode id=46 lang=javascript\n *\n * [46] Permutations\n *\n * https://leetcode.com/problems/permutations/description/\n *\n * algorithms\n * Medium (53.60%)\n * Total Accepted:    344.6K\n * Total Submissions: 642.9K\n * Testcase Example:  '[1,2,3]'\n *\n * Given a collection of distinct integers, return all possible permutations.\n *\n * Example:\n *\n *\n * Input: [1,2,3]\n * Output:\n * [\n * ⁠ [1,2,3],\n * ⁠ [1,3,2],\n * ⁠ [2,1,3],\n * ⁠ [2,3,1],\n * ⁠ [3,1,2],\n * ⁠ [3,2,1]\n * ]\n *\n *\n */\nfunction backtrack(list, tempList, nums) {\n    if (tempList.length === nums.length) return list.push([...tempList]);\n    for(let i = 0; i < nums.length; i++) {\n        if (tempList.includes(nums[i])) continue;\n        tempList.push(nums[i]);\n        backtrack(list, tempList, nums);\n        tempList.pop();\n    }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    const list = [];\n    backtrack(list, [], nums)\n    return list\n};\n"
    }
  ]
}