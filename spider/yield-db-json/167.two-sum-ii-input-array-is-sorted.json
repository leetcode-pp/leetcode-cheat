{
  "question": "167.two-sum-ii-input-array-is-sorted",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "python",
      "code": "\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        visited = {}\n        for index, number in enumerate(numbers):\n            if target - number in visited:\n                return [visited[target-number], index+1]\n            else:\n                visited[number] = index + 1\n\n# 双指针思路实现\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] < target:\n                left += 1\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n"
    },
    {
      "lang": "js",
      "code": "\n/*\n * @lc app=leetcode id=167 lang=javascript\n *\n * [167] Two Sum II - Input array is sorted\n *\n * https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/\n *\n * algorithms\n * Easy (49.46%)\n * Total Accepted:    221.8K\n * Total Submissions: 447K\n * Testcase Example:  '[2,7,11,15]\\n9'\n *\n * Given an array of integers that is already sorted in ascending order, find\n * two numbers such that they add up to a specific target number.\n *\n * The function twoSum should return indices of the two numbers such that they\n * add up to the target, where index1 must be less than index2.\n *\n * Note:\n *\n *\n * Your returned answers (both index1 and index2) are not zero-based.\n * You may assume that each input would have exactly one solution and you may\n * not use the same element twice.\n *\n *\n * Example:\n *\n *\n * Input: numbers = [2,7,11,15], target = 9\n * Output: [1,2]\n * Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.\n *\n */\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const visited = {} // 记录出现的数字， 空间复杂度N\n\n    for (let index = 0; index < numbers.length; index++) {\n        const element = numbers[index];\n        if (visited[target - element] !== void 0) {\n            return [visited[target - element], index + 1]\n        }\n        visited[element] = index + 1;\n    }\n    return [];\n};\n"
    }
  ]
}