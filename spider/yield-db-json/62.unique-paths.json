{
  "question": "62.unique-paths",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "python",
      "code": "\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        d = [[1] * n for _ in range(m)]\n\n        for col in range(1, m):\n            for row in range(1, n):\n                d[col][row] = d[col - 1][row] + d[col][row - 1]\n\n        return d[m - 1][n - 1]\n "
    },
    {
      "lang": "python",
      "code": "\nclass Solution:\n    visited = dict()\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        if (m, n) in self.visited:\n            return self.visited[(m, n)]\n        if m == 1 or n == 1:\n            return 1\n        cnt = self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        self.visited[(m, n)] = cnt\n        return cnt\n "
    },
    {
      "lang": "python",
      "code": "\nclass Solution:\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                dp[j] += dp[j - 1]\n        return dp[n - 1]\n"
    },
    {
      "lang": "js",
      "code": "\n const dp = [];\n  for (let i = 0; i < m + 1; i++) {\n    dp[i] = [];\n    dp[i][0] = 0;\n  }\n  for (let i = 0; i < n + 1; i++) {\n    dp[0][i] = 0;\n  }\n  for (let i = 1; i < m + 1; i++) {\n    for(let j = 1; j < n + 1; j++) {\n        dp[i][j] = j === 1 ? 1 : dp[i - 1][j] + dp[i][j - 1]; // 转移方程\n    }\n  }\n\n  return dp[m][n];\n\n"
    },
    {
      "lang": "js",
      "code": "\n/*\n * @lc app=leetcode id=62 lang=javascript\n *\n * [62] Unique Paths\n *\n * https://leetcode.com/problems/unique-paths/description/\n */\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n  const dp = Array(n).fill(1);\n  \n  for(let i = 1; i < m; i++) {\n    for(let j = 1; j < n; j++) {\n      dp[j] = dp[j] + dp[j - 1];\n    } \n  }\n\n  return dp[n - 1];\n};\n"
    }
  ]
}