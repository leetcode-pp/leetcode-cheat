{
  "question": "3.longestSubstringWithoutRepeatingCharacters",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "python",
      "code": "\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        l = 0\n        ans = 0\n        counter = defaultdict(lambda: 0)\n\n        for r in range(len(s)):\n            while counter.get(s[r], 0) != 0:\n                counter[s[l]] = counter.get(s[l], 0) - 1\n                l += 1\n            counter[s[r]] += 1\n            ans = max(ans, r - l + 1)\n\n        return ans\n"
    },
    {
      "lang": "js",
      "code": "\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  const mapper = {}; // 记录已经出现过的charactor\n  let res = 0;\n  let slidingWindow = [];\n\n  for (let c of s) {\n    if (mapper[c]) {\n      // 已经出现过了\n      // 则删除\n      const delIndex = slidingWindow.findIndex(_c => _c === c);\n\n      for (let i = 0; i < delIndex; i++) {\n        mapper[slidingWindow[i]] = false;\n      }\n\n      slidingWindow = slidingWindow.slice(delIndex + 1).concat(c);\n    } else {\n      // 新字符\n      if (slidingWindow.push(c) > res) {\n        res = slidingWindow.length;\n      }\n    }\n    mapper[c] = true;\n  }\n  return res;\n};\n"
    }
  ]
}