{
  "question": "875.koko-eating-bananas",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "js",
      "code": "\n/*\n * @lc app=leetcode id=875 lang=javascript\n *\n * [875] Koko Eating Bananas\n *\n * https://leetcode.com/problems/koko-eating-bananas/description/\n *\n * algorithms\n * Medium (44.51%)\n * Total Accepted:    11.3K\n * Total Submissions: 24.8K\n * Testcase Example:  '[3,6,7,11]\\n8'\n *\n * Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has\n * piles[i] bananas.  The guards have gone and will come back in H hours.\n * \n * Koko can decide her bananas-per-hour eating speed of K.  Each hour, she\n * chooses some pile of bananas, and eats K bananas from that pile.  If the\n * pile has less than K bananas, she eats all of them instead, and won't eat\n * any more bananas during this hour.\n * \n * Koko likes to eat slowly, but still wants to finish eating all the bananas\n * before the guards come back.\n * \n * Return the minimum integer K such that she can eat all the bananas within H\n * hours.\n * \n * \n * \n * \n * \n * \n * \n * Example 1:\n * \n * \n * Input: piles = [3,6,7,11], H = 8\n * Output: 4\n * \n * \n * \n * Example 2:\n * \n * \n * Input: piles = [30,11,23,4,20], H = 5\n * Output: 30\n * \n * \n * \n * Example 3:\n * \n * \n * Input: piles = [30,11,23,4,20], H = 6\n * Output: 23\n * \n * \n * \n * \n * Note:\n * \n * \n * 1 <= piles.length <= 10^4\n * piles.length <= H <= 10^9\n * 1 <= piles[i] <= 10^9\n * \n * \n * \n * \n * \n */\n\n function canEatAllBananas(piles, H, mid) {\n     let h = 0;\n     for(let pile of piles) {\n        h += Math.ceil(pile / mid);\n     }\n\n     return h <= H;\n }\n/**\n * @param {number[]} piles\n * @param {number} H\n * @return {number}\n */\nvar minEatingSpeed = function(piles, H) {\n    let lo = 1,\n    hi = Math.max(...piles);\n\n    while(lo <= hi) {\n        let mid = lo + ((hi - lo) >> 1);\n        if (canEatAllBananas(piles, H, mid)) {\n            hi = mid - 1;\n        } else {\n            lo = mid + 1;\n        }\n    }\n\n    return lo; //  不能选择hi\n};\n"
    }
  ]
}