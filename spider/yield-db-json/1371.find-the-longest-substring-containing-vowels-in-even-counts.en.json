{
  "question": "1371.find-the-longest-substring-containing-vowels-in-even-counts.en",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "java",
      "code": "\nclass Solution {\n    public int findTheLongestSubstring(String s) {\n\n        int len = s.length();\n\n        if (len == 0)\n            return 0;\n\n        int[][] preSum = new int[len][5];\n        int start = getIndex(s.charAt(0));\n        if (start != -1)\n            preSum[0][start]++;\n\n        // preSum\n        for (int i = 1; i < len; i++) {\n\n            int idx = getIndex(s.charAt(i));\n\n            for (int j = 0; j < 5; j++) {\n\n                if (idx == j)\n                    preSum[i][j] = preSum[i - 1][j] + 1;\n                else\n                    preSum[i][j] = preSum[i - 1][j];\n            }\n        }\n\n        for (int i = len - 1; i >= 0; i--) {\n\n            for (int j = 0; j < len - i; j++) {\n                if (checkValid(preSum, s, i, i + j))\n                    return i + 1\n            }\n        }\n        return 0\n    }\n\n\n    public boolean checkValid(int[][] preSum, String s, int left, int right) {\n\n        int idx = getIndex(s.charAt(left));\n\n        for (int i = 0; i < 5; i++)\n            if (((preSum[right][i] - preSum[left][i] + (idx == i ? 1 : 0)) & 1) == 1)\n                return false;\n\n        return true;\n    }\n    public int getIndex(char ch) {\n\n        if (ch == 'a')\n            return 0;\n        else if (ch == 'e')\n            return 1;\n        else if (ch == 'i')\n            return 2;\n        else if (ch == 'o')\n            return 3;\n        else if (ch == 'u')\n            return 4;\n        else\n            return -1;\n    }\n}\n"
    },
    {
      "lang": "js",
      "code": "\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestSubstring = function (s) {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const hasEvenVowels = s => !vowels.some(v => (s.match(new RegExp(v, 'g'))||[]).length % 2 !== 0)\n  \n  for (let subStrLen = s.length; subStrLen >= 0; subStrLen--) {\n    let remove = s.length - subStrLen + 1\n\n    for (let start = 0; start < remove; start++) {\n      let subStr = s.slice(start, start + subStrLen)\n      if (hasEvenVowels(subStr)) {\n        return subStrLen\n      }\n    }\n  }\n};\n"
    },
    {
      "lang": "js",
      "code": "\n/**\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestSubstring = function (s) {\n  const prefixes = Array(s.length + 1).fill(0).map(el => Array(5).fill(0))\n  const vowels = {\n    a: 0,\n    e: 1,\n    i: 2,\n    o: 3,\n    u: 4\n  }\n\n  for (let i = 1; i < s.length + 1; i++) {\n    const letter = s[i - 1]\n    for (let j = 0; j < 5; j++) {\n      prefixes[i][j] = prefixes[i - 1][j]\n    }\n    if (letter in vowels) {\n      prefixes[i][vowels[letter]] = prefixes[i - 1][vowels[letter]] + 1\n    }\n  }\n\n  const check = (s, prefixes, l, r) => {\n    for (let i = 0; i < 5; i++) {\n      const count = s[l] in vowels && vowels[s[l]] === i\n      if ((prefixes[r + 1][i] - prefixes[l + 1][i] + count) % 2 !== 0) {\n        return false\n      }\n    }\n    return true\n  }\n\n  for (let r = s.length - 1; r >= 0; r--) {\n    for (let l = 0; l < s.length - r; l++) {\n      if (check(s, prefixes, l, l + r)) {\n        return r + 1\n      }\n    }\n  }\n\n  return 0\n};\n"
    },
    {
      "lang": "js",
      "code": "\n/**\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestSubstring = function (s) {\n  const mapper = {\n    \"a\": 1,\n    \"e\": 2,\n    \"i\": 4,\n    \"o\": 8,\n    \"u\": 16\n  }\n\n  let max = 0, cur = 0\n  const seen = { 0: -1 }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] in mapper) {\n      cur ^= mapper[s[i]]\n    }\n    if (cur in seen) {\n      max = Math.max(max, i - seen[cur])\n    }\n    else {\n      seen[cur] = i\n    }\n  }\n\n  return max\n};\n"
    }
  ]
}