{
  "question": "2.addTwoNumbers.en",
  "companys": [
    "TODO"
  ],
  "tags": [
    "TODO"
  ],
  "reslove": [
    {
      "lang": "js",
      "code": "\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  if (l1 === null || l2 === null) return null\n\n  // using dummyHead can simplify linked list's calculation, dummyHead.next points to the new linked list\n  let dummyHead = new ListNode(0)\n  let cur1 = l1\n  let cur2 = l2\n  let cur = dummyHead // cur is for the calculation in new linked list\n  let carry = 0 // carry-over symbol\n\n  while (cur1 !== null || cur2 !== null) {\n    let val1 = cur1 !== null ? cur1.val : 0\n    let val2 = cur2 !== null ? cur2.val : 0\n    let sum = val1 + val2 + carry\n    let newNode = new ListNode(sum % 10) // the result of sum%10 ranges from 0 to 9, which is the value of the current digit\n    carry = sum >= 10 ? 1 : 0 // sum>=10, carry=1, so carry-over exists here\n    cur.next = newNode\n    cur = cur.next\n\n    if (cur1 !== null) {\n      cur1 = cur1.next\n    }\n\n    if (cur2 !== null) {\n      cur2 = cur2.next\n    }\n  }\n\n  if (carry > 0) {\n    // If there's still carry-over in the end, then add a new node\n    cur.next = new ListNode(carry)\n  }\n\n  return dummyHead.next\n};\n"
    }
  ]
}